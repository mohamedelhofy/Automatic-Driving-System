
Ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000678c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  0000678c  00006820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080019c  0080019c  0000695c  2**0
                  ALLOC
  3 .stab         00004b54  00000000  00000000  0000695c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001576  00000000  00000000  0000b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000f1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00010539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011714  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000118d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00011bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e8       	ldi	r30, 0x8C	; 140
     162:	f7 e6       	ldi	r31, 0x67	; 103
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ac 39       	cpi	r26, 0x9C	; 156
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	ac e9       	ldi	r26, 0x9C	; 156
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 39       	cpi	r26, 0x9E	; 158
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <main>
     184:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 20 31 	jmp	0x6240	; 0x6240 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	aa e7       	ldi	r26, 0x7A	; 122
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 48 31 	jmp	0x6290	; 0x6290 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 48 31 	jmp	0x6290	; 0x6290 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 20 31 	jmp	0x6240	; 0x6240 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e7       	ldi	r24, 0x7A	; 122
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6a e7       	ldi	r22, 0x7A	; 122
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 48 31 	jmp	0x6290	; 0x6290 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 48 31 	jmp	0x6290	; 0x6290 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 48 31 	jmp	0x6290	; 0x6290 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 84 05 	call	0xb08	; 0xb08 <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 45 31 	jmp	0x628a	; 0x628a <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 30 31 	jmp	0x6260	; 0x6260 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__epilogue_restores__+0x20>

00000b08 <__clzsi2>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	e8 16       	cp	r14, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	f8 06       	cpc	r15, r24
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	08 07       	cpc	r16, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	18 07       	cpc	r17, r24
     b24:	88 f4       	brcc	.+34     	; 0xb48 <__clzsi2+0x40>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	e8 16       	cp	r14, r24
     b2a:	f1 04       	cpc	r15, r1
     b2c:	01 05       	cpc	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	31 f0       	breq	.+12     	; 0xb3e <__clzsi2+0x36>
     b32:	28 f0       	brcs	.+10     	; 0xb3e <__clzsi2+0x36>
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__clzsi2+0x64>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	12 c0       	rjmp	.+36     	; 0xb6c <__clzsi2+0x64>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e8 16       	cp	r14, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	f8 06       	cpc	r15, r24
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 07       	cpc	r16, r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	18 07       	cpc	r17, r24
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__clzsi2+0x5c>
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <__clzsi2+0x64>
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	28 1b       	sub	r18, r24
     b76:	39 0b       	sbc	r19, r25
     b78:	4a 0b       	sbc	r20, r26
     b7a:	5b 0b       	sbc	r21, r27
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__clzsi2+0x7e>
     b7e:	16 95       	lsr	r17
     b80:	07 95       	ror	r16
     b82:	f7 94       	ror	r15
     b84:	e7 94       	ror	r14
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__clzsi2+0x76>
     b8a:	f7 01       	movw	r30, r14
     b8c:	ee 57       	subi	r30, 0x7E	; 126
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	28 1b       	sub	r18, r24
     b94:	31 09       	sbc	r19, r1
     b96:	41 09       	sbc	r20, r1
     b98:	51 09       	sbc	r21, r1
     b9a:	c9 01       	movw	r24, r18
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <__pack_f>:
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	fc 01       	movw	r30, r24
     bb2:	e4 80       	ldd	r14, Z+4	; 0x04
     bb4:	f5 80       	ldd	r15, Z+5	; 0x05
     bb6:	06 81       	ldd	r16, Z+6	; 0x06
     bb8:	17 81       	ldd	r17, Z+7	; 0x07
     bba:	d1 80       	ldd	r13, Z+1	; 0x01
     bbc:	80 81       	ld	r24, Z
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	48 f4       	brcc	.+18     	; 0xbd4 <__pack_f+0x2e>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e1       	ldi	r26, 0x10	; 16
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 2a       	or	r14, r24
     bcc:	f9 2a       	or	r15, r25
     bce:	0a 2b       	or	r16, r26
     bd0:	1b 2b       	or	r17, r27
     bd2:	a5 c0       	rjmp	.+330    	; 0xd1e <__pack_f+0x178>
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	09 f4       	brne	.+2      	; 0xbda <__pack_f+0x34>
     bd8:	9f c0       	rjmp	.+318    	; 0xd18 <__pack_f+0x172>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <__pack_f+0x40>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__pack_f+0x4a>
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	01 05       	cpc	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	19 f4       	brne	.+6      	; 0xbf6 <__pack_f+0x50>
     bf0:	e0 e0       	ldi	r30, 0x00	; 0
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	96 c0       	rjmp	.+300    	; 0xd22 <__pack_f+0x17c>
     bf6:	62 81       	ldd	r22, Z+2	; 0x02
     bf8:	73 81       	ldd	r23, Z+3	; 0x03
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	62 38       	cpi	r22, 0x82	; 130
     bfe:	79 07       	cpc	r23, r25
     c00:	0c f0       	brlt	.+2      	; 0xc04 <__pack_f+0x5e>
     c02:	5b c0       	rjmp	.+182    	; 0xcba <__pack_f+0x114>
     c04:	22 e8       	ldi	r18, 0x82	; 130
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	26 1b       	sub	r18, r22
     c0a:	37 0b       	sbc	r19, r23
     c0c:	2a 31       	cpi	r18, 0x1A	; 26
     c0e:	31 05       	cpc	r19, r1
     c10:	2c f0       	brlt	.+10     	; 0xc1c <__pack_f+0x76>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	2a c0       	rjmp	.+84     	; 0xc70 <__pack_f+0xca>
     c1c:	b8 01       	movw	r22, r16
     c1e:	a7 01       	movw	r20, r14
     c20:	02 2e       	mov	r0, r18
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__pack_f+0x86>
     c24:	76 95       	lsr	r23
     c26:	67 95       	ror	r22
     c28:	57 95       	ror	r21
     c2a:	47 95       	ror	r20
     c2c:	0a 94       	dec	r0
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <__pack_f+0x7e>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__pack_f+0x9c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__pack_f+0x94>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__pack_f+0xbe>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	9a 01       	movw	r18, r20
     c66:	ab 01       	movw	r20, r22
     c68:	28 2b       	or	r18, r24
     c6a:	39 2b       	or	r19, r25
     c6c:	4a 2b       	or	r20, r26
     c6e:	5b 2b       	or	r21, r27
     c70:	da 01       	movw	r26, r20
     c72:	c9 01       	movw	r24, r18
     c74:	8f 77       	andi	r24, 0x7F	; 127
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	a0 70       	andi	r26, 0x00	; 0
     c7a:	b0 70       	andi	r27, 0x00	; 0
     c7c:	80 34       	cpi	r24, 0x40	; 64
     c7e:	91 05       	cpc	r25, r1
     c80:	a1 05       	cpc	r26, r1
     c82:	b1 05       	cpc	r27, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <__pack_f+0xee>
     c86:	27 ff       	sbrs	r18, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <__pack_f+0xf6>
     c8a:	20 5c       	subi	r18, 0xC0	; 192
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	4f 4f       	sbci	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__pack_f+0xf6>
     c94:	21 5c       	subi	r18, 0xC1	; 193
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	4f 4f       	sbci	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	e0 e0       	ldi	r30, 0x00	; 0
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	20 30       	cpi	r18, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	3a 07       	cpc	r19, r26
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	4a 07       	cpc	r20, r26
     caa:	a0 e4       	ldi	r26, 0x40	; 64
     cac:	5a 07       	cpc	r21, r26
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <__pack_f+0x10e>
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	79 01       	movw	r14, r18
     cb6:	8a 01       	movw	r16, r20
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <__pack_f+0x162>
     cba:	60 38       	cpi	r22, 0x80	; 128
     cbc:	71 05       	cpc	r23, r1
     cbe:	64 f5       	brge	.+88     	; 0xd18 <__pack_f+0x172>
     cc0:	fb 01       	movw	r30, r22
     cc2:	e1 58       	subi	r30, 0x81	; 129
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	d8 01       	movw	r26, r16
     cc8:	c7 01       	movw	r24, r14
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	a0 70       	andi	r26, 0x00	; 0
     cd0:	b0 70       	andi	r27, 0x00	; 0
     cd2:	80 34       	cpi	r24, 0x40	; 64
     cd4:	91 05       	cpc	r25, r1
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	39 f4       	brne	.+14     	; 0xcea <__pack_f+0x144>
     cdc:	e7 fe       	sbrs	r14, 7
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <__pack_f+0x154>
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__pack_f+0x14c>
     cea:	8f e3       	ldi	r24, 0x3F	; 63
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 0e       	add	r14, r24
     cf4:	f9 1e       	adc	r15, r25
     cf6:	0a 1f       	adc	r16, r26
     cf8:	1b 1f       	adc	r17, r27
     cfa:	17 ff       	sbrs	r17, 7
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x162>
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	f7 94       	ror	r15
     d04:	e7 94       	ror	r14
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	16 95       	lsr	r17
     d0c:	07 95       	ror	r16
     d0e:	f7 94       	ror	r15
     d10:	e7 94       	ror	r14
     d12:	8a 95       	dec	r24
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__pack_f+0x164>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <__pack_f+0x17c>
     d18:	ee 24       	eor	r14, r14
     d1a:	ff 24       	eor	r15, r15
     d1c:	87 01       	movw	r16, r14
     d1e:	ef ef       	ldi	r30, 0xFF	; 255
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	6e 2f       	mov	r22, r30
     d24:	67 95       	ror	r22
     d26:	66 27       	eor	r22, r22
     d28:	67 95       	ror	r22
     d2a:	90 2f       	mov	r25, r16
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	d7 94       	ror	r13
     d30:	dd 24       	eor	r13, r13
     d32:	d7 94       	ror	r13
     d34:	8e 2f       	mov	r24, r30
     d36:	86 95       	lsr	r24
     d38:	49 2f       	mov	r20, r25
     d3a:	46 2b       	or	r20, r22
     d3c:	58 2f       	mov	r21, r24
     d3e:	5d 29       	or	r21, r13
     d40:	b7 01       	movw	r22, r14
     d42:	ca 01       	movw	r24, r20
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	08 95       	ret

00000d50 <__unpack_f>:
     d50:	fc 01       	movw	r30, r24
     d52:	db 01       	movw	r26, r22
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	62 2f       	mov	r22, r18
     d5c:	6f 77       	andi	r22, 0x7F	; 127
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 1f       	adc	r18, r18
     d62:	22 27       	eor	r18, r18
     d64:	22 1f       	adc	r18, r18
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	89 2f       	mov	r24, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	82 2b       	or	r24, r18
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	99 1f       	adc	r25, r25
     d74:	99 27       	eor	r25, r25
     d76:	99 1f       	adc	r25, r25
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	9c 93       	st	X, r25
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	a9 f5       	brne	.+106    	; 0xdee <__unpack_f+0x9e>
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	61 05       	cpc	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__unpack_f+0x42>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	37 c0       	rjmp	.+110    	; 0xe00 <__unpack_f+0xb0>
     d92:	82 e8       	ldi	r24, 0x82	; 130
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	13 96       	adiw	r26, 0x03	; 3
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	9a 01       	movw	r18, r20
     da0:	ab 01       	movw	r20, r22
     da2:	67 e0       	ldi	r22, 0x07	; 7
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	6a 95       	dec	r22
     dae:	d1 f7       	brne	.-12     	; 0xda4 <__unpack_f+0x54>
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	8c 93       	st	X, r24
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__unpack_f+0x80>
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8d 91       	ld	r24, X+
     dc2:	9c 91       	ld	r25, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	12 97       	sbiw	r26, 0x02	; 2
     dd0:	20 30       	cpi	r18, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	38 07       	cpc	r19, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	48 07       	cpc	r20, r24
     dda:	80 e4       	ldi	r24, 0x40	; 64
     ddc:	58 07       	cpc	r21, r24
     dde:	58 f3       	brcs	.-42     	; 0xdb6 <__unpack_f+0x66>
     de0:	14 96       	adiw	r26, 0x04	; 4
     de2:	2d 93       	st	X+, r18
     de4:	3d 93       	st	X+, r19
     de6:	4d 93       	st	X+, r20
     de8:	5c 93       	st	X, r21
     dea:	17 97       	sbiw	r26, 0x07	; 7
     dec:	08 95       	ret
     dee:	2f 3f       	cpi	r18, 0xFF	; 255
     df0:	31 05       	cpc	r19, r1
     df2:	79 f4       	brne	.+30     	; 0xe12 <__unpack_f+0xc2>
     df4:	41 15       	cp	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__unpack_f+0xb4>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8c 93       	st	X, r24
     e02:	08 95       	ret
     e04:	64 ff       	sbrs	r22, 4
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <__unpack_f+0xbe>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <__unpack_f+0xe2>
     e0e:	1c 92       	st	X, r1
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <__unpack_f+0xe2>
     e12:	2f 57       	subi	r18, 0x7F	; 127
     e14:	30 40       	sbci	r19, 0x00	; 0
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	3c 93       	st	X, r19
     e1a:	2e 93       	st	-X, r18
     e1c:	12 97       	sbiw	r26, 0x02	; 2
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	8c 93       	st	X, r24
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	66 1f       	adc	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	8a 95       	dec	r24
     e2e:	d1 f7       	brne	.-12     	; 0xe24 <__unpack_f+0xd4>
     e30:	70 64       	ori	r23, 0x40	; 64
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	4d 93       	st	X+, r20
     e36:	5d 93       	st	X+, r21
     e38:	6d 93       	st	X+, r22
     e3a:	7c 93       	st	X, r23
     e3c:	17 97       	sbiw	r26, 0x07	; 7
     e3e:	08 95       	ret

00000e40 <__fpcmp_parts_f>:
     e40:	1f 93       	push	r17
     e42:	dc 01       	movw	r26, r24
     e44:	fb 01       	movw	r30, r22
     e46:	9c 91       	ld	r25, X
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0xe>
     e4c:	47 c0       	rjmp	.+142    	; 0xedc <__fpcmp_parts_f+0x9c>
     e4e:	80 81       	ld	r24, Z
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__fpcmp_parts_f+0x16>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <__fpcmp_parts_f+0x9c>
     e56:	94 30       	cpi	r25, 0x04	; 4
     e58:	51 f4       	brne	.+20     	; 0xe6e <__fpcmp_parts_f+0x2e>
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	99 f5       	brne	.+102    	; 0xec8 <__fpcmp_parts_f+0x88>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	68 2f       	mov	r22, r24
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	61 1b       	sub	r22, r17
     e6a:	71 09       	sbc	r23, r1
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <__fpcmp_parts_f+0xac>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	21 f0       	breq	.+8      	; 0xe7a <__fpcmp_parts_f+0x3a>
     e72:	92 30       	cpi	r25, 0x02	; 2
     e74:	31 f4       	brne	.+12     	; 0xe82 <__fpcmp_parts_f+0x42>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	b9 f1       	breq	.+110    	; 0xee8 <__fpcmp_parts_f+0xa8>
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	88 23       	and	r24, r24
     e7e:	89 f1       	breq	.+98     	; 0xee2 <__fpcmp_parts_f+0xa2>
     e80:	2d c0       	rjmp	.+90     	; 0xedc <__fpcmp_parts_f+0x9c>
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	1c 91       	ld	r17, X
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	f1 f0       	breq	.+60     	; 0xec8 <__fpcmp_parts_f+0x88>
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	18 17       	cp	r17, r24
     e90:	d9 f4       	brne	.+54     	; 0xec8 <__fpcmp_parts_f+0x88>
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	82 17       	cp	r24, r18
     ea0:	93 07       	cpc	r25, r19
     ea2:	94 f0       	brlt	.+36     	; 0xec8 <__fpcmp_parts_f+0x88>
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	bc f0       	brlt	.+46     	; 0xed8 <__fpcmp_parts_f+0x98>
     eaa:	14 96       	adiw	r26, 0x04	; 4
     eac:	8d 91       	ld	r24, X+
     eae:	9d 91       	ld	r25, X+
     eb0:	0d 90       	ld	r0, X+
     eb2:	bc 91       	ld	r27, X
     eb4:	a0 2d       	mov	r26, r0
     eb6:	24 81       	ldd	r18, Z+4	; 0x04
     eb8:	35 81       	ldd	r19, Z+5	; 0x05
     eba:	46 81       	ldd	r20, Z+6	; 0x06
     ebc:	57 81       	ldd	r21, Z+7	; 0x07
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	4a 07       	cpc	r20, r26
     ec4:	5b 07       	cpc	r21, r27
     ec6:	18 f4       	brcc	.+6      	; 0xece <__fpcmp_parts_f+0x8e>
     ec8:	11 23       	and	r17, r17
     eca:	41 f0       	breq	.+16     	; 0xedc <__fpcmp_parts_f+0x9c>
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <__fpcmp_parts_f+0xa2>
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	a4 07       	cpc	r26, r20
     ed4:	b5 07       	cpc	r27, r21
     ed6:	40 f4       	brcc	.+16     	; 0xee8 <__fpcmp_parts_f+0xa8>
     ed8:	11 23       	and	r17, r17
     eda:	19 f0       	breq	.+6      	; 0xee2 <__fpcmp_parts_f+0xa2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__fpcmp_parts_f+0xac>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <__fpcmp_parts_f+0xac>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	cb 01       	movw	r24, r22
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <ADC_voidInit>:

#include "../Library/STD_TYPES.h"
#include "../Library/BIT_MATH.h"
#include "ADC_Interface.h"
#include "ADC_Register.h"
void ADC_voidInit(void){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	// select voltage refernce
	CLR_BIT(ADMUX,ADMUX_REFS1);
     efa:	a7 e2       	ldi	r26, 0x27	; 39
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e7 e2       	ldi	r30, 0x27	; 39
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     f08:	a7 e2       	ldi	r26, 0x27	; 39
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e2       	ldi	r30, 0x27	; 39
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 64       	ori	r24, 0x40	; 64
     f14:	8c 93       	st	X, r24
	// select the right adjustment
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     f16:	a7 e2       	ldi	r26, 0x27	; 39
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e2       	ldi	r30, 0x27	; 39
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	8c 93       	st	X, r24
	// Prescaler Select
	SET_BIT(ADCSRA,ADSCRA_ADPS0);
     f24:	a6 e2       	ldi	r26, 0x26	; 38
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSCRA_ADPS1);
     f32:	a6 e2       	ldi	r26, 0x26	; 38
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e6 e2       	ldi	r30, 0x26	; 38
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSCRA_ADPS2);
     f40:	a6 e2       	ldi	r26, 0x26	; 38
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 e2       	ldi	r30, 0x26	; 38
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	8c 93       	st	X, r24
	//  enables the ADC
	SET_BIT(ADCSRA,ADSCRA_ADEN);
     f4e:	a6 e2       	ldi	r26, 0x26	; 38
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e6 e2       	ldi	r30, 0x26	; 38
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <ADC_u16GetDigitalValue>:
u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNb){
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADMUX_CHANNEL_NUM_MASK ;
     f6e:	a7 e2       	ldi	r26, 0x27	; 39
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e2       	ldi	r30, 0x27	; 39
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 77       	andi	r24, 0x70	; 112
     f7a:	8c 93       	st	X, r24
	// select channel number
	ADMUX |= Copy_u8ChannelNb ;
     f7c:	a7 e2       	ldi	r26, 0x27	; 39
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e2       	ldi	r30, 0x27	; 39
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	90 81       	ld	r25, Z
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	89 2b       	or	r24, r25
     f8a:	8c 93       	st	X, r24
	// Start Conversion
	SET_BIT(ADCSRA,ADSCRA_ADSC);
     f8c:	a6 e2       	ldi	r26, 0x26	; 38
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e6 e2       	ldi	r30, 0x26	; 38
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	8c 93       	st	X, r24
	// polling on flag
	while(GET_BIT(ADCSRA,ADSCRA_ADIF) == 0);
     f9a:	e6 e2       	ldi	r30, 0x26	; 38
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	82 95       	swap	r24
     fa2:	8f 70       	andi	r24, 0x0F	; 15
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	a9 f3       	breq	.-22     	; 0xf9a <ADC_u16GetDigitalValue+0x38>
	SET_BIT(ADCSRA,ADSCRA_ADIF);
     fb0:	a6 e2       	ldi	r26, 0x26	; 38
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e6 e2       	ldi	r30, 0x26	; 38
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 61       	ori	r24, 0x10	; 16
     fbc:	8c 93       	st	X, r24

	return ADC;
     fbe:	e4 e2       	ldi	r30, 0x24	; 36
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01

}
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_voidSetPortDirection>:
#include "../Library/STD_TYPES.h"
#include "../Library/BIT_MATH.h"
#include "DIO_Register.h"
#include "DIO_Interface.h"
void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_voidSetPortDirection+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_voidSetPortDirection+0x8>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02

	switch(u8PortId){
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3c 83       	std	Y+4, r19	; 0x04
     fe6:	2b 83       	std	Y+3, r18	; 0x03
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	d1 f0       	breq	.+52     	; 0x1026 <DIO_voidSetPortDirection+0x58>
     ff2:	2b 81       	ldd	r18, Y+3	; 0x03
     ff4:	3c 81       	ldd	r19, Y+4	; 0x04
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_voidSetPortDirection+0x38>
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	61 f0       	breq	.+24     	; 0x101c <DIO_voidSetPortDirection+0x4e>
    1004:	1e c0       	rjmp	.+60     	; 0x1042 <DIO_voidSetPortDirection+0x74>
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	3c 81       	ldd	r19, Y+4	; 0x04
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	81 f0       	breq	.+32     	; 0x1030 <DIO_voidSetPortDirection+0x62>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	81 f0       	breq	.+32     	; 0x103a <DIO_voidSetPortDirection+0x6c>
    101a:	13 c0       	rjmp	.+38     	; 0x1042 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTA : DDRA= Direction; break;
    101c:	ea e3       	ldi	r30, 0x3A	; 58
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	80 83       	st	Z, r24
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTB : DDRB= Direction; break;
    1026:	e7 e3       	ldi	r30, 0x37	; 55
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	80 83       	st	Z, r24
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTC : DDRC= Direction; break;
    1030:	e4 e3       	ldi	r30, 0x34	; 52
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	80 83       	st	Z, r24
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTD : DDRD= Direction; break;
    103a:	e1 e3       	ldi	r30, 0x31	; 49
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	80 83       	st	Z, r24
	}

}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal){
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <DIO_voidSetPortValue+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <DIO_voidSetPortValue+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	6a 83       	std	Y+2, r22	; 0x02
		
	switch(u8PortId){
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3c 83       	std	Y+4, r19	; 0x04
    1068:	2b 83       	std	Y+3, r18	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	d1 f0       	breq	.+52     	; 0x10a8 <DIO_voidSetPortValue+0x58>
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	3c 81       	ldd	r19, Y+4	; 0x04
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_voidSetPortValue+0x38>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <DIO_voidSetPortValue+0x4e>
    1086:	1e c0       	rjmp	.+60     	; 0x10c4 <DIO_voidSetPortValue+0x74>
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	3c 81       	ldd	r19, Y+4	; 0x04
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_voidSetPortValue+0x62>
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	81 f0       	breq	.+32     	; 0x10bc <DIO_voidSetPortValue+0x6c>
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <DIO_voidSetPortValue+0x74>
		case DIO_u8_PORTA :PORTA=u8PortVal;  break;
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	80 83       	st	Z, r24
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <DIO_voidSetPortValue+0x74>
		case DIO_u8_PORTB :PORTB=u8PortVal; break;
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	80 83       	st	Z, r24
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <DIO_voidSetPortValue+0x74>
		case DIO_u8_PORTC :PORTC=u8PortVal; break;
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	80 83       	st	Z, r24
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <DIO_voidSetPortValue+0x74>
		case DIO_u8_PORTD :PORTD=u8PortVal;  break;
    10bc:	e2 e3       	ldi	r30, 0x32	; 50
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 83       	st	Z, r24
	}
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8GetPinValue+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DIO_u8GetPinValue+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
    10e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
    10e4:	19 82       	std	Y+1, r1	; 0x01
	switch(u8PortIdCopy){
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	4c 81       	ldd	r20, Y+4	; 0x04
    10f2:	5d 81       	ldd	r21, Y+5	; 0x05
    10f4:	41 30       	cpi	r20, 0x01	; 1
    10f6:	51 05       	cpc	r21, r1
    10f8:	41 f1       	breq	.+80     	; 0x114a <DIO_u8GetPinValue+0x78>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <DIO_u8GetPinValue+0x3e>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	61 f0       	breq	.+24     	; 0x1126 <DIO_u8GetPinValue+0x54>
    110e:	52 c0       	rjmp	.+164    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
    1110:	4c 81       	ldd	r20, Y+4	; 0x04
    1112:	5d 81       	ldd	r21, Y+5	; 0x05
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	51 05       	cpc	r21, r1
    1118:	51 f1       	breq	.+84     	; 0x116e <DIO_u8GetPinValue+0x9c>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	b9 f1       	breq	.+110    	; 0x1192 <DIO_u8GetPinValue+0xc0>
    1124:	47 c0       	rjmp	.+142    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8_PORTA : value = GET_BIT(PINA , u8PinIdCopy); break;
    1126:	e9 e3       	ldi	r30, 0x39	; 57
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8GetPinValue+0x6c>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8GetPinValue+0x68>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	35 c0       	rjmp	.+106    	; 0x11b4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8_PORTB : value = GET_BIT(PINB , u8PinIdCopy); break;
    114a:	e6 e3       	ldi	r30, 0x36	; 54
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8GetPinValue+0x90>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8GetPinValue+0x8c>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	23 c0       	rjmp	.+70     	; 0x11b4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8_PORTC : value = GET_BIT(PINC , u8PinIdCopy); break;
    116e:	e3 e3       	ldi	r30, 0x33	; 51
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8GetPinValue+0xb4>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8GetPinValue+0xb0>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8_PORTD : value = GET_BIT(PIND , u8PinIdCopy); break;
    1192:	e0 e3       	ldi	r30, 0x30	; 48
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8GetPinValue+0xd8>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8GetPinValue+0xd4>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	27 97       	sbiw	r28, 0x07	; 7
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6a 83       	std	Y+2, r22	; 0x02
    11de:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PinValCopy == DIO_u8_HIGH)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <DIO_voidSetPinValue+0x22>
    11e6:	6f c0       	rjmp	.+222    	; 0x12c6 <DIO_voidSetPinValue+0x100>
	{
		switch(u8PortIdCopy){
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3f 83       	std	Y+7, r19	; 0x07
    11f0:	2e 83       	std	Y+6, r18	; 0x06
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	9f 81       	ldd	r25, Y+7	; 0x07
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	49 f1       	breq	.+82     	; 0x124e <DIO_voidSetPinValue+0x88>
    11fc:	2e 81       	ldd	r18, Y+6	; 0x06
    11fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_voidSetPinValue+0x4a>
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 f0       	breq	.+24     	; 0x1226 <DIO_voidSetPinValue+0x60>
    120e:	ce c0       	rjmp	.+412    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
    1210:	2e 81       	ldd	r18, Y+6	; 0x06
    1212:	3f 81       	ldd	r19, Y+7	; 0x07
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	71 f1       	breq	.+92     	; 0x1276 <DIO_voidSetPinValue+0xb0>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	e9 f1       	breq	.+122    	; 0x129e <DIO_voidSetPinValue+0xd8>
    1224:	c3 c0       	rjmp	.+390    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
    1226:	ab e3       	ldi	r26, 0x3B	; 59
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_voidSetPinValue+0x7e>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_voidSetPinValue+0x7a>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	af c0       	rjmp	.+350    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_voidSetPinValue+0xa6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_voidSetPinValue+0xa2>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	9b c0       	rjmp	.+310    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_voidSetPinValue+0xce>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_voidSetPinValue+0xca>
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	87 c0       	rjmp	.+270    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
    129e:	a2 e3       	ldi	r26, 0x32	; 50
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e2 e3       	ldi	r30, 0x32	; 50
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_voidSetPinValue+0xf6>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_voidSetPinValue+0xf2>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	73 c0       	rjmp	.+230    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
		}
	}else{
		switch(u8PortIdCopy){
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3d 83       	std	Y+5, r19	; 0x05
    12ce:	2c 83       	std	Y+4, r18	; 0x04
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	59 f1       	breq	.+86     	; 0x1330 <DIO_voidSetPinValue+0x16a>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <DIO_voidSetPinValue+0x128>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f0       	breq	.+26     	; 0x1306 <DIO_voidSetPinValue+0x140>
    12ec:	5f c0       	rjmp	.+190    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	89 f1       	breq	.+98     	; 0x135a <DIO_voidSetPinValue+0x194>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	91 05       	cpc	r25, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <DIO_voidSetPinValue+0x13e>
    1302:	40 c0       	rjmp	.+128    	; 0x1384 <DIO_voidSetPinValue+0x1be>
    1304:	53 c0       	rjmp	.+166    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
    1306:	ab e3       	ldi	r26, 0x3B	; 59
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidSetPinValue+0x15e>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidSetPinValue+0x15a>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	3e c0       	rjmp	.+124    	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_voidSetPinValue+0x188>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_voidSetPinValue+0x184>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	29 c0       	rjmp	.+82     	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
    135a:	a5 e3       	ldi	r26, 0x35	; 53
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e5 e3       	ldi	r30, 0x35	; 53
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_voidSetPinValue+0x1b2>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_voidSetPinValue+0x1ae>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <DIO_voidSetPinValue+0x1e6>
			case DIO_u8_PORTD : CLR_BIT(PORTD , u8PinIdCopy); break;
    1384:	a2 e3       	ldi	r26, 0x32	; 50
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e3       	ldi	r30, 0x32	; 50
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_voidSetPinValue+0x1dc>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_voidSetPinValue+0x1d8>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
		}

	}

}
    13ac:	27 96       	adiw	r28, 0x07	; 7
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	27 97       	sbiw	r28, 0x07	; 7
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	6a 83       	std	Y+2, r22	; 0x02
    13d6:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PinDirCopy == DIO_u8_OUTPUT)
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <DIO_voidSetPinDirection+0x22>
    13de:	6f c0       	rjmp	.+222    	; 0x14be <DIO_voidSetPinDirection+0x100>
	{
		switch(u8PortIdCopy){
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	3f 83       	std	Y+7, r19	; 0x07
    13e8:	2e 83       	std	Y+6, r18	; 0x06
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	9f 81       	ldd	r25, Y+7	; 0x07
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	91 05       	cpc	r25, r1
    13f2:	49 f1       	breq	.+82     	; 0x1446 <DIO_voidSetPinDirection+0x88>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	2c f4       	brge	.+10     	; 0x1408 <DIO_voidSetPinDirection+0x4a>
    13fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1400:	9f 81       	ldd	r25, Y+7	; 0x07
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	61 f0       	breq	.+24     	; 0x141e <DIO_voidSetPinDirection+0x60>
    1406:	ce c0       	rjmp	.+412    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
    1408:	2e 81       	ldd	r18, Y+6	; 0x06
    140a:	3f 81       	ldd	r19, Y+7	; 0x07
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	71 f1       	breq	.+92     	; 0x146e <DIO_voidSetPinDirection+0xb0>
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	e9 f1       	breq	.+122    	; 0x1496 <DIO_voidSetPinDirection+0xd8>
    141c:	c3 c0       	rjmp	.+390    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
    141e:	aa e3       	ldi	r26, 0x3A	; 58
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_voidSetPinDirection+0x7e>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_voidSetPinDirection+0x7a>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	af c0       	rjmp	.+350    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
    1446:	a7 e3       	ldi	r26, 0x37	; 55
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e7 e3       	ldi	r30, 0x37	; 55
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_voidSetPinDirection+0xa6>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_voidSetPinDirection+0xa2>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	9b c0       	rjmp	.+310    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
    146e:	a4 e3       	ldi	r26, 0x34	; 52
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e4 e3       	ldi	r30, 0x34	; 52
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_voidSetPinDirection+0xce>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_voidSetPinDirection+0xca>
    1490:	84 2b       	or	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	87 c0       	rjmp	.+270    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
    1496:	a1 e3       	ldi	r26, 0x31	; 49
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e1 e3       	ldi	r30, 0x31	; 49
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_voidSetPinDirection+0xf6>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_voidSetPinDirection+0xf2>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	73 c0       	rjmp	.+230    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
		}
	}else{
		switch(u8PortIdCopy){
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	59 f1       	breq	.+86     	; 0x1528 <DIO_voidSetPinDirection+0x16a>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <DIO_voidSetPinDirection+0x128>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f0       	breq	.+26     	; 0x14fe <DIO_voidSetPinDirection+0x140>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	89 f1       	breq	.+98     	; 0x1552 <DIO_voidSetPinDirection+0x194>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <DIO_voidSetPinDirection+0x13e>
    14fa:	40 c0       	rjmp	.+128    	; 0x157c <DIO_voidSetPinDirection+0x1be>
    14fc:	53 c0       	rjmp	.+166    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
    14fe:	aa e3       	ldi	r26, 0x3A	; 58
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_voidSetPinDirection+0x15e>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_voidSetPinDirection+0x15a>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	3e c0       	rjmp	.+124    	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_voidSetPinDirection+0x188>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_voidSetPinDirection+0x184>
    154a:	80 95       	com	r24
    154c:	84 23       	and	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	29 c0       	rjmp	.+82     	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTC : CLR_BIT(DDRC , u8PinIdCopy); break;
    1552:	a4 e3       	ldi	r26, 0x34	; 52
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_voidSetPinDirection+0x1b2>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_voidSetPinDirection+0x1ae>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <DIO_voidSetPinDirection+0x1e6>
			case DIO_u8_PORTD : CLR_BIT(DDRD , u8PinIdCopy); break;
    157c:	a1 e3       	ldi	r26, 0x31	; 49
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e1 e3       	ldi	r30, 0x31	; 49
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_voidSetPinDirection+0x1dc>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_voidSetPinDirection+0x1d8>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
		}

	}

}
    15a4:	27 96       	adiw	r28, 0x07	; 7
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <EXT1_IN_Enable>:
#include"DIO_Interface.h"
#include"DIO_Register.h"
#include "GIE_interface.h"
#include "EXT_IN_Interface.h"
#include "EXT_IN_Register.h"
void EXT1_IN_Enable(void){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    // Enable global interrupts
	Global_Interrupt_Enable();
    15be:	0e 94 2d 0b 	call	0x165a	; 0x165a <Global_Interrupt_Enable>

    /*** INT0 Falling Edge ***/
    MCUCR |= (1 << 1);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	82 60       	ori	r24, 0x02	; 2
    15ce:	8c 93       	st	X, r24
    MCUCR &= ~(1 << 0);
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8e 7f       	andi	r24, 0xFE	; 254
    15dc:	8c 93       	st	X, r24
    SET_BIT(MCUCR, 3);   // ISC01 = 1
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	88 60       	ori	r24, 0x08	; 8
    15ea:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, 2);   // ISC00 = 0
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
    GICR |=1<<6;
    15fa:	ab e5       	ldi	r26, 0x5B	; 91
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e5       	ldi	r30, 0x5B	; 91
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 64       	ori	r24, 0x40	; 64
    1606:	8c 93       	st	X, r24
    GICR |=1<<7;
    1608:	ab e5       	ldi	r26, 0x5B	; 91
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e5       	ldi	r30, 0x5B	; 91
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	8c 93       	st	X, r24
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	63 e0       	ldi	r22, 0x03	; 3
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <EXT2_IN_Enable>:
void EXT2_IN_Enable(void){}
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <Global_Interrupt_Disable>:
 */
#include "../Library/BIT_MATH.h"
#include "../Library/STD_TYPES.h"
#include "GIE_Register.h"
#include "GIE_Interface.h"
void Global_Interrupt_Disable(void){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1646:	af e5       	ldi	r26, 0x5F	; 95
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ef e5       	ldi	r30, 0x5F	; 95
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	8c 93       	st	X, r24
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <Global_Interrupt_Enable>:
void Global_Interrupt_Enable(void){
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1662:	af e5       	ldi	r26, 0x5F	; 95
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e5       	ldi	r30, 0x5F	; 95
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	8c 93       	st	X, r24
}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <KPD_setup>:
u8 KPD_au8SwitchVal[4][4] = KPD_Array;
u8 ROWS[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	pressed_key = NOT_Pressed;
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	80 93 9a 01 	sts	0x019A, r24
	for(u8 i = 0; i < 4 ; i++){
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	33 c0       	rjmp	.+102    	; 0x16f0 <KPD_setup+0x7a>
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	fc 01       	movw	r30, r24
    1692:	ee 56       	subi	r30, 0x6E	; 110
    1694:	fe 4f       	sbci	r31, 0xFE	; 254
    1696:	90 81       	ld	r25, Z
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	69 2f       	mov	r22, r25
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	fc 01       	movw	r30, r24
    16aa:	ee 56       	subi	r30, 0x6E	; 110
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	90 81       	ld	r25, Z
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	69 2f       	mov	r22, r25
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	ea 56       	subi	r30, 0x6A	; 106
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	90 81       	ld	r25, Z
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	69 2f       	mov	r22, r25
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	fc 01       	movw	r30, r24
    16da:	ea 56       	subi	r30, 0x6A	; 106
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	90 81       	ld	r25, Z
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	69 2f       	mov	r22, r25
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
	pressed_key = NOT_Pressed;
	for(u8 i = 0; i < 4 ; i++){
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	50 f2       	brcs	.-108    	; 0x168a <KPD_setup+0x14>
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <GET_Key_Number>:

u8 GET_Key_Number(void){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <GET_Key_Number+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <GET_Key_Number+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0;i <4 ; i++){
    170a:	1b 82       	std	Y+3, r1	; 0x03
    170c:	48 c0       	rjmp	.+144    	; 0x179e <GET_Key_Number+0xa0>
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	ea 56       	subi	r30, 0x6A	; 106
    1718:	fe 4f       	sbci	r31, 0xFE	; 254
    171a:	90 81       	ld	r25, Z
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	69 2f       	mov	r22, r25
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
		for(u8 j = 0 ; j < 4 ; j++){
    1726:	1a 82       	std	Y+2, r1	; 0x02
    1728:	28 c0       	rjmp	.+80     	; 0x177a <GET_Key_Number+0x7c>
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	fc 01       	movw	r30, r24
    1732:	ee 56       	subi	r30, 0x6E	; 110
    1734:	fe 4f       	sbci	r31, 0xFE	; 254
    1736:	90 81       	ld	r25, Z
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	69 2f       	mov	r22, r25
    173c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8GetPinValue>
    1740:	89 83       	std	Y+1, r24	; 0x01
			if(DIO_u8_LOW == state){
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	88 23       	and	r24, r24
    1746:	b1 f4       	brne	.+44     	; 0x1774 <GET_Key_Number+0x76>
				pressed_key = KPD_au8SwitchVal[j][i];
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	48 2f       	mov	r20, r24
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	ca 01       	movw	r24, r20
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	fc 01       	movw	r30, r24
    1764:	ee 57       	subi	r30, 0x7E	; 126
    1766:	fe 4f       	sbci	r31, 0xFE	; 254
    1768:	80 81       	ld	r24, Z
    176a:	80 93 9a 01 	sts	0x019A, r24
				return j;
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	8c 83       	std	Y+4, r24	; 0x04
    1772:	1b c0       	rjmp	.+54     	; 0x17aa <GET_Key_Number+0xac>
}

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	a8 f2       	brcs	.-86     	; 0x172a <GET_Key_Number+0x2c>
			if(DIO_u8_LOW == state){
				pressed_key = KPD_au8SwitchVal[j][i];
				return j;
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	fc 01       	movw	r30, r24
    1788:	ea 56       	subi	r30, 0x6A	; 106
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	90 81       	ld	r25, Z
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	69 2f       	mov	r22, r25
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <GET_Key_Number+0xa8>
    17a4:	b4 cf       	rjmp	.-152    	; 0x170e <GET_Key_Number+0x10>
				return j;
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
	return NOT_Pressed;
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	8c 83       	std	Y+4, r24	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <GET_Pressed_Key>:
//---------------------------------------------------------------
u8 GET_Pressed_Key(void){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	KPD_setup();
    17c4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <KPD_setup>
    GET_Key_Number();
    17c8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <GET_Key_Number>
	if(last_pressed_key == pressed_key){
    17cc:	90 91 9b 01 	lds	r25, 0x019B
    17d0:	80 91 9a 01 	lds	r24, 0x019A
    17d4:	98 17       	cp	r25, r24
    17d6:	19 f4       	brne	.+6      	; 0x17de <GET_Pressed_Key+0x24>
		return NOT_Pressed;
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	12 c0       	rjmp	.+36     	; 0x1802 <GET_Pressed_Key+0x48>
	}else{
		if(last_pressed_key == NOT_Pressed){
    17de:	80 91 9b 01 	lds	r24, 0x019B
    17e2:	8f 3f       	cpi	r24, 0xFF	; 255
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <GET_Pressed_Key+0x3c>
			last_pressed_key = pressed_key;
    17e6:	80 91 9a 01 	lds	r24, 0x019A
    17ea:	80 93 9b 01 	sts	0x019B, r24
			return pressed_key;
    17ee:	80 91 9a 01 	lds	r24, 0x019A
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <GET_Pressed_Key+0x48>
		}else {
			last_pressed_key = pressed_key;
    17f6:	80 91 9a 01 	lds	r24, 0x019A
    17fa:	80 93 9b 01 	sts	0x019B, r24
			return NOT_Pressed;
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
		}
	}

}
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <GET_Pressed_Time>:
u32 GET_Pressed_Time(void){
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	63 97       	sbiw	r28, 0x13	; 19
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
	KPD_setup();
    1820:	0e 94 3b 0b 	call	0x1676	; 0x1676 <KPD_setup>
	u8 col = GET_Key_Number();
    1824:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <GET_Key_Number>
    1828:	8b 8b       	std	Y+19, r24	; 0x13
	u32 press_time = 0;
    182a:	1f 86       	std	Y+15, r1	; 0x0f
    182c:	18 8a       	std	Y+16, r1	; 0x10
    182e:	19 8a       	std	Y+17, r1	; 0x11
    1830:	1a 8a       	std	Y+18, r1	; 0x12
    1832:	7e c0       	rjmp	.+252    	; 0x1930 <GET_Pressed_Time+0x124>
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	aa e7       	ldi	r26, 0x7A	; 122
    183a:	b4 e4       	ldi	r27, 0x44	; 68
    183c:	8b 87       	std	Y+11, r24	; 0x0b
    183e:	9c 87       	std	Y+12, r25	; 0x0c
    1840:	ad 87       	std	Y+13, r26	; 0x0d
    1842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f 83       	std	Y+7, r24	; 0x07
    185e:	98 87       	std	Y+8, r25	; 0x08
    1860:	a9 87       	std	Y+9, r26	; 0x09
    1862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <GET_Pressed_Time+0x7a>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <GET_Pressed_Time+0xf8>
	else if (__tmp > 65535)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <GET_Pressed_Time+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <GET_Pressed_Time+0xda>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <GET_Pressed_Time+0xc8>
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <GET_Pressed_Time+0xbc>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <GET_Pressed_Time+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <GET_Pressed_Time+0x104>
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		press_time+=1000;
    1918:	8f 85       	ldd	r24, Y+15	; 0x0f
    191a:	98 89       	ldd	r25, Y+16	; 0x10
    191c:	a9 89       	ldd	r26, Y+17	; 0x11
    191e:	ba 89       	ldd	r27, Y+18	; 0x12
    1920:	88 51       	subi	r24, 0x18	; 24
    1922:	9c 4f       	sbci	r25, 0xFC	; 252
    1924:	af 4f       	sbci	r26, 0xFF	; 255
    1926:	bf 4f       	sbci	r27, 0xFF	; 255
    1928:	8f 87       	std	Y+15, r24	; 0x0f
    192a:	98 8b       	std	Y+16, r25	; 0x10
    192c:	a9 8b       	std	Y+17, r26	; 0x11
    192e:	ba 8b       	std	Y+18, r27	; 0x12
}
u32 GET_Pressed_Time(void){
	KPD_setup();
	u8 col = GET_Key_Number();
	u32 press_time = 0;
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	ee 56       	subi	r30, 0x6E	; 110
    193a:	fe 4f       	sbci	r31, 0xFE	; 254
    193c:	90 81       	ld	r25, Z
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	69 2f       	mov	r22, r25
    1942:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8GetPinValue>
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <GET_Pressed_Time+0x140>
    194a:	74 cf       	rjmp	.-280    	; 0x1834 <GET_Pressed_Time+0x28>
		_delay_ms(1000);
		press_time+=1000;
	}
    return press_time;
    194c:	8f 85       	ldd	r24, Y+15	; 0x0f
    194e:	98 89       	ldd	r25, Y+16	; 0x10
    1950:	a9 89       	ldd	r26, Y+17	; 0x11
    1952:	ba 89       	ldd	r27, Y+18	; 0x12
}
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	63 96       	adiw	r28, 0x13	; 19
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <LCD_vidInit_8bits>:

#include "LCD_Config.h"
#include "LCD_Interfac.h"


void LCD_vidInit_8bits(void) {
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	c0 5b       	subi	r28, 0xB0	; 176
    1978:	d0 40       	sbci	r29, 0x00	; 0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(DIO_u8_PORTB, 0xFF);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	6f ef       	ldi	r22, 0xFF	; 255
    1988:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	// RS
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT);
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	// RW
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
    19aa:	fe 01       	movw	r30, r28
    19ac:	e3 55       	subi	r30, 0x53	; 83
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e2       	ldi	r26, 0x20	; 32
    19b6:	b2 e4       	ldi	r27, 0x42	; 66
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	8e 01       	movw	r16, r28
    19c2:	07 55       	subi	r16, 0x57	; 87
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	e3 55       	subi	r30, 0x53	; 83
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 55       	subi	r30, 0x57	; 87
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	44 f4       	brge	.+16     	; 0x1a1c <LCD_vidInit_8bits+0xb2>
		__ticks = 1;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e9 55       	subi	r30, 0x59	; 89
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	64 c0       	rjmp	.+200    	; 0x1ae4 <LCD_vidInit_8bits+0x17a>
	else if (__tmp > 65535)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 55       	subi	r30, 0x57	; 87
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <LCD_vidInit_8bits+0xd2>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <LCD_vidInit_8bits+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e3 55       	subi	r30, 0x53	; 83
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	09 55       	subi	r16, 0x59	; 89
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <LCD_vidInit_8bits+0x148>
    1a74:	fe 01       	movw	r30, r28
    1a76:	eb 55       	subi	r30, 0x5B	; 91
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	fe 01       	movw	r30, r28
    1a84:	eb 55       	subi	r30, 0x5B	; 91
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_vidInit_8bits+0x122>
    1a90:	fe 01       	movw	r30, r28
    1a92:	eb 55       	subi	r30, 0x5B	; 91
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	de 01       	movw	r26, r28
    1a9c:	a9 55       	subi	r26, 0x59	; 89
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e9 55       	subi	r30, 0x59	; 89
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 55       	subi	r30, 0x59	; 89
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	d1 f6       	brne	.-76     	; 0x1a74 <LCD_vidInit_8bits+0x10a>
    1ac0:	27 c0       	rjmp	.+78     	; 0x1b10 <LCD_vidInit_8bits+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	09 55       	subi	r16, 0x59	; 89
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e7 55       	subi	r30, 0x57	; 87
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	de 01       	movw	r26, r28
    1ae6:	ad 55       	subi	r26, 0x5D	; 93
    1ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	e9 55       	subi	r30, 0x59	; 89
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
    1af4:	8d 93       	st	X+, r24
    1af6:	9c 93       	st	X, r25
    1af8:	fe 01       	movw	r30, r28
    1afa:	ed 55       	subi	r30, 0x5D	; 93
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_vidInit_8bits+0x198>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ed 55       	subi	r30, 0x5D	; 93
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
	// EN
	// 2. Power-on delay (critical!)
	_delay_ms(40); // Extended delay for safet
	// 3. Triple initialization sequence
	LCD_vidSendCommand(0x30);
    1b10:	80 e3       	ldi	r24, 0x30	; 48
    1b12:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    1b16:	fe 01       	movw	r30, r28
    1b18:	e1 56       	subi	r30, 0x61	; 97
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 e2       	ldi	r26, 0x20	; 32
    1b22:	b1 e4       	ldi	r27, 0x41	; 65
    1b24:	80 83       	st	Z, r24
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	a2 83       	std	Z+2, r26	; 0x02
    1b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	05 56       	subi	r16, 0x65	; 101
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	e1 56       	subi	r30, 0x61	; 97
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	a2 83       	std	Z+2, r26	; 0x02
    1b58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e5 56       	subi	r30, 0x65	; 101
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	44 f4       	brge	.+16     	; 0x1b88 <LCD_vidInit_8bits+0x21e>
		__ticks = 1;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e7 56       	subi	r30, 0x67	; 103
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	64 c0       	rjmp	.+200    	; 0x1c50 <LCD_vidInit_8bits+0x2e6>
	else if (__tmp > 65535)
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e5 56       	subi	r30, 0x65	; 101
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	0c f0       	brlt	.+2      	; 0x1ba8 <LCD_vidInit_8bits+0x23e>
    1ba6:	43 c0       	rjmp	.+134    	; 0x1c2e <LCD_vidInit_8bits+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e1 56       	subi	r30, 0x61	; 97
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	07 56       	subi	r16, 0x67	; 103
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	1f c0       	rjmp	.+62     	; 0x1c1e <LCD_vidInit_8bits+0x2b4>
    1be0:	fe 01       	movw	r30, r28
    1be2:	e9 56       	subi	r30, 0x69	; 105
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e9 56       	subi	r30, 0x69	; 105
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_vidInit_8bits+0x28e>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e9 56       	subi	r30, 0x69	; 105
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	de 01       	movw	r26, r28
    1c08:	a7 56       	subi	r26, 0x67	; 103
    1c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e7 56       	subi	r30, 0x67	; 103
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	11 96       	adiw	r26, 0x01	; 1
    1c1a:	9c 93       	st	X, r25
    1c1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e7 56       	subi	r30, 0x67	; 103
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	d1 f6       	brne	.-76     	; 0x1be0 <LCD_vidInit_8bits+0x276>
    1c2c:	27 c0       	rjmp	.+78     	; 0x1c7c <LCD_vidInit_8bits+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	8e 01       	movw	r16, r28
    1c30:	07 56       	subi	r16, 0x67	; 103
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e5 56       	subi	r30, 0x65	; 101
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	80 83       	st	Z, r24
    1c50:	de 01       	movw	r26, r28
    1c52:	ab 56       	subi	r26, 0x6B	; 107
    1c54:	bf 4f       	sbci	r27, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	e7 56       	subi	r30, 0x67	; 103
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	8d 93       	st	X+, r24
    1c62:	9c 93       	st	X, r25
    1c64:	fe 01       	movw	r30, r28
    1c66:	eb 56       	subi	r30, 0x6B	; 107
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 81       	ld	r24, Z
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_vidInit_8bits+0x304>
    1c72:	fe 01       	movw	r30, r28
    1c74:	eb 56       	subi	r30, 0x6B	; 107
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
	_delay_ms(10);
	// Extended delay
	LCD_vidSendCommand(0x30);
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ef 56       	subi	r30, 0x6F	; 111
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e8       	ldi	r26, 0x80	; 128
    1c8e:	bf e3       	ldi	r27, 0x3F	; 63
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	03 57       	subi	r16, 0x73	; 115
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ef 56       	subi	r30, 0x6F	; 111
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 57       	subi	r30, 0x73	; 115
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	44 f4       	brge	.+16     	; 0x1cf4 <LCD_vidInit_8bits+0x38a>
		__ticks = 1;
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 57       	subi	r30, 0x75	; 117
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	64 c0       	rjmp	.+200    	; 0x1dbc <LCD_vidInit_8bits+0x452>
	else if (__tmp > 65535)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e3 57       	subi	r30, 0x73	; 115
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	0c f0       	brlt	.+2      	; 0x1d14 <LCD_vidInit_8bits+0x3aa>
    1d12:	43 c0       	rjmp	.+134    	; 0x1d9a <LCD_vidInit_8bits+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	fe 01       	movw	r30, r28
    1d16:	ef 56       	subi	r30, 0x6F	; 111
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8e 01       	movw	r16, r28
    1d34:	05 57       	subi	r16, 0x75	; 117
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	f8 01       	movw	r30, r16
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	1f c0       	rjmp	.+62     	; 0x1d8a <LCD_vidInit_8bits+0x420>
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e7 57       	subi	r30, 0x77	; 119
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 57       	subi	r30, 0x77	; 119
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_vidInit_8bits+0x3fa>
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e7 57       	subi	r30, 0x77	; 119
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	de 01       	movw	r26, r28
    1d74:	a5 57       	subi	r26, 0x75	; 117
    1d76:	bf 4f       	sbci	r27, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e5 57       	subi	r30, 0x75	; 117
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	11 96       	adiw	r26, 0x01	; 1
    1d86:	9c 93       	st	X, r25
    1d88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e5 57       	subi	r30, 0x75	; 117
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	d1 f6       	brne	.-76     	; 0x1d4c <LCD_vidInit_8bits+0x3e2>
    1d98:	27 c0       	rjmp	.+78     	; 0x1de8 <LCD_vidInit_8bits+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	05 57       	subi	r16, 0x75	; 117
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	fe 01       	movw	r30, r28
    1da2:	e3 57       	subi	r30, 0x73	; 115
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	f8 01       	movw	r30, r16
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
    1dbc:	de 01       	movw	r26, r28
    1dbe:	a9 57       	subi	r26, 0x79	; 121
    1dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e5 57       	subi	r30, 0x75	; 117
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	8d 93       	st	X+, r24
    1dce:	9c 93       	st	X, r25
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e9 57       	subi	r30, 0x79	; 121
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_vidInit_8bits+0x470>
    1dde:	fe 01       	movw	r30, r28
    1de0:	e9 57       	subi	r30, 0x79	; 121
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_vidSendCommand(0x30);
    1de8:	80 e3       	ldi	r24, 0x30	; 48
    1dea:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 57       	subi	r30, 0x7D	; 125
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a6 e1       	ldi	r26, 0x16	; 22
    1dfa:	b3 e4       	ldi	r27, 0x43	; 67
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e04:	8e 01       	movw	r16, r28
    1e06:	01 58       	subi	r16, 0x81	; 129
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ed 57       	subi	r30, 0x7D	; 125
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	2b ea       	ldi	r18, 0xAB	; 171
    1e1a:	3a ea       	ldi	r19, 0xAA	; 170
    1e1c:	4a e2       	ldi	r20, 0x2A	; 42
    1e1e:	50 e4       	ldi	r21, 0x40	; 64
    1e20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e32:	fe 01       	movw	r30, r28
    1e34:	e1 58       	subi	r30, 0x81	; 129
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	34 f4       	brge	.+12     	; 0x1e5c <LCD_vidInit_8bits+0x4f2>
		__ticks = 1;
    1e50:	fe 01       	movw	r30, r28
    1e52:	e2 58       	subi	r30, 0x82	; 130
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	80 83       	st	Z, r24
    1e5a:	e0 c0       	rjmp	.+448    	; 0x201c <LCD_vidInit_8bits+0x6b2>
	else if (__tmp > 255)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e1 58       	subi	r30, 0x81	; 129
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	0c f0       	brlt	.+2      	; 0x1e7c <LCD_vidInit_8bits+0x512>
    1e7a:	c0 c0       	rjmp	.+384    	; 0x1ffc <LCD_vidInit_8bits+0x692>
	{
		_delay_ms(__us / 1000.0);
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 57       	subi	r30, 0x7D	; 125
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a e7       	ldi	r20, 0x7A	; 122
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e6 58       	subi	r30, 0x86	; 134
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	0a 58       	subi	r16, 0x8A	; 138
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e6 58       	subi	r30, 0x86	; 134
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 83       	st	Z, r24
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	a2 83       	std	Z+2, r26	; 0x02
    1ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ea 58       	subi	r30, 0x8A	; 138
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	44 f4       	brge	.+16     	; 0x1f04 <LCD_vidInit_8bits+0x59a>
		__ticks = 1;
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ec 58       	subi	r30, 0x8C	; 140
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	64 c0       	rjmp	.+200    	; 0x1fcc <LCD_vidInit_8bits+0x662>
	else if (__tmp > 65535)
    1f04:	fe 01       	movw	r30, r28
    1f06:	ea 58       	subi	r30, 0x8A	; 138
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <LCD_vidInit_8bits+0x5ba>
    1f22:	43 c0       	rjmp	.+134    	; 0x1faa <LCD_vidInit_8bits+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	fe 01       	movw	r30, r28
    1f26:	e6 58       	subi	r30, 0x86	; 134
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8e 01       	movw	r16, r28
    1f44:	0c 58       	subi	r16, 0x8C	; 140
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	1f c0       	rjmp	.+62     	; 0x1f9a <LCD_vidInit_8bits+0x630>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ee 58       	subi	r30, 0x8E	; 142
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	88 ec       	ldi	r24, 0xC8	; 200
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ee 58       	subi	r30, 0x8E	; 142
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_vidInit_8bits+0x60a>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ee 58       	subi	r30, 0x8E	; 142
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	de 01       	movw	r26, r28
    1f84:	ac 58       	subi	r26, 0x8C	; 140
    1f86:	bf 4f       	sbci	r27, 0xFF	; 255
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ec 58       	subi	r30, 0x8C	; 140
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ec 58       	subi	r30, 0x8C	; 140
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	d1 f6       	brne	.-76     	; 0x1f5c <LCD_vidInit_8bits+0x5f2>
    1fa8:	4b c0       	rjmp	.+150    	; 0x2040 <LCD_vidInit_8bits+0x6d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	8e 01       	movw	r16, r28
    1fac:	0c 58       	subi	r16, 0x8C	; 140
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ea 58       	subi	r30, 0x8A	; 138
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	de 01       	movw	r26, r28
    1fce:	a0 59       	subi	r26, 0x90	; 144
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ec 58       	subi	r30, 0x8C	; 140
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	11 96       	adiw	r26, 0x01	; 1
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e0 59       	subi	r30, 0x90	; 144
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_vidInit_8bits+0x682>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e0 59       	subi	r30, 0x90	; 144
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
    1ffa:	22 c0       	rjmp	.+68     	; 0x2040 <LCD_vidInit_8bits+0x6d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	02 58       	subi	r16, 0x82	; 130
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e1 58       	subi	r30, 0x81	; 129
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	80 83       	st	Z, r24
    201c:	de 01       	movw	r26, r28
    201e:	a1 59       	subi	r26, 0x91	; 145
    2020:	bf 4f       	sbci	r27, 0xFF	; 255
    2022:	fe 01       	movw	r30, r28
    2024:	e2 58       	subi	r30, 0x82	; 130
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    202c:	fe 01       	movw	r30, r28
    202e:	e1 59       	subi	r30, 0x91	; 145
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	8a 95       	dec	r24
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_vidInit_8bits+0x6ca>
    2038:	fe 01       	movw	r30, r28
    203a:	e1 59       	subi	r30, 0x91	; 145
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 83       	st	Z, r24
	_delay_us(150);
	// 4. Final configuration
	LCD_vidSendCommand(0x38);
    2040:	88 e3       	ldi	r24, 0x38	; 56
    2042:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    2046:	fe 01       	movw	r30, r28
    2048:	e5 59       	subi	r30, 0x95	; 149
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a8 e4       	ldi	r26, 0x48	; 72
    2052:	b2 e4       	ldi	r27, 0x42	; 66
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    205c:	8e 01       	movw	r16, r28
    205e:	09 59       	subi	r16, 0x99	; 153
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e5 59       	subi	r30, 0x95	; 149
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	2b ea       	ldi	r18, 0xAB	; 171
    2072:	3a ea       	ldi	r19, 0xAA	; 170
    2074:	4a e2       	ldi	r20, 0x2A	; 42
    2076:	50 e4       	ldi	r21, 0x40	; 64
    2078:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	80 83       	st	Z, r24
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208a:	fe 01       	movw	r30, r28
    208c:	e9 59       	subi	r30, 0x99	; 153
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <LCD_vidInit_8bits+0x74a>
		__ticks = 1;
    20a8:	fe 01       	movw	r30, r28
    20aa:	ea 59       	subi	r30, 0x9A	; 154
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	80 83       	st	Z, r24
    20b2:	e0 c0       	rjmp	.+448    	; 0x2274 <LCD_vidInit_8bits+0x90a>
	else if (__tmp > 255)
    20b4:	fe 01       	movw	r30, r28
    20b6:	e9 59       	subi	r30, 0x99	; 153
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	53 e4       	ldi	r21, 0x43	; 67
    20ca:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	0c f0       	brlt	.+2      	; 0x20d4 <LCD_vidInit_8bits+0x76a>
    20d2:	c0 c0       	rjmp	.+384    	; 0x2254 <LCD_vidInit_8bits+0x8ea>
	{
		_delay_ms(__us / 1000.0);
    20d4:	fe 01       	movw	r30, r28
    20d6:	e5 59       	subi	r30, 0x95	; 149
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	fe 01       	movw	r30, r28
    20f4:	ee 59       	subi	r30, 0x9E	; 158
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 83       	st	Z, r24
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	a2 83       	std	Z+2, r26	; 0x02
    20fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	8e 01       	movw	r16, r28
    2102:	02 5a       	subi	r16, 0xA2	; 162
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	fe 01       	movw	r30, r28
    2108:	ee 59       	subi	r30, 0x9E	; 158
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	80 83       	st	Z, r24
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	a2 83       	std	Z+2, r26	; 0x02
    212c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    212e:	fe 01       	movw	r30, r28
    2130:	e2 5a       	subi	r30, 0xA2	; 162
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	44 f4       	brge	.+16     	; 0x215c <LCD_vidInit_8bits+0x7f2>
		__ticks = 1;
    214c:	fe 01       	movw	r30, r28
    214e:	e4 5a       	subi	r30, 0xA4	; 164
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	64 c0       	rjmp	.+200    	; 0x2224 <LCD_vidInit_8bits+0x8ba>
	else if (__tmp > 65535)
    215c:	fe 01       	movw	r30, r28
    215e:	e2 5a       	subi	r30, 0xA2	; 162
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	0c f0       	brlt	.+2      	; 0x217c <LCD_vidInit_8bits+0x812>
    217a:	43 c0       	rjmp	.+134    	; 0x2202 <LCD_vidInit_8bits+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	fe 01       	movw	r30, r28
    217e:	ee 59       	subi	r30, 0x9E	; 158
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8e 01       	movw	r16, r28
    219c:	04 5a       	subi	r16, 0xA4	; 164
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	1f c0       	rjmp	.+62     	; 0x21f2 <LCD_vidInit_8bits+0x888>
    21b4:	fe 01       	movw	r30, r28
    21b6:	e6 5a       	subi	r30, 0xA6	; 166
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	88 ec       	ldi	r24, 0xC8	; 200
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c2:	fe 01       	movw	r30, r28
    21c4:	e6 5a       	subi	r30, 0xA6	; 166
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_vidInit_8bits+0x862>
    21d0:	fe 01       	movw	r30, r28
    21d2:	e6 5a       	subi	r30, 0xA6	; 166
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	de 01       	movw	r26, r28
    21dc:	a4 5a       	subi	r26, 0xA4	; 164
    21de:	bf 4f       	sbci	r27, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	e4 5a       	subi	r30, 0xA4	; 164
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	11 96       	adiw	r26, 0x01	; 1
    21ee:	9c 93       	st	X, r25
    21f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	fe 01       	movw	r30, r28
    21f4:	e4 5a       	subi	r30, 0xA4	; 164
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	d1 f6       	brne	.-76     	; 0x21b4 <LCD_vidInit_8bits+0x84a>
    2200:	4b c0       	rjmp	.+150    	; 0x2298 <LCD_vidInit_8bits+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	8e 01       	movw	r16, r28
    2204:	04 5a       	subi	r16, 0xA4	; 164
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	e2 5a       	subi	r30, 0xA2	; 162
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
    2224:	de 01       	movw	r26, r28
    2226:	a8 5a       	subi	r26, 0xA8	; 168
    2228:	bf 4f       	sbci	r27, 0xFF	; 255
    222a:	fe 01       	movw	r30, r28
    222c:	e4 5a       	subi	r30, 0xA4	; 164
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	9c 93       	st	X, r25
    2238:	8e 93       	st	-X, r24
    223a:	fe 01       	movw	r30, r28
    223c:	e8 5a       	subi	r30, 0xA8	; 168
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_vidInit_8bits+0x8da>
    2248:	fe 01       	movw	r30, r28
    224a:	e8 5a       	subi	r30, 0xA8	; 168
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
    2252:	22 c0       	rjmp	.+68     	; 0x2298 <LCD_vidInit_8bits+0x92e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2254:	8e 01       	movw	r16, r28
    2256:	0a 59       	subi	r16, 0x9A	; 154
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	e9 59       	subi	r30, 0x99	; 153
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	80 83       	st	Z, r24
    2274:	de 01       	movw	r26, r28
    2276:	a9 5a       	subi	r26, 0xA9	; 169
    2278:	bf 4f       	sbci	r27, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	ea 59       	subi	r30, 0x9A	; 154
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2284:	fe 01       	movw	r30, r28
    2286:	e9 5a       	subi	r30, 0xA9	; 169
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	8a 95       	dec	r24
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_vidInit_8bits+0x922>
    2290:	fe 01       	movw	r30, r28
    2292:	e9 5a       	subi	r30, 0xA9	; 169
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 83       	st	Z, r24
	// 8-bit, 2-line, 5x8 font
	_delay_us(50);
	LCD_vidSendCommand(0x08);
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    229e:	fe 01       	movw	r30, r28
    22a0:	ed 5a       	subi	r30, 0xAD	; 173
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a8 e4       	ldi	r26, 0x48	; 72
    22aa:	b2 e4       	ldi	r27, 0x42	; 66
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22b4:	8e 01       	movw	r16, r28
    22b6:	01 5b       	subi	r16, 0xB1	; 177
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	ed 5a       	subi	r30, 0xAD	; 173
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	2b ea       	ldi	r18, 0xAB	; 171
    22ca:	3a ea       	ldi	r19, 0xAA	; 170
    22cc:	4a e2       	ldi	r20, 0x2A	; 42
    22ce:	50 e4       	ldi	r21, 0x40	; 64
    22d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	f8 01       	movw	r30, r16
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e1 5b       	subi	r30, 0xB1	; 177
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	34 f4       	brge	.+12     	; 0x230c <LCD_vidInit_8bits+0x9a2>
		__ticks = 1;
    2300:	fe 01       	movw	r30, r28
    2302:	e2 5b       	subi	r30, 0xB2	; 178
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 83       	st	Z, r24
    230a:	e0 c0       	rjmp	.+448    	; 0x24cc <LCD_vidInit_8bits+0xb62>
	else if (__tmp > 255)
    230c:	fe 01       	movw	r30, r28
    230e:	e1 5b       	subi	r30, 0xB1	; 177
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	53 e4       	ldi	r21, 0x43	; 67
    2322:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	0c f0       	brlt	.+2      	; 0x232c <LCD_vidInit_8bits+0x9c2>
    232a:	c0 c0       	rjmp	.+384    	; 0x24ac <LCD_vidInit_8bits+0xb42>
	{
		_delay_ms(__us / 1000.0);
    232c:	fe 01       	movw	r30, r28
    232e:	ed 5a       	subi	r30, 0xAD	; 173
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a e7       	ldi	r20, 0x7A	; 122
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	fe 01       	movw	r30, r28
    234c:	e6 5b       	subi	r30, 0xB6	; 182
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 83       	st	Z, r24
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	a2 83       	std	Z+2, r26	; 0x02
    2356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	8e 01       	movw	r16, r28
    235a:	0a 5b       	subi	r16, 0xBA	; 186
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	fe 01       	movw	r30, r28
    2360:	e6 5b       	subi	r30, 0xB6	; 182
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a ef       	ldi	r20, 0xFA	; 250
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	80 83       	st	Z, r24
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	a2 83       	std	Z+2, r26	; 0x02
    2384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2386:	fe 01       	movw	r30, r28
    2388:	ea 5b       	subi	r30, 0xBA	; 186
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	44 f4       	brge	.+16     	; 0x23b4 <LCD_vidInit_8bits+0xa4a>
		__ticks = 1;
    23a4:	fe 01       	movw	r30, r28
    23a6:	ec 5b       	subi	r30, 0xBC	; 188
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	64 c0       	rjmp	.+200    	; 0x247c <LCD_vidInit_8bits+0xb12>
	else if (__tmp > 65535)
    23b4:	fe 01       	movw	r30, r28
    23b6:	ea 5b       	subi	r30, 0xBA	; 186
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	0c f0       	brlt	.+2      	; 0x23d4 <LCD_vidInit_8bits+0xa6a>
    23d2:	43 c0       	rjmp	.+134    	; 0x245a <LCD_vidInit_8bits+0xaf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	fe 01       	movw	r30, r28
    23d6:	e6 5b       	subi	r30, 0xB6	; 182
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8e 01       	movw	r16, r28
    23f4:	0c 5b       	subi	r16, 0xBC	; 188
    23f6:	1f 4f       	sbci	r17, 0xFF	; 255
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	f8 01       	movw	r30, r16
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	1f c0       	rjmp	.+62     	; 0x244a <LCD_vidInit_8bits+0xae0>
    240c:	fe 01       	movw	r30, r28
    240e:	ee 5b       	subi	r30, 0xBE	; 190
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    241a:	fe 01       	movw	r30, r28
    241c:	ee 5b       	subi	r30, 0xBE	; 190
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_vidInit_8bits+0xaba>
    2428:	fe 01       	movw	r30, r28
    242a:	ee 5b       	subi	r30, 0xBE	; 190
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	de 01       	movw	r26, r28
    2434:	ac 5b       	subi	r26, 0xBC	; 188
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	fe 01       	movw	r30, r28
    243a:	ec 5b       	subi	r30, 0xBC	; 188
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	11 96       	adiw	r26, 0x01	; 1
    2446:	9c 93       	st	X, r25
    2448:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	fe 01       	movw	r30, r28
    244c:	ec 5b       	subi	r30, 0xBC	; 188
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	d1 f6       	brne	.-76     	; 0x240c <LCD_vidInit_8bits+0xaa2>
    2458:	42 c0       	rjmp	.+132    	; 0x24de <LCD_vidInit_8bits+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	8e 01       	movw	r16, r28
    245c:	0c 5b       	subi	r16, 0xBC	; 188
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	fe 01       	movw	r30, r28
    2462:	ea 5b       	subi	r30, 0xBA	; 186
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	f8 01       	movw	r30, r16
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	de 01       	movw	r26, r28
    247e:	a0 5c       	subi	r26, 0xC0	; 192
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	ec 5b       	subi	r30, 0xBC	; 188
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	9c 93       	st	X, r25
    2490:	8e 93       	st	-X, r24
    2492:	fe 01       	movw	r30, r28
    2494:	e0 5c       	subi	r30, 0xC0	; 192
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	91 81       	ldd	r25, Z+1	; 0x01
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_vidInit_8bits+0xb32>
    24a0:	fe 01       	movw	r30, r28
    24a2:	e0 5c       	subi	r30, 0xC0	; 192
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	19 c0       	rjmp	.+50     	; 0x24de <LCD_vidInit_8bits+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ac:	8e 01       	movw	r16, r28
    24ae:	02 5b       	subi	r16, 0xB2	; 178
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 5b       	subi	r30, 0xB1	; 177
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	f8 01       	movw	r30, r16
    24ca:	80 83       	st	Z, r24
    24cc:	fe 01       	movw	r30, r28
    24ce:	e2 5b       	subi	r30, 0xB2	; 178
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    24d8:	8a 95       	dec	r24
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_vidInit_8bits+0xb6e>
    24dc:	8f af       	std	Y+63, r24	; 0x3f
	// Display off
	_delay_us(50);
	LCD_vidSendCommand(0x01);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e4       	ldi	r26, 0x40	; 64
    24ea:	b0 e4       	ldi	r27, 0x40	; 64
    24ec:	8b af       	std	Y+59, r24	; 0x3b
    24ee:	9c af       	std	Y+60, r25	; 0x3c
    24f0:	ad af       	std	Y+61, r26	; 0x3d
    24f2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6b ad       	ldd	r22, Y+59	; 0x3b
    24f6:	7c ad       	ldd	r23, Y+60	; 0x3c
    24f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f ab       	std	Y+55, r24	; 0x37
    250e:	98 af       	std	Y+56, r25	; 0x38
    2510:	a9 af       	std	Y+57, r26	; 0x39
    2512:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2514:	6f a9       	ldd	r22, Y+55	; 0x37
    2516:	78 ad       	ldd	r23, Y+56	; 0x38
    2518:	89 ad       	ldd	r24, Y+57	; 0x39
    251a:	9a ad       	ldd	r25, Y+58	; 0x3a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_vidInit_8bits+0xbcc>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e ab       	std	Y+54, r25	; 0x36
    2532:	8d ab       	std	Y+53, r24	; 0x35
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_vidInit_8bits+0xc4a>
	else if (__tmp > 65535)
    2536:	6f a9       	ldd	r22, Y+55	; 0x37
    2538:	78 ad       	ldd	r23, Y+56	; 0x38
    253a:	89 ad       	ldd	r24, Y+57	; 0x39
    253c:	9a ad       	ldd	r25, Y+58	; 0x3a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_vidInit_8bits+0xc36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2550:	7c ad       	ldd	r23, Y+60	; 0x3c
    2552:	8d ad       	ldd	r24, Y+61	; 0x3d
    2554:	9e ad       	ldd	r25, Y+62	; 0x3e
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e ab       	std	Y+54, r25	; 0x36
    2574:	8d ab       	std	Y+53, r24	; 0x35
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_vidInit_8bits+0xc2c>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c ab       	std	Y+52, r25	; 0x34
    257e:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_vidInit_8bits+0xc1a>
    2588:	9c ab       	std	Y+52, r25	; 0x34
    258a:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8d a9       	ldd	r24, Y+53	; 0x35
    258e:	9e a9       	ldd	r25, Y+54	; 0x36
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9e ab       	std	Y+54, r25	; 0x36
    2594:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8d a9       	ldd	r24, Y+53	; 0x35
    2598:	9e a9       	ldd	r25, Y+54	; 0x36
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_vidInit_8bits+0xc0e>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_vidInit_8bits+0xc5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6f a9       	ldd	r22, Y+55	; 0x37
    25a2:	78 ad       	ldd	r23, Y+56	; 0x38
    25a4:	89 ad       	ldd	r24, Y+57	; 0x39
    25a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    25a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e ab       	std	Y+54, r25	; 0x36
    25b2:	8d ab       	std	Y+53, r24	; 0x35
    25b4:	8d a9       	ldd	r24, Y+53	; 0x35
    25b6:	9e a9       	ldd	r25, Y+54	; 0x36
    25b8:	9a ab       	std	Y+50, r25	; 0x32
    25ba:	89 ab       	std	Y+49, r24	; 0x31
    25bc:	89 a9       	ldd	r24, Y+49	; 0x31
    25be:	9a a9       	ldd	r25, Y+50	; 0x32
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_vidInit_8bits+0xc56>
    25c4:	9a ab       	std	Y+50, r25	; 0x32
    25c6:	89 ab       	std	Y+49, r24	; 0x31
	// Clear display
	_delay_ms(3); // Longer clear delay
	LCD_vidSendCommand(0x06); // Entry mode set
    25c8:	86 e0       	ldi	r24, 0x06	; 6
    25ca:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a8 e4       	ldi	r26, 0x48	; 72
    25d4:	b2 e4       	ldi	r27, 0x42	; 66
    25d6:	8d a7       	std	Y+45, r24	; 0x2d
    25d8:	9e a7       	std	Y+46, r25	; 0x2e
    25da:	af a7       	std	Y+47, r26	; 0x2f
    25dc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25de:	6d a5       	ldd	r22, Y+45	; 0x2d
    25e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e4:	98 a9       	ldd	r25, Y+48	; 0x30
    25e6:	2b ea       	ldi	r18, 0xAB	; 171
    25e8:	3a ea       	ldi	r19, 0xAA	; 170
    25ea:	4a e2       	ldi	r20, 0x2A	; 42
    25ec:	50 e4       	ldi	r21, 0x40	; 64
    25ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	89 a7       	std	Y+41, r24	; 0x29
    25f8:	9a a7       	std	Y+42, r25	; 0x2a
    25fa:	ab a7       	std	Y+43, r26	; 0x2b
    25fc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25fe:	69 a5       	ldd	r22, Y+41	; 0x29
    2600:	7a a5       	ldd	r23, Y+42	; 0x2a
    2602:	8b a5       	ldd	r24, Y+43	; 0x2b
    2604:	9c a5       	ldd	r25, Y+44	; 0x2c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	1c f4       	brge	.+6      	; 0x261c <LCD_vidInit_8bits+0xcb2>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	88 a7       	std	Y+40, r24	; 0x28
    261a:	91 c0       	rjmp	.+290    	; 0x273e <LCD_vidInit_8bits+0xdd4>
	else if (__tmp > 255)
    261c:	69 a5       	ldd	r22, Y+41	; 0x29
    261e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2620:	8b a5       	ldd	r24, Y+43	; 0x2b
    2622:	9c a5       	ldd	r25, Y+44	; 0x2c
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4f e7       	ldi	r20, 0x7F	; 127
    262a:	53 e4       	ldi	r21, 0x43	; 67
    262c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2630:	18 16       	cp	r1, r24
    2632:	0c f0       	brlt	.+2      	; 0x2636 <LCD_vidInit_8bits+0xccc>
    2634:	7b c0       	rjmp	.+246    	; 0x272c <LCD_vidInit_8bits+0xdc2>
	{
		_delay_ms(__us / 1000.0);
    2636:	6d a5       	ldd	r22, Y+45	; 0x2d
    2638:	7e a5       	ldd	r23, Y+46	; 0x2e
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a e7       	ldi	r20, 0x7A	; 122
    2644:	54 e4       	ldi	r21, 0x44	; 68
    2646:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	8c a3       	std	Y+36, r24	; 0x24
    2650:	9d a3       	std	Y+37, r25	; 0x25
    2652:	ae a3       	std	Y+38, r26	; 0x26
    2654:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6c a1       	ldd	r22, Y+36	; 0x24
    2658:	7d a1       	ldd	r23, Y+37	; 0x25
    265a:	8e a1       	ldd	r24, Y+38	; 0x26
    265c:	9f a1       	ldd	r25, Y+39	; 0x27
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	88 a3       	std	Y+32, r24	; 0x20
    2670:	99 a3       	std	Y+33, r25	; 0x21
    2672:	aa a3       	std	Y+34, r26	; 0x22
    2674:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2676:	68 a1       	ldd	r22, Y+32	; 0x20
    2678:	79 a1       	ldd	r23, Y+33	; 0x21
    267a:	8a a1       	ldd	r24, Y+34	; 0x22
    267c:	9b a1       	ldd	r25, Y+35	; 0x23
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_vidInit_8bits+0xd2e>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9f 8f       	std	Y+31, r25	; 0x1f
    2694:	8e 8f       	std	Y+30, r24	; 0x1e
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_vidInit_8bits+0xdac>
	else if (__tmp > 65535)
    2698:	68 a1       	ldd	r22, Y+32	; 0x20
    269a:	79 a1       	ldd	r23, Y+33	; 0x21
    269c:	8a a1       	ldd	r24, Y+34	; 0x22
    269e:	9b a1       	ldd	r25, Y+35	; 0x23
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_vidInit_8bits+0xd98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6c a1       	ldd	r22, Y+36	; 0x24
    26b2:	7d a1       	ldd	r23, Y+37	; 0x25
    26b4:	8e a1       	ldd	r24, Y+38	; 0x26
    26b6:	9f a1       	ldd	r25, Y+39	; 0x27
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9f 8f       	std	Y+31, r25	; 0x1f
    26d6:	8e 8f       	std	Y+30, r24	; 0x1e
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_vidInit_8bits+0xd8e>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9d 8f       	std	Y+29, r25	; 0x1d
    26e0:	8c 8f       	std	Y+28, r24	; 0x1c
    26e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_vidInit_8bits+0xd7c>
    26ea:	9d 8f       	std	Y+29, r25	; 0x1d
    26ec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9f 8f       	std	Y+31, r25	; 0x1f
    26f6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_vidInit_8bits+0xd70>
    2700:	24 c0       	rjmp	.+72     	; 0x274a <LCD_vidInit_8bits+0xde0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	68 a1       	ldd	r22, Y+32	; 0x20
    2704:	79 a1       	ldd	r23, Y+33	; 0x21
    2706:	8a a1       	ldd	r24, Y+34	; 0x22
    2708:	9b a1       	ldd	r25, Y+35	; 0x23
    270a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9f 8f       	std	Y+31, r25	; 0x1f
    2714:	8e 8f       	std	Y+30, r24	; 0x1e
    2716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271a:	9b 8f       	std	Y+27, r25	; 0x1b
    271c:	8a 8f       	std	Y+26, r24	; 0x1a
    271e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2720:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_vidInit_8bits+0xdb8>
    2726:	9b 8f       	std	Y+27, r25	; 0x1b
    2728:	8a 8f       	std	Y+26, r24	; 0x1a
    272a:	0f c0       	rjmp	.+30     	; 0x274a <LCD_vidInit_8bits+0xde0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    272c:	69 a5       	ldd	r22, Y+41	; 0x29
    272e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2730:	8b a5       	ldd	r24, Y+43	; 0x2b
    2732:	9c a5       	ldd	r25, Y+44	; 0x2c
    2734:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	88 a7       	std	Y+40, r24	; 0x28
    273e:	88 a5       	ldd	r24, Y+40	; 0x28
    2740:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2742:	89 8d       	ldd	r24, Y+25	; 0x19
    2744:	8a 95       	dec	r24
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_vidInit_8bits+0xdda>
    2748:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_vidSendCommand(0x0C); // Display on
    274a:	8c e0       	ldi	r24, 0x0C	; 12
    274c:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a8 e4       	ldi	r26, 0x48	; 72
    2756:	b2 e4       	ldi	r27, 0x42	; 66
    2758:	8d 8b       	std	Y+21, r24	; 0x15
    275a:	9e 8b       	std	Y+22, r25	; 0x16
    275c:	af 8b       	std	Y+23, r26	; 0x17
    275e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	2b ea       	ldi	r18, 0xAB	; 171
    276a:	3a ea       	ldi	r19, 0xAA	; 170
    276c:	4a e2       	ldi	r20, 0x2A	; 42
    276e:	50 e4       	ldi	r21, 0x40	; 64
    2770:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	ab 8b       	std	Y+19, r26	; 0x13
    277e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2780:	69 89       	ldd	r22, Y+17	; 0x11
    2782:	7a 89       	ldd	r23, Y+18	; 0x12
    2784:	8b 89       	ldd	r24, Y+19	; 0x13
    2786:	9c 89       	ldd	r25, Y+20	; 0x14
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	1c f4       	brge	.+6      	; 0x279e <LCD_vidInit_8bits+0xe34>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	88 8b       	std	Y+16, r24	; 0x10
    279c:	91 c0       	rjmp	.+290    	; 0x28c0 <LCD_vidInit_8bits+0xf56>
	else if (__tmp > 255)
    279e:	69 89       	ldd	r22, Y+17	; 0x11
    27a0:	7a 89       	ldd	r23, Y+18	; 0x12
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <LCD_vidInit_8bits+0xe4e>
    27b6:	7b c0       	rjmp	.+246    	; 0x28ae <LCD_vidInit_8bits+0xf44>
	{
		_delay_ms(__us / 1000.0);
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8c 87       	std	Y+12, r24	; 0x0c
    27d2:	9d 87       	std	Y+13, r25	; 0x0d
    27d4:	ae 87       	std	Y+14, r26	; 0x0e
    27d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27da:	7d 85       	ldd	r23, Y+13	; 0x0d
    27dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27de:	9f 85       	ldd	r25, Y+15	; 0x0f
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a ef       	ldi	r20, 0xFA	; 250
    27e6:	54 e4       	ldi	r21, 0x44	; 68
    27e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	88 87       	std	Y+8, r24	; 0x08
    27f2:	99 87       	std	Y+9, r25	; 0x09
    27f4:	aa 87       	std	Y+10, r26	; 0x0a
    27f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27f8:	68 85       	ldd	r22, Y+8	; 0x08
    27fa:	79 85       	ldd	r23, Y+9	; 0x09
    27fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_vidInit_8bits+0xeb0>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9f 83       	std	Y+7, r25	; 0x07
    2816:	8e 83       	std	Y+6, r24	; 0x06
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <LCD_vidInit_8bits+0xf2e>
	else if (__tmp > 65535)
    281a:	68 85       	ldd	r22, Y+8	; 0x08
    281c:	79 85       	ldd	r23, Y+9	; 0x09
    281e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2820:	9b 85       	ldd	r25, Y+11	; 0x0b
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <LCD_vidInit_8bits+0xf1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6c 85       	ldd	r22, Y+12	; 0x0c
    2834:	7d 85       	ldd	r23, Y+13	; 0x0d
    2836:	8e 85       	ldd	r24, Y+14	; 0x0e
    2838:	9f 85       	ldd	r25, Y+15	; 0x0f
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9f 83       	std	Y+7, r25	; 0x07
    2858:	8e 83       	std	Y+6, r24	; 0x06
    285a:	0f c0       	rjmp	.+30     	; 0x287a <LCD_vidInit_8bits+0xf10>
    285c:	88 ec       	ldi	r24, 0xC8	; 200
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9d 83       	std	Y+5, r25	; 0x05
    2862:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_vidInit_8bits+0xefe>
    286c:	9d 83       	std	Y+5, r25	; 0x05
    286e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	9f 81       	ldd	r25, Y+7	; 0x07
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	9f 83       	std	Y+7, r25	; 0x07
    2878:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	8e 81       	ldd	r24, Y+6	; 0x06
    287c:	9f 81       	ldd	r25, Y+7	; 0x07
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <LCD_vidInit_8bits+0xef2>
    2882:	24 c0       	rjmp	.+72     	; 0x28cc <LCD_vidInit_8bits+0xf62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	68 85       	ldd	r22, Y+8	; 0x08
    2886:	79 85       	ldd	r23, Y+9	; 0x09
    2888:	8a 85       	ldd	r24, Y+10	; 0x0a
    288a:	9b 85       	ldd	r25, Y+11	; 0x0b
    288c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9f 83       	std	Y+7, r25	; 0x07
    2896:	8e 83       	std	Y+6, r24	; 0x06
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	9f 81       	ldd	r25, Y+7	; 0x07
    289c:	9b 83       	std	Y+3, r25	; 0x03
    289e:	8a 83       	std	Y+2, r24	; 0x02
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_vidInit_8bits+0xf3a>
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	8a 83       	std	Y+2, r24	; 0x02
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_vidInit_8bits+0xf62>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28ae:	69 89       	ldd	r22, Y+17	; 0x11
    28b0:	7a 89       	ldd	r23, Y+18	; 0x12
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	88 8b       	std	Y+16, r24	; 0x10
    28c0:	88 89       	ldd	r24, Y+16	; 0x10
    28c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	8a 95       	dec	r24
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_vidInit_8bits+0xf5c>
    28ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50); }
    28cc:	c0 55       	subi	r28, 0x50	; 80
    28ce:	df 4f       	sbci	r29, 0xFF	; 255
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	08 95       	ret

000028e4 <LCD_vidSendCommand_>:


void LCD_vidSendCommand_(u8 u8Cmd) {
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCommand(u8Cmd >> 4);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	82 95       	swap	r24
    28f4:	8f 70       	andi	r24, 0x0F	; 15
    28f6:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
	LCD_vidSendCommand(u8Cmd & 0x0F);
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	8f 70       	andi	r24, 0x0F	; 15
    28fe:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>


}
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <LCD_vidGotoxy>:

void LCD_vidGotoxy(u8 X, u8 Y)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	00 d0       	rcall	.+0      	; 0x2910 <LCD_vidGotoxy+0x6>
    2910:	00 d0       	rcall	.+0      	; 0x2912 <LCD_vidGotoxy+0x8>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	6b 83       	std	Y+3, r22	; 0x03
	// Validate coordinates
	if (X < 16 && Y < 2)
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	80 31       	cpi	r24, 0x10	; 16
    291e:	a0 f4       	brcc	.+40     	; 0x2948 <LCD_vidGotoxy+0x3e>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	88 f4       	brcc	.+34     	; 0x2948 <LCD_vidGotoxy+0x3e>
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 0x80 + X : 0xC0 + X;
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	88 23       	and	r24, r24
    292a:	29 f4       	brne	.+10     	; 0x2936 <LCD_vidGotoxy+0x2c>
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	98 2f       	mov	r25, r24
    2930:	90 58       	subi	r25, 0x80	; 128
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	04 c0       	rjmp	.+8      	; 0x293e <LCD_vidGotoxy+0x34>
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	98 2f       	mov	r25, r24
    293a:	90 54       	subi	r25, 0x40	; 64
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidSendCommand(address);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_vidSendCommand>
	}
}
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <LCD_vidSendCommand>:




void LCD_vidSendCommand(u8 u8CmdCpy){
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	2f 97       	sbiw	r28, 0x0f	; 15
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	8f 87       	std	Y+15, r24	; 0x0f
	///8 Bits (D0->D7)////
	///RS -> 0 for command////
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_OUTPUT);
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_LOW);
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xff);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	6f ef       	ldi	r22, 0xFF	; 255
    298e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(LCD_DATA_PORT,u8CmdCpy);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	6f 85       	ldd	r22, Y+15	; 0x0f
    2996:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_voidSetPortValue>

	//Enable
	DIO_voidSetPortDirection(LCD_CONTROL_PORT,0xff);
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPortDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	62 e0       	ldi	r22, 0x02	; 2
    29a6:	41 e0       	ldi	r20, 0x01	; 1
    29a8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e0       	ldi	r26, 0x00	; 0
    29b2:	b0 e4       	ldi	r27, 0x40	; 64
    29b4:	8b 87       	std	Y+11, r24	; 0x0b
    29b6:	9c 87       	std	Y+12, r25	; 0x0c
    29b8:	ad 87       	std	Y+13, r26	; 0x0d
    29ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8f 83       	std	Y+7, r24	; 0x07
    29d6:	98 87       	std	Y+8, r25	; 0x08
    29d8:	a9 87       	std	Y+9, r26	; 0x09
    29da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <LCD_vidSendCommand+0xa8>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <LCD_vidSendCommand+0x126>
	else if (__tmp > 65535)
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <LCD_vidSendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <LCD_vidSendCommand+0x108>
    2a40:	88 ec       	ldi	r24, 0xC8	; 200
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_vidSendCommand+0xf6>
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <LCD_vidSendCommand+0xea>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <LCD_vidSendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_vidSendCommand+0x132>
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	62 e0       	ldi	r22, 0x02	; 2
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>

}
    2a9a:	2f 96       	adiw	r28, 0x0f	; 15
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <LCD_vidSendCommand_4_Bits>:
void LCD_vidSendCommand_4_Bits(uint8_t u8CmdCpy) {
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	c1 56       	subi	r28, 0x61	; 97
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ef 59       	subi	r30, 0x9F	; 159
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 83       	st	Z, r24


	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8_LOW);
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8_LOW);
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>

	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy & 0xF0); /* sending upper nibble */
    2ae2:	a8 e3       	ldi	r26, 0x38	; 56
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e8 e3       	ldi	r30, 0x38	; 56
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	98 2f       	mov	r25, r24
    2aee:	9f 70       	andi	r25, 0x0F	; 15
    2af0:	fe 01       	movw	r30, r28
    2af2:	ef 59       	subi	r30, 0x9F	; 159
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	80 7f       	andi	r24, 0xF0	; 240
    2afa:	89 2b       	or	r24, r25
    2afc:	8c 93       	st	X, r24

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	41 e0       	ldi	r20, 0x01	; 1
    2b04:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e3 5a       	subi	r30, 0xA3	; 163
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e8       	ldi	r26, 0x80	; 128
    2b14:	bf e3       	ldi	r27, 0x3F	; 63
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b1e:	8e 01       	movw	r16, r28
    2b20:	07 5a       	subi	r16, 0xA7	; 167
    2b22:	1f 4f       	sbci	r17, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	e3 5a       	subi	r30, 0xA3	; 163
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	2b ea       	ldi	r18, 0xAB	; 171
    2b34:	3a ea       	ldi	r19, 0xAA	; 170
    2b36:	4a e2       	ldi	r20, 0x2A	; 42
    2b38:	50 e4       	ldi	r21, 0x40	; 64
    2b3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	f8 01       	movw	r30, r16
    2b44:	80 83       	st	Z, r24
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	a2 83       	std	Z+2, r26	; 0x02
    2b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e7 5a       	subi	r30, 0xA7	; 167
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	34 f4       	brge	.+12     	; 0x2b76 <LCD_vidSendCommand_4_Bits+0xca>
		__ticks = 1;
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e8 5a       	subi	r30, 0xA8	; 168
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	80 83       	st	Z, r24
    2b74:	e0 c0       	rjmp	.+448    	; 0x2d36 <LCD_vidSendCommand_4_Bits+0x28a>
	else if (__tmp > 255)
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 5a       	subi	r30, 0xA7	; 167
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	53 e4       	ldi	r21, 0x43	; 67
    2b8c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	0c f0       	brlt	.+2      	; 0x2b96 <LCD_vidSendCommand_4_Bits+0xea>
    2b94:	c0 c0       	rjmp	.+384    	; 0x2d16 <LCD_vidSendCommand_4_Bits+0x26a>
	{
		_delay_ms(__us / 1000.0);
    2b96:	fe 01       	movw	r30, r28
    2b98:	e3 5a       	subi	r30, 0xA3	; 163
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a e7       	ldi	r20, 0x7A	; 122
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ec 5a       	subi	r30, 0xAC	; 172
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	00 5b       	subi	r16, 0xB0	; 176
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ec 5a       	subi	r30, 0xAC	; 172
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a ef       	ldi	r20, 0xFA	; 250
    2bdc:	54 e4       	ldi	r21, 0x44	; 68
    2bde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 83       	st	Z, r24
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	a2 83       	std	Z+2, r26	; 0x02
    2bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e0 5b       	subi	r30, 0xB0	; 176
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	44 f4       	brge	.+16     	; 0x2c1e <LCD_vidSendCommand_4_Bits+0x172>
		__ticks = 1;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e2 5b       	subi	r30, 0xB2	; 178
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	64 c0       	rjmp	.+200    	; 0x2ce6 <LCD_vidSendCommand_4_Bits+0x23a>
	else if (__tmp > 65535)
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e0 5b       	subi	r30, 0xB0	; 176
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	0c f0       	brlt	.+2      	; 0x2c3e <LCD_vidSendCommand_4_Bits+0x192>
    2c3c:	43 c0       	rjmp	.+134    	; 0x2cc4 <LCD_vidSendCommand_4_Bits+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ec 5a       	subi	r30, 0xAC	; 172
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8e 01       	movw	r16, r28
    2c5e:	02 5b       	subi	r16, 0xB2	; 178
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	f8 01       	movw	r30, r16
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	1f c0       	rjmp	.+62     	; 0x2cb4 <LCD_vidSendCommand_4_Bits+0x208>
    2c76:	fe 01       	movw	r30, r28
    2c78:	e4 5b       	subi	r30, 0xB4	; 180
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	88 ec       	ldi	r24, 0xC8	; 200
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    2c84:	fe 01       	movw	r30, r28
    2c86:	e4 5b       	subi	r30, 0xB4	; 180
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_vidSendCommand_4_Bits+0x1e2>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e4 5b       	subi	r30, 0xB4	; 180
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	de 01       	movw	r26, r28
    2c9e:	a2 5b       	subi	r26, 0xB2	; 178
    2ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e2 5b       	subi	r30, 0xB2	; 178
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	11 96       	adiw	r26, 0x01	; 1
    2cb0:	9c 93       	st	X, r25
    2cb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e2 5b       	subi	r30, 0xB2	; 178
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	91 81       	ldd	r25, Z+1	; 0x01
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	d1 f6       	brne	.-76     	; 0x2c76 <LCD_vidSendCommand_4_Bits+0x1ca>
    2cc2:	4b c0       	rjmp	.+150    	; 0x2d5a <LCD_vidSendCommand_4_Bits+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	8e 01       	movw	r16, r28
    2cc6:	02 5b       	subi	r16, 0xB2	; 178
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e0 5b       	subi	r30, 0xB0	; 176
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	de 01       	movw	r26, r28
    2ce8:	a6 5b       	subi	r26, 0xB6	; 182
    2cea:	bf 4f       	sbci	r27, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	e2 5b       	subi	r30, 0xB2	; 178
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	11 96       	adiw	r26, 0x01	; 1
    2cf8:	9c 93       	st	X, r25
    2cfa:	8e 93       	st	-X, r24
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e6 5b       	subi	r30, 0xB6	; 182
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_vidSendCommand_4_Bits+0x25a>
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e6 5b       	subi	r30, 0xB6	; 182
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	80 83       	st	Z, r24
    2d14:	22 c0       	rjmp	.+68     	; 0x2d5a <LCD_vidSendCommand_4_Bits+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d16:	8e 01       	movw	r16, r28
    2d18:	08 5a       	subi	r16, 0xA8	; 168
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e7 5a       	subi	r30, 0xA7	; 167
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	f8 01       	movw	r30, r16
    2d34:	80 83       	st	Z, r24
    2d36:	de 01       	movw	r26, r28
    2d38:	a7 5b       	subi	r26, 0xB7	; 183
    2d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e8 5a       	subi	r30, 0xA8	; 168
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5b       	subi	r30, 0xB7	; 183
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8a 95       	dec	r24
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <LCD_vidSendCommand_4_Bits+0x2a2>
    2d52:	fe 01       	movw	r30, r28
    2d54:	e7 5b       	subi	r30, 0xB7	; 183
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	62 e0       	ldi	r22, 0x02	; 2
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    2d64:	fe 01       	movw	r30, r28
    2d66:	eb 5b       	subi	r30, 0xBB	; 187
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d70:	b2 e4       	ldi	r27, 0x42	; 66
    2d72:	80 83       	st	Z, r24
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	a2 83       	std	Z+2, r26	; 0x02
    2d78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d7a:	8e 01       	movw	r16, r28
    2d7c:	0f 5b       	subi	r16, 0xBF	; 191
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	fe 01       	movw	r30, r28
    2d82:	eb 5b       	subi	r30, 0xBB	; 187
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	2b ea       	ldi	r18, 0xAB	; 171
    2d90:	3a ea       	ldi	r19, 0xAA	; 170
    2d92:	4a e2       	ldi	r20, 0x2A	; 42
    2d94:	50 e4       	ldi	r21, 0x40	; 64
    2d96:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	f8 01       	movw	r30, r16
    2da0:	80 83       	st	Z, r24
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	a2 83       	std	Z+2, r26	; 0x02
    2da6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2da8:	fe 01       	movw	r30, r28
    2daa:	ef 5b       	subi	r30, 0xBF	; 191
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	34 f4       	brge	.+12     	; 0x2dd2 <LCD_vidSendCommand_4_Bits+0x326>
		__ticks = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e0 5c       	subi	r30, 0xC0	; 192
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 83       	st	Z, r24
    2dd0:	9d c0       	rjmp	.+314    	; 0x2f0c <LCD_vidSendCommand_4_Bits+0x460>
	else if (__tmp > 255)
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ef 5b       	subi	r30, 0xBF	; 191
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	53 e4       	ldi	r21, 0x43	; 67
    2de8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2dec:	18 16       	cp	r1, r24
    2dee:	0c f0       	brlt	.+2      	; 0x2df2 <LCD_vidSendCommand_4_Bits+0x346>
    2df0:	7e c0       	rjmp	.+252    	; 0x2eee <LCD_vidSendCommand_4_Bits+0x442>
	{
		_delay_ms(__us / 1000.0);
    2df2:	fe 01       	movw	r30, r28
    2df4:	eb 5b       	subi	r30, 0xBB	; 187
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a e7       	ldi	r20, 0x7A	; 122
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8c af       	std	Y+60, r24	; 0x3c
    2e12:	9d af       	std	Y+61, r25	; 0x3d
    2e14:	ae af       	std	Y+62, r26	; 0x3e
    2e16:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a ef       	ldi	r20, 0xFA	; 250
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	88 af       	std	Y+56, r24	; 0x38
    2e32:	99 af       	std	Y+57, r25	; 0x39
    2e34:	aa af       	std	Y+58, r26	; 0x3a
    2e36:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2e38:	68 ad       	ldd	r22, Y+56	; 0x38
    2e3a:	79 ad       	ldd	r23, Y+57	; 0x39
    2e3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <LCD_vidSendCommand_4_Bits+0x3ae>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9f ab       	std	Y+55, r25	; 0x37
    2e56:	8e ab       	std	Y+54, r24	; 0x36
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <LCD_vidSendCommand_4_Bits+0x42c>
	else if (__tmp > 65535)
    2e5a:	68 ad       	ldd	r22, Y+56	; 0x38
    2e5c:	79 ad       	ldd	r23, Y+57	; 0x39
    2e5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e60:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <LCD_vidSendCommand_4_Bits+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e74:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9f ab       	std	Y+55, r25	; 0x37
    2e98:	8e ab       	std	Y+54, r24	; 0x36
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <LCD_vidSendCommand_4_Bits+0x40e>
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9d ab       	std	Y+53, r25	; 0x35
    2ea2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ea4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ea6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_vidSendCommand_4_Bits+0x3fc>
    2eac:	9d ab       	std	Y+53, r25	; 0x35
    2eae:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8e a9       	ldd	r24, Y+54	; 0x36
    2eb2:	9f a9       	ldd	r25, Y+55	; 0x37
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9f ab       	std	Y+55, r25	; 0x37
    2eb8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8e a9       	ldd	r24, Y+54	; 0x36
    2ebc:	9f a9       	ldd	r25, Y+55	; 0x37
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <LCD_vidSendCommand_4_Bits+0x3f0>
    2ec2:	2d c0       	rjmp	.+90     	; 0x2f1e <LCD_vidSendCommand_4_Bits+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	68 ad       	ldd	r22, Y+56	; 0x38
    2ec6:	79 ad       	ldd	r23, Y+57	; 0x39
    2ec8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2eca:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ecc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9f ab       	std	Y+55, r25	; 0x37
    2ed6:	8e ab       	std	Y+54, r24	; 0x36
    2ed8:	8e a9       	ldd	r24, Y+54	; 0x36
    2eda:	9f a9       	ldd	r25, Y+55	; 0x37
    2edc:	9b ab       	std	Y+51, r25	; 0x33
    2ede:	8a ab       	std	Y+50, r24	; 0x32
    2ee0:	8a a9       	ldd	r24, Y+50	; 0x32
    2ee2:	9b a9       	ldd	r25, Y+51	; 0x33
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <LCD_vidSendCommand_4_Bits+0x438>
    2ee8:	9b ab       	std	Y+51, r25	; 0x33
    2eea:	8a ab       	std	Y+50, r24	; 0x32
    2eec:	18 c0       	rjmp	.+48     	; 0x2f1e <LCD_vidSendCommand_4_Bits+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ef 5b       	subi	r30, 0xBF	; 191
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	fe 01       	movw	r30, r28
    2f06:	e0 5c       	subi	r30, 0xC0	; 192
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 83       	st	Z, r24
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e0 5c       	subi	r30, 0xC0	; 192
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f16:	89 a9       	ldd	r24, Y+49	; 0x31
    2f18:	8a 95       	dec	r24
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_vidSendCommand_4_Bits+0x46c>
    2f1c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);



	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy << 4);
    2f1e:	a8 e3       	ldi	r26, 0x38	; 56
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e8 e3       	ldi	r30, 0x38	; 56
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	28 2f       	mov	r18, r24
    2f2a:	2f 70       	andi	r18, 0x0F	; 15
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ef 59       	subi	r30, 0x9F	; 159
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	82 95       	swap	r24
    2f3a:	92 95       	swap	r25
    2f3c:	90 7f       	andi	r25, 0xF0	; 240
    2f3e:	98 27       	eor	r25, r24
    2f40:	80 7f       	andi	r24, 0xF0	; 240
    2f42:	98 27       	eor	r25, r24
    2f44:	82 2b       	or	r24, r18
    2f46:	8c 93       	st	X, r24
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	62 e0       	ldi	r22, 0x02	; 2
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e8       	ldi	r26, 0x80	; 128
    2f58:	bf e3       	ldi	r27, 0x3F	; 63
    2f5a:	8d a7       	std	Y+45, r24	; 0x2d
    2f5c:	9e a7       	std	Y+46, r25	; 0x2e
    2f5e:	af a7       	std	Y+47, r26	; 0x2f
    2f60:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f62:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f64:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f68:	98 a9       	ldd	r25, Y+48	; 0x30
    2f6a:	2b ea       	ldi	r18, 0xAB	; 171
    2f6c:	3a ea       	ldi	r19, 0xAA	; 170
    2f6e:	4a e2       	ldi	r20, 0x2A	; 42
    2f70:	50 e4       	ldi	r21, 0x40	; 64
    2f72:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	89 a7       	std	Y+41, r24	; 0x29
    2f7c:	9a a7       	std	Y+42, r25	; 0x2a
    2f7e:	ab a7       	std	Y+43, r26	; 0x2b
    2f80:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f82:	69 a5       	ldd	r22, Y+41	; 0x29
    2f84:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f88:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	1c f4       	brge	.+6      	; 0x2fa0 <LCD_vidSendCommand_4_Bits+0x4f4>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	88 a7       	std	Y+40, r24	; 0x28
    2f9e:	91 c0       	rjmp	.+290    	; 0x30c2 <LCD_vidSendCommand_4_Bits+0x616>
	else if (__tmp > 255)
    2fa0:	69 a5       	ldd	r22, Y+41	; 0x29
    2fa2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fa6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	53 e4       	ldi	r21, 0x43	; 67
    2fb0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	0c f0       	brlt	.+2      	; 0x2fba <LCD_vidSendCommand_4_Bits+0x50e>
    2fb8:	7b c0       	rjmp	.+246    	; 0x30b0 <LCD_vidSendCommand_4_Bits+0x604>
	{
		_delay_ms(__us / 1000.0);
    2fba:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fbc:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a e7       	ldi	r20, 0x7A	; 122
    2fc8:	54 e4       	ldi	r21, 0x44	; 68
    2fca:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	8c a3       	std	Y+36, r24	; 0x24
    2fd4:	9d a3       	std	Y+37, r25	; 0x25
    2fd6:	ae a3       	std	Y+38, r26	; 0x26
    2fd8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fda:	6c a1       	ldd	r22, Y+36	; 0x24
    2fdc:	7d a1       	ldd	r23, Y+37	; 0x25
    2fde:	8e a1       	ldd	r24, Y+38	; 0x26
    2fe0:	9f a1       	ldd	r25, Y+39	; 0x27
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	4a ef       	ldi	r20, 0xFA	; 250
    2fe8:	54 e4       	ldi	r21, 0x44	; 68
    2fea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	88 a3       	std	Y+32, r24	; 0x20
    2ff4:	99 a3       	std	Y+33, r25	; 0x21
    2ff6:	aa a3       	std	Y+34, r26	; 0x22
    2ff8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ffa:	68 a1       	ldd	r22, Y+32	; 0x20
    2ffc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ffe:	8a a1       	ldd	r24, Y+34	; 0x22
    3000:	9b a1       	ldd	r25, Y+35	; 0x23
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5f e3       	ldi	r21, 0x3F	; 63
    300a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    300e:	88 23       	and	r24, r24
    3010:	2c f4       	brge	.+10     	; 0x301c <LCD_vidSendCommand_4_Bits+0x570>
		__ticks = 1;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9f 8f       	std	Y+31, r25	; 0x1f
    3018:	8e 8f       	std	Y+30, r24	; 0x1e
    301a:	3f c0       	rjmp	.+126    	; 0x309a <LCD_vidSendCommand_4_Bits+0x5ee>
	else if (__tmp > 65535)
    301c:	68 a1       	ldd	r22, Y+32	; 0x20
    301e:	79 a1       	ldd	r23, Y+33	; 0x21
    3020:	8a a1       	ldd	r24, Y+34	; 0x22
    3022:	9b a1       	ldd	r25, Y+35	; 0x23
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	4c f5       	brge	.+82     	; 0x3086 <LCD_vidSendCommand_4_Bits+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3034:	6c a1       	ldd	r22, Y+36	; 0x24
    3036:	7d a1       	ldd	r23, Y+37	; 0x25
    3038:	8e a1       	ldd	r24, Y+38	; 0x26
    303a:	9f a1       	ldd	r25, Y+39	; 0x27
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e2       	ldi	r20, 0x20	; 32
    3042:	51 e4       	ldi	r21, 0x41	; 65
    3044:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	9f 8f       	std	Y+31, r25	; 0x1f
    305a:	8e 8f       	std	Y+30, r24	; 0x1e
    305c:	0f c0       	rjmp	.+30     	; 0x307c <LCD_vidSendCommand_4_Bits+0x5d0>
    305e:	88 ec       	ldi	r24, 0xC8	; 200
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9d 8f       	std	Y+29, r25	; 0x1d
    3064:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3066:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3068:	9d 8d       	ldd	r25, Y+29	; 0x1d
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_vidSendCommand_4_Bits+0x5be>
    306e:	9d 8f       	std	Y+29, r25	; 0x1d
    3070:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3072:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3074:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	9f 8f       	std	Y+31, r25	; 0x1f
    307a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    307e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	69 f7       	brne	.-38     	; 0x305e <LCD_vidSendCommand_4_Bits+0x5b2>
    3084:	24 c0       	rjmp	.+72     	; 0x30ce <LCD_vidSendCommand_4_Bits+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3086:	68 a1       	ldd	r22, Y+32	; 0x20
    3088:	79 a1       	ldd	r23, Y+33	; 0x21
    308a:	8a a1       	ldd	r24, Y+34	; 0x22
    308c:	9b a1       	ldd	r25, Y+35	; 0x23
    308e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9f 8f       	std	Y+31, r25	; 0x1f
    3098:	8e 8f       	std	Y+30, r24	; 0x1e
    309a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    309c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    309e:	9b 8f       	std	Y+27, r25	; 0x1b
    30a0:	8a 8f       	std	Y+26, r24	; 0x1a
    30a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <LCD_vidSendCommand_4_Bits+0x5fa>
    30aa:	9b 8f       	std	Y+27, r25	; 0x1b
    30ac:	8a 8f       	std	Y+26, r24	; 0x1a
    30ae:	0f c0       	rjmp	.+30     	; 0x30ce <LCD_vidSendCommand_4_Bits+0x622>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30b0:	69 a5       	ldd	r22, Y+41	; 0x29
    30b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    30b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    30b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	88 a7       	std	Y+40, r24	; 0x28
    30c2:	88 a5       	ldd	r24, Y+40	; 0x28
    30c4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30c6:	89 8d       	ldd	r24, Y+25	; 0x19
    30c8:	8a 95       	dec	r24
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_vidSendCommand_4_Bits+0x61c>
    30cc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	62 e0       	ldi	r22, 0x02	; 2
    30d2:	40 e0       	ldi	r20, 0x00	; 0
    30d4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a8 ec       	ldi	r26, 0xC8	; 200
    30de:	b2 e4       	ldi	r27, 0x42	; 66
    30e0:	8d 8b       	std	Y+21, r24	; 0x15
    30e2:	9e 8b       	std	Y+22, r25	; 0x16
    30e4:	af 8b       	std	Y+23, r26	; 0x17
    30e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30e8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ea:	7e 89       	ldd	r23, Y+22	; 0x16
    30ec:	8f 89       	ldd	r24, Y+23	; 0x17
    30ee:	98 8d       	ldd	r25, Y+24	; 0x18
    30f0:	2b ea       	ldi	r18, 0xAB	; 171
    30f2:	3a ea       	ldi	r19, 0xAA	; 170
    30f4:	4a e2       	ldi	r20, 0x2A	; 42
    30f6:	50 e4       	ldi	r21, 0x40	; 64
    30f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	89 8b       	std	Y+17, r24	; 0x11
    3102:	9a 8b       	std	Y+18, r25	; 0x12
    3104:	ab 8b       	std	Y+19, r26	; 0x13
    3106:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3108:	69 89       	ldd	r22, Y+17	; 0x11
    310a:	7a 89       	ldd	r23, Y+18	; 0x12
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	1c f4       	brge	.+6      	; 0x3126 <LCD_vidSendCommand_4_Bits+0x67a>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	88 8b       	std	Y+16, r24	; 0x10
    3124:	91 c0       	rjmp	.+290    	; 0x3248 <LCD_vidSendCommand_4_Bits+0x79c>
	else if (__tmp > 255)
    3126:	69 89       	ldd	r22, Y+17	; 0x11
    3128:	7a 89       	ldd	r23, Y+18	; 0x12
    312a:	8b 89       	ldd	r24, Y+19	; 0x13
    312c:	9c 89       	ldd	r25, Y+20	; 0x14
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	53 e4       	ldi	r21, 0x43	; 67
    3136:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	0c f0       	brlt	.+2      	; 0x3140 <LCD_vidSendCommand_4_Bits+0x694>
    313e:	7b c0       	rjmp	.+246    	; 0x3236 <LCD_vidSendCommand_4_Bits+0x78a>
	{
		_delay_ms(__us / 1000.0);
    3140:	6d 89       	ldd	r22, Y+21	; 0x15
    3142:	7e 89       	ldd	r23, Y+22	; 0x16
    3144:	8f 89       	ldd	r24, Y+23	; 0x17
    3146:	98 8d       	ldd	r25, Y+24	; 0x18
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4a e7       	ldi	r20, 0x7A	; 122
    314e:	54 e4       	ldi	r21, 0x44	; 68
    3150:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8c 87       	std	Y+12, r24	; 0x0c
    315a:	9d 87       	std	Y+13, r25	; 0x0d
    315c:	ae 87       	std	Y+14, r26	; 0x0e
    315e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	6c 85       	ldd	r22, Y+12	; 0x0c
    3162:	7d 85       	ldd	r23, Y+13	; 0x0d
    3164:	8e 85       	ldd	r24, Y+14	; 0x0e
    3166:	9f 85       	ldd	r25, Y+15	; 0x0f
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a ef       	ldi	r20, 0xFA	; 250
    316e:	54 e4       	ldi	r21, 0x44	; 68
    3170:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	88 87       	std	Y+8, r24	; 0x08
    317a:	99 87       	std	Y+9, r25	; 0x09
    317c:	aa 87       	std	Y+10, r26	; 0x0a
    317e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3180:	68 85       	ldd	r22, Y+8	; 0x08
    3182:	79 85       	ldd	r23, Y+9	; 0x09
    3184:	8a 85       	ldd	r24, Y+10	; 0x0a
    3186:	9b 85       	ldd	r25, Y+11	; 0x0b
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5f e3       	ldi	r21, 0x3F	; 63
    3190:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3194:	88 23       	and	r24, r24
    3196:	2c f4       	brge	.+10     	; 0x31a2 <LCD_vidSendCommand_4_Bits+0x6f6>
		__ticks = 1;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9f 83       	std	Y+7, r25	; 0x07
    319e:	8e 83       	std	Y+6, r24	; 0x06
    31a0:	3f c0       	rjmp	.+126    	; 0x3220 <LCD_vidSendCommand_4_Bits+0x774>
	else if (__tmp > 65535)
    31a2:	68 85       	ldd	r22, Y+8	; 0x08
    31a4:	79 85       	ldd	r23, Y+9	; 0x09
    31a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	4c f5       	brge	.+82     	; 0x320c <LCD_vidSendCommand_4_Bits+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    31bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    31be:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e2       	ldi	r20, 0x20	; 32
    31c8:	51 e4       	ldi	r21, 0x41	; 65
    31ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9f 83       	std	Y+7, r25	; 0x07
    31e0:	8e 83       	std	Y+6, r24	; 0x06
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <LCD_vidSendCommand_4_Bits+0x756>
    31e4:	88 ec       	ldi	r24, 0xC8	; 200
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9d 83       	std	Y+5, r25	; 0x05
    31ea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31ec:	8c 81       	ldd	r24, Y+4	; 0x04
    31ee:	9d 81       	ldd	r25, Y+5	; 0x05
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <LCD_vidSendCommand_4_Bits+0x744>
    31f4:	9d 83       	std	Y+5, r25	; 0x05
    31f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f8:	8e 81       	ldd	r24, Y+6	; 0x06
    31fa:	9f 81       	ldd	r25, Y+7	; 0x07
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	9f 83       	std	Y+7, r25	; 0x07
    3200:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3202:	8e 81       	ldd	r24, Y+6	; 0x06
    3204:	9f 81       	ldd	r25, Y+7	; 0x07
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	69 f7       	brne	.-38     	; 0x31e4 <LCD_vidSendCommand_4_Bits+0x738>
    320a:	24 c0       	rjmp	.+72     	; 0x3254 <LCD_vidSendCommand_4_Bits+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	68 85       	ldd	r22, Y+8	; 0x08
    320e:	79 85       	ldd	r23, Y+9	; 0x09
    3210:	8a 85       	ldd	r24, Y+10	; 0x0a
    3212:	9b 85       	ldd	r25, Y+11	; 0x0b
    3214:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9f 83       	std	Y+7, r25	; 0x07
    321e:	8e 83       	std	Y+6, r24	; 0x06
    3220:	8e 81       	ldd	r24, Y+6	; 0x06
    3222:	9f 81       	ldd	r25, Y+7	; 0x07
    3224:	9b 83       	std	Y+3, r25	; 0x03
    3226:	8a 83       	std	Y+2, r24	; 0x02
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <LCD_vidSendCommand_4_Bits+0x780>
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
    3234:	0f c0       	rjmp	.+30     	; 0x3254 <LCD_vidSendCommand_4_Bits+0x7a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3236:	69 89       	ldd	r22, Y+17	; 0x11
    3238:	7a 89       	ldd	r23, Y+18	; 0x12
    323a:	8b 89       	ldd	r24, Y+19	; 0x13
    323c:	9c 89       	ldd	r25, Y+20	; 0x14
    323e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	88 8b       	std	Y+16, r24	; 0x10
    3248:	88 89       	ldd	r24, Y+16	; 0x10
    324a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8a 95       	dec	r24
    3250:	f1 f7       	brne	.-4      	; 0x324e <LCD_vidSendCommand_4_Bits+0x7a2>
    3252:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);

}
    3254:	cf 59       	subi	r28, 0x9F	; 159
    3256:	df 4f       	sbci	r29, 0xFF	; 255
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	08 95       	ret

0000326c <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy){
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	e1 97       	sbiw	r28, 0x31	; 49
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	89 ab       	std	Y+49, r24	; 0x31
	///8 Bits (D0->D7)////

	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    3282:	82 e0       	ldi	r24, 0x02	; 2
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	61 e0       	ldi	r22, 0x01	; 1
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortValue(LCD_DATA_PORT,u8DataCpy);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	69 a9       	ldd	r22, Y+49	; 0x31
    329a:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_voidSetPortValue>
	//EnaLCD_vidWriteCharctrble
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    329e:	82 e0       	ldi	r24, 0x02	; 2
    32a0:	62 e0       	ldi	r22, 0x02	; 2
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a0 e8       	ldi	r26, 0x80	; 128
    32ae:	bf e3       	ldi	r27, 0x3F	; 63
    32b0:	8d a7       	std	Y+45, r24	; 0x2d
    32b2:	9e a7       	std	Y+46, r25	; 0x2e
    32b4:	af a7       	std	Y+47, r26	; 0x2f
    32b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    32ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    32bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32be:	98 a9       	ldd	r25, Y+48	; 0x30
    32c0:	2b ea       	ldi	r18, 0xAB	; 171
    32c2:	3a ea       	ldi	r19, 0xAA	; 170
    32c4:	4a e2       	ldi	r20, 0x2A	; 42
    32c6:	50 e4       	ldi	r21, 0x40	; 64
    32c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	89 a7       	std	Y+41, r24	; 0x29
    32d2:	9a a7       	std	Y+42, r25	; 0x2a
    32d4:	ab a7       	std	Y+43, r26	; 0x2b
    32d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    32d8:	69 a5       	ldd	r22, Y+41	; 0x29
    32da:	7a a5       	ldd	r23, Y+42	; 0x2a
    32dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    32de:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	1c f4       	brge	.+6      	; 0x32f6 <LCD_vidWriteCharctr+0x8a>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	88 a7       	std	Y+40, r24	; 0x28
    32f4:	91 c0       	rjmp	.+290    	; 0x3418 <LCD_vidWriteCharctr+0x1ac>
	else if (__tmp > 255)
    32f6:	69 a5       	ldd	r22, Y+41	; 0x29
    32f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    32fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    32fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	0c f0       	brlt	.+2      	; 0x3310 <LCD_vidWriteCharctr+0xa4>
    330e:	7b c0       	rjmp	.+246    	; 0x3406 <LCD_vidWriteCharctr+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3310:	6d a5       	ldd	r22, Y+45	; 0x2d
    3312:	7e a5       	ldd	r23, Y+46	; 0x2e
    3314:	8f a5       	ldd	r24, Y+47	; 0x2f
    3316:	98 a9       	ldd	r25, Y+48	; 0x30
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4a e7       	ldi	r20, 0x7A	; 122
    331e:	54 e4       	ldi	r21, 0x44	; 68
    3320:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	8c a3       	std	Y+36, r24	; 0x24
    332a:	9d a3       	std	Y+37, r25	; 0x25
    332c:	ae a3       	std	Y+38, r26	; 0x26
    332e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	6c a1       	ldd	r22, Y+36	; 0x24
    3332:	7d a1       	ldd	r23, Y+37	; 0x25
    3334:	8e a1       	ldd	r24, Y+38	; 0x26
    3336:	9f a1       	ldd	r25, Y+39	; 0x27
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a ef       	ldi	r20, 0xFA	; 250
    333e:	54 e4       	ldi	r21, 0x44	; 68
    3340:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	88 a3       	std	Y+32, r24	; 0x20
    334a:	99 a3       	std	Y+33, r25	; 0x21
    334c:	aa a3       	std	Y+34, r26	; 0x22
    334e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3350:	68 a1       	ldd	r22, Y+32	; 0x20
    3352:	79 a1       	ldd	r23, Y+33	; 0x21
    3354:	8a a1       	ldd	r24, Y+34	; 0x22
    3356:	9b a1       	ldd	r25, Y+35	; 0x23
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <LCD_vidWriteCharctr+0x106>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9f 8f       	std	Y+31, r25	; 0x1f
    336e:	8e 8f       	std	Y+30, r24	; 0x1e
    3370:	3f c0       	rjmp	.+126    	; 0x33f0 <LCD_vidWriteCharctr+0x184>
	else if (__tmp > 65535)
    3372:	68 a1       	ldd	r22, Y+32	; 0x20
    3374:	79 a1       	ldd	r23, Y+33	; 0x21
    3376:	8a a1       	ldd	r24, Y+34	; 0x22
    3378:	9b a1       	ldd	r25, Y+35	; 0x23
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	4f e7       	ldi	r20, 0x7F	; 127
    3380:	57 e4       	ldi	r21, 0x47	; 71
    3382:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3386:	18 16       	cp	r1, r24
    3388:	4c f5       	brge	.+82     	; 0x33dc <LCD_vidWriteCharctr+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338a:	6c a1       	ldd	r22, Y+36	; 0x24
    338c:	7d a1       	ldd	r23, Y+37	; 0x25
    338e:	8e a1       	ldd	r24, Y+38	; 0x26
    3390:	9f a1       	ldd	r25, Y+39	; 0x27
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	9f 8f       	std	Y+31, r25	; 0x1f
    33b0:	8e 8f       	std	Y+30, r24	; 0x1e
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <LCD_vidWriteCharctr+0x166>
    33b4:	88 ec       	ldi	r24, 0xC8	; 200
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9d 8f       	std	Y+29, r25	; 0x1d
    33ba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <LCD_vidWriteCharctr+0x154>
    33c4:	9d 8f       	std	Y+29, r25	; 0x1d
    33c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	9f 8f       	std	Y+31, r25	; 0x1f
    33d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <LCD_vidWriteCharctr+0x148>
    33da:	24 c0       	rjmp	.+72     	; 0x3424 <LCD_vidWriteCharctr+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	68 a1       	ldd	r22, Y+32	; 0x20
    33de:	79 a1       	ldd	r23, Y+33	; 0x21
    33e0:	8a a1       	ldd	r24, Y+34	; 0x22
    33e2:	9b a1       	ldd	r25, Y+35	; 0x23
    33e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9f 8f       	std	Y+31, r25	; 0x1f
    33ee:	8e 8f       	std	Y+30, r24	; 0x1e
    33f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33f4:	9b 8f       	std	Y+27, r25	; 0x1b
    33f6:	8a 8f       	std	Y+26, r24	; 0x1a
    33f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <LCD_vidWriteCharctr+0x190>
    3400:	9b 8f       	std	Y+27, r25	; 0x1b
    3402:	8a 8f       	std	Y+26, r24	; 0x1a
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <LCD_vidWriteCharctr+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3406:	69 a5       	ldd	r22, Y+41	; 0x29
    3408:	7a a5       	ldd	r23, Y+42	; 0x2a
    340a:	8b a5       	ldd	r24, Y+43	; 0x2b
    340c:	9c a5       	ldd	r25, Y+44	; 0x2c
    340e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	88 a7       	std	Y+40, r24	; 0x28
    3418:	88 a5       	ldd	r24, Y+40	; 0x28
    341a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    341c:	89 8d       	ldd	r24, Y+25	; 0x19
    341e:	8a 95       	dec	r24
    3420:	f1 f7       	brne	.-4      	; 0x341e <LCD_vidWriteCharctr+0x1b2>
    3422:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    3424:	82 e0       	ldi	r24, 0x02	; 2
    3426:	62 e0       	ldi	r22, 0x02	; 2
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	a8 e4       	ldi	r26, 0x48	; 72
    3434:	b2 e4       	ldi	r27, 0x42	; 66
    3436:	8d 8b       	std	Y+21, r24	; 0x15
    3438:	9e 8b       	std	Y+22, r25	; 0x16
    343a:	af 8b       	std	Y+23, r26	; 0x17
    343c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    343e:	6d 89       	ldd	r22, Y+21	; 0x15
    3440:	7e 89       	ldd	r23, Y+22	; 0x16
    3442:	8f 89       	ldd	r24, Y+23	; 0x17
    3444:	98 8d       	ldd	r25, Y+24	; 0x18
    3446:	2b ea       	ldi	r18, 0xAB	; 171
    3448:	3a ea       	ldi	r19, 0xAA	; 170
    344a:	4a e2       	ldi	r20, 0x2A	; 42
    344c:	50 e4       	ldi	r21, 0x40	; 64
    344e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	89 8b       	std	Y+17, r24	; 0x11
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	ab 8b       	std	Y+19, r26	; 0x13
    345c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    345e:	69 89       	ldd	r22, Y+17	; 0x11
    3460:	7a 89       	ldd	r23, Y+18	; 0x12
    3462:	8b 89       	ldd	r24, Y+19	; 0x13
    3464:	9c 89       	ldd	r25, Y+20	; 0x14
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	1c f4       	brge	.+6      	; 0x347c <LCD_vidWriteCharctr+0x210>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	88 8b       	std	Y+16, r24	; 0x10
    347a:	91 c0       	rjmp	.+290    	; 0x359e <LCD_vidWriteCharctr+0x332>
	else if (__tmp > 255)
    347c:	69 89       	ldd	r22, Y+17	; 0x11
    347e:	7a 89       	ldd	r23, Y+18	; 0x12
    3480:	8b 89       	ldd	r24, Y+19	; 0x13
    3482:	9c 89       	ldd	r25, Y+20	; 0x14
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4f e7       	ldi	r20, 0x7F	; 127
    348a:	53 e4       	ldi	r21, 0x43	; 67
    348c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3490:	18 16       	cp	r1, r24
    3492:	0c f0       	brlt	.+2      	; 0x3496 <LCD_vidWriteCharctr+0x22a>
    3494:	7b c0       	rjmp	.+246    	; 0x358c <LCD_vidWriteCharctr+0x320>
	{
		_delay_ms(__us / 1000.0);
    3496:	6d 89       	ldd	r22, Y+21	; 0x15
    3498:	7e 89       	ldd	r23, Y+22	; 0x16
    349a:	8f 89       	ldd	r24, Y+23	; 0x17
    349c:	98 8d       	ldd	r25, Y+24	; 0x18
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	4a e7       	ldi	r20, 0x7A	; 122
    34a4:	54 e4       	ldi	r21, 0x44	; 68
    34a6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	8c 87       	std	Y+12, r24	; 0x0c
    34b0:	9d 87       	std	Y+13, r25	; 0x0d
    34b2:	ae 87       	std	Y+14, r26	; 0x0e
    34b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    34b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    34ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    34bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a ef       	ldi	r20, 0xFA	; 250
    34c4:	54 e4       	ldi	r21, 0x44	; 68
    34c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	88 87       	std	Y+8, r24	; 0x08
    34d0:	99 87       	std	Y+9, r25	; 0x09
    34d2:	aa 87       	std	Y+10, r26	; 0x0a
    34d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34d6:	68 85       	ldd	r22, Y+8	; 0x08
    34d8:	79 85       	ldd	r23, Y+9	; 0x09
    34da:	8a 85       	ldd	r24, Y+10	; 0x0a
    34dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <LCD_vidWriteCharctr+0x28c>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9f 83       	std	Y+7, r25	; 0x07
    34f4:	8e 83       	std	Y+6, r24	; 0x06
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <LCD_vidWriteCharctr+0x30a>
	else if (__tmp > 65535)
    34f8:	68 85       	ldd	r22, Y+8	; 0x08
    34fa:	79 85       	ldd	r23, Y+9	; 0x09
    34fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <LCD_vidWriteCharctr+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	6c 85       	ldd	r22, Y+12	; 0x0c
    3512:	7d 85       	ldd	r23, Y+13	; 0x0d
    3514:	8e 85       	ldd	r24, Y+14	; 0x0e
    3516:	9f 85       	ldd	r25, Y+15	; 0x0f
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9f 83       	std	Y+7, r25	; 0x07
    3536:	8e 83       	std	Y+6, r24	; 0x06
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <LCD_vidWriteCharctr+0x2ec>
    353a:	88 ec       	ldi	r24, 0xC8	; 200
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9d 83       	std	Y+5, r25	; 0x05
    3540:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	9d 81       	ldd	r25, Y+5	; 0x05
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <LCD_vidWriteCharctr+0x2da>
    354a:	9d 83       	std	Y+5, r25	; 0x05
    354c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8e 81       	ldd	r24, Y+6	; 0x06
    3550:	9f 81       	ldd	r25, Y+7	; 0x07
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9f 83       	std	Y+7, r25	; 0x07
    3556:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8e 81       	ldd	r24, Y+6	; 0x06
    355a:	9f 81       	ldd	r25, Y+7	; 0x07
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <LCD_vidWriteCharctr+0x2ce>
    3560:	24 c0       	rjmp	.+72     	; 0x35aa <LCD_vidWriteCharctr+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	68 85       	ldd	r22, Y+8	; 0x08
    3564:	79 85       	ldd	r23, Y+9	; 0x09
    3566:	8a 85       	ldd	r24, Y+10	; 0x0a
    3568:	9b 85       	ldd	r25, Y+11	; 0x0b
    356a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9f 83       	std	Y+7, r25	; 0x07
    3574:	8e 83       	std	Y+6, r24	; 0x06
    3576:	8e 81       	ldd	r24, Y+6	; 0x06
    3578:	9f 81       	ldd	r25, Y+7	; 0x07
    357a:	9b 83       	std	Y+3, r25	; 0x03
    357c:	8a 83       	std	Y+2, r24	; 0x02
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	9b 81       	ldd	r25, Y+3	; 0x03
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_vidWriteCharctr+0x316>
    3586:	9b 83       	std	Y+3, r25	; 0x03
    3588:	8a 83       	std	Y+2, r24	; 0x02
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <LCD_vidWriteCharctr+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    358c:	69 89       	ldd	r22, Y+17	; 0x11
    358e:	7a 89       	ldd	r23, Y+18	; 0x12
    3590:	8b 89       	ldd	r24, Y+19	; 0x13
    3592:	9c 89       	ldd	r25, Y+20	; 0x14
    3594:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	88 8b       	std	Y+16, r24	; 0x10
    359e:	88 89       	ldd	r24, Y+16	; 0x10
    35a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	8a 95       	dec	r24
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_vidWriteCharctr+0x338>
    35a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    35aa:	e1 96       	adiw	r28, 0x31	; 49
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	cf 91       	pop	r28
    35b8:	df 91       	pop	r29
    35ba:	08 95       	ret

000035bc <LCD_vidWriteCharctr_4bits>:


void LCD_vidWriteCharctr_4bits(uint8_t u8DataCpy) {
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	cf 56       	subi	r28, 0x6F	; 111
    35ca:	d0 40       	sbci	r29, 0x00	; 0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	fe 01       	movw	r30, r28
    35d8:	e1 59       	subi	r30, 0x91	; 145
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 83       	st	Z, r24


	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    35de:	82 e0       	ldi	r24, 0x02	; 2
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	41 e0       	ldi	r20, 0x01	; 1
    35e4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy >> 4) & 0x0F) << 4);
    35f2:	fe 01       	movw	r30, r28
    35f4:	e1 59       	subi	r30, 0x91	; 145
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
    35fa:	98 2f       	mov	r25, r24
    35fc:	90 7f       	andi	r25, 0xF0	; 240
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	69 2f       	mov	r22, r25
    3602:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_voidSetPortValue>
    3606:	fe 01       	movw	r30, r28
    3608:	e5 59       	subi	r30, 0x95	; 149
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	a0 e8       	ldi	r26, 0x80	; 128
    3612:	bf e3       	ldi	r27, 0x3F	; 63
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    361c:	8e 01       	movw	r16, r28
    361e:	09 59       	subi	r16, 0x99	; 153
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	fe 01       	movw	r30, r28
    3624:	e5 59       	subi	r30, 0x95	; 149
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	60 81       	ld	r22, Z
    362a:	71 81       	ldd	r23, Z+1	; 0x01
    362c:	82 81       	ldd	r24, Z+2	; 0x02
    362e:	93 81       	ldd	r25, Z+3	; 0x03
    3630:	2b ea       	ldi	r18, 0xAB	; 171
    3632:	3a ea       	ldi	r19, 0xAA	; 170
    3634:	4a e2       	ldi	r20, 0x2A	; 42
    3636:	50 e4       	ldi	r21, 0x40	; 64
    3638:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	f8 01       	movw	r30, r16
    3642:	80 83       	st	Z, r24
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	a2 83       	std	Z+2, r26	; 0x02
    3648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    364a:	fe 01       	movw	r30, r28
    364c:	e9 59       	subi	r30, 0x99	; 153
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e8       	ldi	r20, 0x80	; 128
    365e:	5f e3       	ldi	r21, 0x3F	; 63
    3660:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3664:	88 23       	and	r24, r24
    3666:	34 f4       	brge	.+12     	; 0x3674 <LCD_vidWriteCharctr_4bits+0xb8>
		__ticks = 1;
    3668:	fe 01       	movw	r30, r28
    366a:	ea 59       	subi	r30, 0x9A	; 154
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	80 83       	st	Z, r24
    3672:	e0 c0       	rjmp	.+448    	; 0x3834 <LCD_vidWriteCharctr_4bits+0x278>
	else if (__tmp > 255)
    3674:	fe 01       	movw	r30, r28
    3676:	e9 59       	subi	r30, 0x99	; 153
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	82 81       	ldd	r24, Z+2	; 0x02
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	53 e4       	ldi	r21, 0x43	; 67
    368a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	0c f0       	brlt	.+2      	; 0x3694 <LCD_vidWriteCharctr_4bits+0xd8>
    3692:	c0 c0       	rjmp	.+384    	; 0x3814 <LCD_vidWriteCharctr_4bits+0x258>
	{
		_delay_ms(__us / 1000.0);
    3694:	fe 01       	movw	r30, r28
    3696:	e5 59       	subi	r30, 0x95	; 149
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4a e7       	ldi	r20, 0x7A	; 122
    36a8:	54 e4       	ldi	r21, 0x44	; 68
    36aa:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	fe 01       	movw	r30, r28
    36b4:	ee 59       	subi	r30, 0x9E	; 158
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 83       	st	Z, r24
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	a2 83       	std	Z+2, r26	; 0x02
    36be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	8e 01       	movw	r16, r28
    36c2:	02 5a       	subi	r16, 0xA2	; 162
    36c4:	1f 4f       	sbci	r17, 0xFF	; 255
    36c6:	fe 01       	movw	r30, r28
    36c8:	ee 59       	subi	r30, 0x9E	; 158
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	60 81       	ld	r22, Z
    36ce:	71 81       	ldd	r23, Z+1	; 0x01
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	93 81       	ldd	r25, Z+3	; 0x03
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	4a ef       	ldi	r20, 0xFA	; 250
    36da:	54 e4       	ldi	r21, 0x44	; 68
    36dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	f8 01       	movw	r30, r16
    36e6:	80 83       	st	Z, r24
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	a2 83       	std	Z+2, r26	; 0x02
    36ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36ee:	fe 01       	movw	r30, r28
    36f0:	e2 5a       	subi	r30, 0xA2	; 162
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	82 81       	ldd	r24, Z+2	; 0x02
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	5f e3       	ldi	r21, 0x3F	; 63
    3704:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3708:	88 23       	and	r24, r24
    370a:	44 f4       	brge	.+16     	; 0x371c <LCD_vidWriteCharctr_4bits+0x160>
		__ticks = 1;
    370c:	fe 01       	movw	r30, r28
    370e:	e4 5a       	subi	r30, 0xA4	; 164
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	80 83       	st	Z, r24
    371a:	64 c0       	rjmp	.+200    	; 0x37e4 <LCD_vidWriteCharctr_4bits+0x228>
	else if (__tmp > 65535)
    371c:	fe 01       	movw	r30, r28
    371e:	e2 5a       	subi	r30, 0xA2	; 162
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	3f ef       	ldi	r19, 0xFF	; 255
    372e:	4f e7       	ldi	r20, 0x7F	; 127
    3730:	57 e4       	ldi	r21, 0x47	; 71
    3732:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3736:	18 16       	cp	r1, r24
    3738:	0c f0       	brlt	.+2      	; 0x373c <LCD_vidWriteCharctr_4bits+0x180>
    373a:	43 c0       	rjmp	.+134    	; 0x37c2 <LCD_vidWriteCharctr_4bits+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373c:	fe 01       	movw	r30, r28
    373e:	ee 59       	subi	r30, 0x9E	; 158
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	60 81       	ld	r22, Z
    3744:	71 81       	ldd	r23, Z+1	; 0x01
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	8e 01       	movw	r16, r28
    375c:	04 5a       	subi	r16, 0xA4	; 164
    375e:	1f 4f       	sbci	r17, 0xFF	; 255
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	f8 01       	movw	r30, r16
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	1f c0       	rjmp	.+62     	; 0x37b2 <LCD_vidWriteCharctr_4bits+0x1f6>
    3774:	fe 01       	movw	r30, r28
    3776:	e6 5a       	subi	r30, 0xA6	; 166
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	88 ec       	ldi	r24, 0xC8	; 200
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3782:	fe 01       	movw	r30, r28
    3784:	e6 5a       	subi	r30, 0xA6	; 166
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	80 81       	ld	r24, Z
    378a:	91 81       	ldd	r25, Z+1	; 0x01
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <LCD_vidWriteCharctr_4bits+0x1d0>
    3790:	fe 01       	movw	r30, r28
    3792:	e6 5a       	subi	r30, 0xA6	; 166
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379a:	de 01       	movw	r26, r28
    379c:	a4 5a       	subi	r26, 0xA4	; 164
    379e:	bf 4f       	sbci	r27, 0xFF	; 255
    37a0:	fe 01       	movw	r30, r28
    37a2:	e4 5a       	subi	r30, 0xA4	; 164
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	11 96       	adiw	r26, 0x01	; 1
    37ae:	9c 93       	st	X, r25
    37b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b2:	fe 01       	movw	r30, r28
    37b4:	e4 5a       	subi	r30, 0xA4	; 164
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	80 81       	ld	r24, Z
    37ba:	91 81       	ldd	r25, Z+1	; 0x01
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	d1 f6       	brne	.-76     	; 0x3774 <LCD_vidWriteCharctr_4bits+0x1b8>
    37c0:	4b c0       	rjmp	.+150    	; 0x3858 <LCD_vidWriteCharctr_4bits+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c2:	8e 01       	movw	r16, r28
    37c4:	04 5a       	subi	r16, 0xA4	; 164
    37c6:	1f 4f       	sbci	r17, 0xFF	; 255
    37c8:	fe 01       	movw	r30, r28
    37ca:	e2 5a       	subi	r30, 0xA2	; 162
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	60 81       	ld	r22, Z
    37d0:	71 81       	ldd	r23, Z+1	; 0x01
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	f8 01       	movw	r30, r16
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	de 01       	movw	r26, r28
    37e6:	a8 5a       	subi	r26, 0xA8	; 168
    37e8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ea:	fe 01       	movw	r30, r28
    37ec:	e4 5a       	subi	r30, 0xA4	; 164
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	11 96       	adiw	r26, 0x01	; 1
    37f6:	9c 93       	st	X, r25
    37f8:	8e 93       	st	-X, r24
    37fa:	fe 01       	movw	r30, r28
    37fc:	e8 5a       	subi	r30, 0xA8	; 168
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_vidWriteCharctr_4bits+0x248>
    3808:	fe 01       	movw	r30, r28
    380a:	e8 5a       	subi	r30, 0xA8	; 168
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
    3812:	22 c0       	rjmp	.+68     	; 0x3858 <LCD_vidWriteCharctr_4bits+0x29c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3814:	8e 01       	movw	r16, r28
    3816:	0a 59       	subi	r16, 0x9A	; 154
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	fe 01       	movw	r30, r28
    381c:	e9 59       	subi	r30, 0x99	; 153
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	60 81       	ld	r22, Z
    3822:	71 81       	ldd	r23, Z+1	; 0x01
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	f8 01       	movw	r30, r16
    3832:	80 83       	st	Z, r24
    3834:	de 01       	movw	r26, r28
    3836:	a9 5a       	subi	r26, 0xA9	; 169
    3838:	bf 4f       	sbci	r27, 0xFF	; 255
    383a:	fe 01       	movw	r30, r28
    383c:	ea 59       	subi	r30, 0x9A	; 154
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	80 81       	ld	r24, Z
    3842:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3844:	fe 01       	movw	r30, r28
    3846:	e9 5a       	subi	r30, 0xA9	; 169
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	8a 95       	dec	r24
    384e:	f1 f7       	brne	.-4      	; 0x384c <LCD_vidWriteCharctr_4bits+0x290>
    3850:	fe 01       	movw	r30, r28
    3852:	e9 5a       	subi	r30, 0xA9	; 169
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	62 e0       	ldi	r22, 0x02	; 2
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    3862:	fe 01       	movw	r30, r28
    3864:	ed 5a       	subi	r30, 0xAD	; 173
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a0 e8       	ldi	r26, 0x80	; 128
    386e:	bf e3       	ldi	r27, 0x3F	; 63
    3870:	80 83       	st	Z, r24
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	a2 83       	std	Z+2, r26	; 0x02
    3876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3878:	8e 01       	movw	r16, r28
    387a:	01 5b       	subi	r16, 0xB1	; 177
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	fe 01       	movw	r30, r28
    3880:	ed 5a       	subi	r30, 0xAD	; 173
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	2b ea       	ldi	r18, 0xAB	; 171
    388e:	3a ea       	ldi	r19, 0xAA	; 170
    3890:	4a e2       	ldi	r20, 0x2A	; 42
    3892:	50 e4       	ldi	r21, 0x40	; 64
    3894:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	f8 01       	movw	r30, r16
    389e:	80 83       	st	Z, r24
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	a2 83       	std	Z+2, r26	; 0x02
    38a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a6:	fe 01       	movw	r30, r28
    38a8:	e1 5b       	subi	r30, 0xB1	; 177
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e8       	ldi	r20, 0x80	; 128
    38ba:	5f e3       	ldi	r21, 0x3F	; 63
    38bc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    38c0:	88 23       	and	r24, r24
    38c2:	34 f4       	brge	.+12     	; 0x38d0 <LCD_vidWriteCharctr_4bits+0x314>
		__ticks = 1;
    38c4:	fe 01       	movw	r30, r28
    38c6:	e2 5b       	subi	r30, 0xB2	; 178
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 83       	st	Z, r24
    38ce:	e0 c0       	rjmp	.+448    	; 0x3a90 <LCD_vidWriteCharctr_4bits+0x4d4>
	else if (__tmp > 255)
    38d0:	fe 01       	movw	r30, r28
    38d2:	e1 5b       	subi	r30, 0xB1	; 177
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	53 e4       	ldi	r21, 0x43	; 67
    38e6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	0c f0       	brlt	.+2      	; 0x38f0 <LCD_vidWriteCharctr_4bits+0x334>
    38ee:	c0 c0       	rjmp	.+384    	; 0x3a70 <LCD_vidWriteCharctr_4bits+0x4b4>
	{
		_delay_ms(__us / 1000.0);
    38f0:	fe 01       	movw	r30, r28
    38f2:	ed 5a       	subi	r30, 0xAD	; 173
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	4a e7       	ldi	r20, 0x7A	; 122
    3904:	54 e4       	ldi	r21, 0x44	; 68
    3906:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	fe 01       	movw	r30, r28
    3910:	e6 5b       	subi	r30, 0xB6	; 182
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 83       	st	Z, r24
    3916:	91 83       	std	Z+1, r25	; 0x01
    3918:	a2 83       	std	Z+2, r26	; 0x02
    391a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391c:	8e 01       	movw	r16, r28
    391e:	0a 5b       	subi	r16, 0xBA	; 186
    3920:	1f 4f       	sbci	r17, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	e6 5b       	subi	r30, 0xB6	; 182
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	60 81       	ld	r22, Z
    392a:	71 81       	ldd	r23, Z+1	; 0x01
    392c:	82 81       	ldd	r24, Z+2	; 0x02
    392e:	93 81       	ldd	r25, Z+3	; 0x03
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	4a ef       	ldi	r20, 0xFA	; 250
    3936:	54 e4       	ldi	r21, 0x44	; 68
    3938:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	f8 01       	movw	r30, r16
    3942:	80 83       	st	Z, r24
    3944:	91 83       	std	Z+1, r25	; 0x01
    3946:	a2 83       	std	Z+2, r26	; 0x02
    3948:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    394a:	fe 01       	movw	r30, r28
    394c:	ea 5b       	subi	r30, 0xBA	; 186
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e8       	ldi	r20, 0x80	; 128
    395e:	5f e3       	ldi	r21, 0x3F	; 63
    3960:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3964:	88 23       	and	r24, r24
    3966:	44 f4       	brge	.+16     	; 0x3978 <LCD_vidWriteCharctr_4bits+0x3bc>
		__ticks = 1;
    3968:	fe 01       	movw	r30, r28
    396a:	ec 5b       	subi	r30, 0xBC	; 188
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	64 c0       	rjmp	.+200    	; 0x3a40 <LCD_vidWriteCharctr_4bits+0x484>
	else if (__tmp > 65535)
    3978:	fe 01       	movw	r30, r28
    397a:	ea 5b       	subi	r30, 0xBA	; 186
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	60 81       	ld	r22, Z
    3980:	71 81       	ldd	r23, Z+1	; 0x01
    3982:	82 81       	ldd	r24, Z+2	; 0x02
    3984:	93 81       	ldd	r25, Z+3	; 0x03
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	0c f0       	brlt	.+2      	; 0x3998 <LCD_vidWriteCharctr_4bits+0x3dc>
    3996:	43 c0       	rjmp	.+134    	; 0x3a1e <LCD_vidWriteCharctr_4bits+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	fe 01       	movw	r30, r28
    399a:	e6 5b       	subi	r30, 0xB6	; 182
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	60 81       	ld	r22, Z
    39a0:	71 81       	ldd	r23, Z+1	; 0x01
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	8e 01       	movw	r16, r28
    39b8:	0c 5b       	subi	r16, 0xBC	; 188
    39ba:	1f 4f       	sbci	r17, 0xFF	; 255
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	f8 01       	movw	r30, r16
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	80 83       	st	Z, r24
    39ce:	1f c0       	rjmp	.+62     	; 0x3a0e <LCD_vidWriteCharctr_4bits+0x452>
    39d0:	fe 01       	movw	r30, r28
    39d2:	ee 5b       	subi	r30, 0xBE	; 190
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	88 ec       	ldi	r24, 0xC8	; 200
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39de:	fe 01       	movw	r30, r28
    39e0:	ee 5b       	subi	r30, 0xBE	; 190
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <LCD_vidWriteCharctr_4bits+0x42c>
    39ec:	fe 01       	movw	r30, r28
    39ee:	ee 5b       	subi	r30, 0xBE	; 190
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f6:	de 01       	movw	r26, r28
    39f8:	ac 5b       	subi	r26, 0xBC	; 188
    39fa:	bf 4f       	sbci	r27, 0xFF	; 255
    39fc:	fe 01       	movw	r30, r28
    39fe:	ec 5b       	subi	r30, 0xBC	; 188
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	11 96       	adiw	r26, 0x01	; 1
    3a0a:	9c 93       	st	X, r25
    3a0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ec 5b       	subi	r30, 0xBC	; 188
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	d1 f6       	brne	.-76     	; 0x39d0 <LCD_vidWriteCharctr_4bits+0x414>
    3a1c:	42 c0       	rjmp	.+132    	; 0x3aa2 <LCD_vidWriteCharctr_4bits+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1e:	8e 01       	movw	r16, r28
    3a20:	0c 5b       	subi	r16, 0xBC	; 188
    3a22:	1f 4f       	sbci	r17, 0xFF	; 255
    3a24:	fe 01       	movw	r30, r28
    3a26:	ea 5b       	subi	r30, 0xBA	; 186
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	80 83       	st	Z, r24
    3a40:	de 01       	movw	r26, r28
    3a42:	a0 5c       	subi	r26, 0xC0	; 192
    3a44:	bf 4f       	sbci	r27, 0xFF	; 255
    3a46:	fe 01       	movw	r30, r28
    3a48:	ec 5b       	subi	r30, 0xBC	; 188
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 81       	ld	r24, Z
    3a4e:	91 81       	ldd	r25, Z+1	; 0x01
    3a50:	11 96       	adiw	r26, 0x01	; 1
    3a52:	9c 93       	st	X, r25
    3a54:	8e 93       	st	-X, r24
    3a56:	fe 01       	movw	r30, r28
    3a58:	e0 5c       	subi	r30, 0xC0	; 192
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <LCD_vidWriteCharctr_4bits+0x4a4>
    3a64:	fe 01       	movw	r30, r28
    3a66:	e0 5c       	subi	r30, 0xC0	; 192
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
    3a6e:	19 c0       	rjmp	.+50     	; 0x3aa2 <LCD_vidWriteCharctr_4bits+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a70:	8e 01       	movw	r16, r28
    3a72:	02 5b       	subi	r16, 0xB2	; 178
    3a74:	1f 4f       	sbci	r17, 0xFF	; 255
    3a76:	fe 01       	movw	r30, r28
    3a78:	e1 5b       	subi	r30, 0xB1	; 177
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	60 81       	ld	r22, Z
    3a7e:	71 81       	ldd	r23, Z+1	; 0x01
    3a80:	82 81       	ldd	r24, Z+2	; 0x02
    3a82:	93 81       	ldd	r25, Z+3	; 0x03
    3a84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	80 83       	st	Z, r24
    3a90:	fe 01       	movw	r30, r28
    3a92:	e2 5b       	subi	r30, 0xB2	; 178
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	80 81       	ld	r24, Z
    3a98:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a9c:	8a 95       	dec	r24
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <LCD_vidWriteCharctr_4bits+0x4e0>
    3aa0:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	62 e0       	ldi	r22, 0x02	; 2
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ab2:	b2 e4       	ldi	r27, 0x42	; 66
    3ab4:	8b af       	std	Y+59, r24	; 0x3b
    3ab6:	9c af       	std	Y+60, r25	; 0x3c
    3ab8:	ad af       	std	Y+61, r26	; 0x3d
    3aba:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3abc:	6b ad       	ldd	r22, Y+59	; 0x3b
    3abe:	7c ad       	ldd	r23, Y+60	; 0x3c
    3ac0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ac2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ac4:	2b ea       	ldi	r18, 0xAB	; 171
    3ac6:	3a ea       	ldi	r19, 0xAA	; 170
    3ac8:	4a e2       	ldi	r20, 0x2A	; 42
    3aca:	50 e4       	ldi	r21, 0x40	; 64
    3acc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	8f ab       	std	Y+55, r24	; 0x37
    3ad6:	98 af       	std	Y+56, r25	; 0x38
    3ad8:	a9 af       	std	Y+57, r26	; 0x39
    3ada:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3adc:	6f a9       	ldd	r22, Y+55	; 0x37
    3ade:	78 ad       	ldd	r23, Y+56	; 0x38
    3ae0:	89 ad       	ldd	r24, Y+57	; 0x39
    3ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e8       	ldi	r20, 0x80	; 128
    3aea:	5f e3       	ldi	r21, 0x3F	; 63
    3aec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3af0:	88 23       	and	r24, r24
    3af2:	1c f4       	brge	.+6      	; 0x3afa <LCD_vidWriteCharctr_4bits+0x53e>
		__ticks = 1;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	8e ab       	std	Y+54, r24	; 0x36
    3af8:	91 c0       	rjmp	.+290    	; 0x3c1c <LCD_vidWriteCharctr_4bits+0x660>
	else if (__tmp > 255)
    3afa:	6f a9       	ldd	r22, Y+55	; 0x37
    3afc:	78 ad       	ldd	r23, Y+56	; 0x38
    3afe:	89 ad       	ldd	r24, Y+57	; 0x39
    3b00:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4f e7       	ldi	r20, 0x7F	; 127
    3b08:	53 e4       	ldi	r21, 0x43	; 67
    3b0a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3b0e:	18 16       	cp	r1, r24
    3b10:	0c f0       	brlt	.+2      	; 0x3b14 <LCD_vidWriteCharctr_4bits+0x558>
    3b12:	7b c0       	rjmp	.+246    	; 0x3c0a <LCD_vidWriteCharctr_4bits+0x64e>
	{
		_delay_ms(__us / 1000.0);
    3b14:	6b ad       	ldd	r22, Y+59	; 0x3b
    3b16:	7c ad       	ldd	r23, Y+60	; 0x3c
    3b18:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a e7       	ldi	r20, 0x7A	; 122
    3b22:	54 e4       	ldi	r21, 0x44	; 68
    3b24:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	8a ab       	std	Y+50, r24	; 0x32
    3b2e:	9b ab       	std	Y+51, r25	; 0x33
    3b30:	ac ab       	std	Y+52, r26	; 0x34
    3b32:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b34:	6a a9       	ldd	r22, Y+50	; 0x32
    3b36:	7b a9       	ldd	r23, Y+51	; 0x33
    3b38:	8c a9       	ldd	r24, Y+52	; 0x34
    3b3a:	9d a9       	ldd	r25, Y+53	; 0x35
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a ef       	ldi	r20, 0xFA	; 250
    3b42:	54 e4       	ldi	r21, 0x44	; 68
    3b44:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8e a7       	std	Y+46, r24	; 0x2e
    3b4e:	9f a7       	std	Y+47, r25	; 0x2f
    3b50:	a8 ab       	std	Y+48, r26	; 0x30
    3b52:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3b54:	6e a5       	ldd	r22, Y+46	; 0x2e
    3b56:	7f a5       	ldd	r23, Y+47	; 0x2f
    3b58:	88 a9       	ldd	r24, Y+48	; 0x30
    3b5a:	99 a9       	ldd	r25, Y+49	; 0x31
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <LCD_vidWriteCharctr_4bits+0x5ba>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9d a7       	std	Y+45, r25	; 0x2d
    3b72:	8c a7       	std	Y+44, r24	; 0x2c
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <LCD_vidWriteCharctr_4bits+0x638>
	else if (__tmp > 65535)
    3b76:	6e a5       	ldd	r22, Y+46	; 0x2e
    3b78:	7f a5       	ldd	r23, Y+47	; 0x2f
    3b7a:	88 a9       	ldd	r24, Y+48	; 0x30
    3b7c:	99 a9       	ldd	r25, Y+49	; 0x31
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	4c f5       	brge	.+82     	; 0x3be0 <LCD_vidWriteCharctr_4bits+0x624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8e:	6a a9       	ldd	r22, Y+50	; 0x32
    3b90:	7b a9       	ldd	r23, Y+51	; 0x33
    3b92:	8c a9       	ldd	r24, Y+52	; 0x34
    3b94:	9d a9       	ldd	r25, Y+53	; 0x35
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e2       	ldi	r20, 0x20	; 32
    3b9c:	51 e4       	ldi	r21, 0x41	; 65
    3b9e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9d a7       	std	Y+45, r25	; 0x2d
    3bb4:	8c a7       	std	Y+44, r24	; 0x2c
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <LCD_vidWriteCharctr_4bits+0x61a>
    3bb8:	88 ec       	ldi	r24, 0xC8	; 200
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9b a7       	std	Y+43, r25	; 0x2b
    3bbe:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bc0:	8a a5       	ldd	r24, Y+42	; 0x2a
    3bc2:	9b a5       	ldd	r25, Y+43	; 0x2b
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <LCD_vidWriteCharctr_4bits+0x608>
    3bc8:	9b a7       	std	Y+43, r25	; 0x2b
    3bca:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bcc:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bce:	9d a5       	ldd	r25, Y+45	; 0x2d
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	9d a7       	std	Y+45, r25	; 0x2d
    3bd4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bd8:	9d a5       	ldd	r25, Y+45	; 0x2d
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f7       	brne	.-38     	; 0x3bb8 <LCD_vidWriteCharctr_4bits+0x5fc>
    3bde:	24 c0       	rjmp	.+72     	; 0x3c28 <LCD_vidWriteCharctr_4bits+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be0:	6e a5       	ldd	r22, Y+46	; 0x2e
    3be2:	7f a5       	ldd	r23, Y+47	; 0x2f
    3be4:	88 a9       	ldd	r24, Y+48	; 0x30
    3be6:	99 a9       	ldd	r25, Y+49	; 0x31
    3be8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9d a7       	std	Y+45, r25	; 0x2d
    3bf2:	8c a7       	std	Y+44, r24	; 0x2c
    3bf4:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bf6:	9d a5       	ldd	r25, Y+45	; 0x2d
    3bf8:	99 a7       	std	Y+41, r25	; 0x29
    3bfa:	88 a7       	std	Y+40, r24	; 0x28
    3bfc:	88 a5       	ldd	r24, Y+40	; 0x28
    3bfe:	99 a5       	ldd	r25, Y+41	; 0x29
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <LCD_vidWriteCharctr_4bits+0x644>
    3c04:	99 a7       	std	Y+41, r25	; 0x29
    3c06:	88 a7       	std	Y+40, r24	; 0x28
    3c08:	0f c0       	rjmp	.+30     	; 0x3c28 <LCD_vidWriteCharctr_4bits+0x66c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c0a:	6f a9       	ldd	r22, Y+55	; 0x37
    3c0c:	78 ad       	ldd	r23, Y+56	; 0x38
    3c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c10:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c12:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	8e ab       	std	Y+54, r24	; 0x36
    3c1c:	8e a9       	ldd	r24, Y+54	; 0x36
    3c1e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c20:	8f a1       	ldd	r24, Y+39	; 0x27
    3c22:	8a 95       	dec	r24
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <LCD_vidWriteCharctr_4bits+0x666>
    3c26:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy & 0x0F) << 4));
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e1 59       	subi	r30, 0x91	; 145
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	88 2f       	mov	r24, r24
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	82 95       	swap	r24
    3c36:	92 95       	swap	r25
    3c38:	90 7f       	andi	r25, 0xF0	; 240
    3c3a:	98 27       	eor	r25, r24
    3c3c:	80 7f       	andi	r24, 0xF0	; 240
    3c3e:	98 27       	eor	r25, r24
    3c40:	98 2f       	mov	r25, r24
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	69 2f       	mov	r22, r25
    3c46:	0e 94 28 08 	call	0x1050	; 0x1050 <DIO_voidSetPortValue>
	//	_delay_us(1);

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    3c4a:	82 e0       	ldi	r24, 0x02	; 2
    3c4c:	62 e0       	ldi	r22, 0x02	; 2
    3c4e:	41 e0       	ldi	r20, 0x01	; 1
    3c50:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	a0 e8       	ldi	r26, 0x80	; 128
    3c5a:	bf e3       	ldi	r27, 0x3F	; 63
    3c5c:	8b a3       	std	Y+35, r24	; 0x23
    3c5e:	9c a3       	std	Y+36, r25	; 0x24
    3c60:	ad a3       	std	Y+37, r26	; 0x25
    3c62:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c64:	6b a1       	ldd	r22, Y+35	; 0x23
    3c66:	7c a1       	ldd	r23, Y+36	; 0x24
    3c68:	8d a1       	ldd	r24, Y+37	; 0x25
    3c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c6c:	2b ea       	ldi	r18, 0xAB	; 171
    3c6e:	3a ea       	ldi	r19, 0xAA	; 170
    3c70:	4a e2       	ldi	r20, 0x2A	; 42
    3c72:	50 e4       	ldi	r21, 0x40	; 64
    3c74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	8f 8f       	std	Y+31, r24	; 0x1f
    3c7e:	98 a3       	std	Y+32, r25	; 0x20
    3c80:	a9 a3       	std	Y+33, r26	; 0x21
    3c82:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3c84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3c86:	78 a1       	ldd	r23, Y+32	; 0x20
    3c88:	89 a1       	ldd	r24, Y+33	; 0x21
    3c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e8       	ldi	r20, 0x80	; 128
    3c92:	5f e3       	ldi	r21, 0x3F	; 63
    3c94:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3c98:	88 23       	and	r24, r24
    3c9a:	1c f4       	brge	.+6      	; 0x3ca2 <LCD_vidWriteCharctr_4bits+0x6e6>
		__ticks = 1;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	8e 8f       	std	Y+30, r24	; 0x1e
    3ca0:	91 c0       	rjmp	.+290    	; 0x3dc4 <LCD_vidWriteCharctr_4bits+0x808>
	else if (__tmp > 255)
    3ca2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3ca4:	78 a1       	ldd	r23, Y+32	; 0x20
    3ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	4f e7       	ldi	r20, 0x7F	; 127
    3cb0:	53 e4       	ldi	r21, 0x43	; 67
    3cb2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3cb6:	18 16       	cp	r1, r24
    3cb8:	0c f0       	brlt	.+2      	; 0x3cbc <LCD_vidWriteCharctr_4bits+0x700>
    3cba:	7b c0       	rjmp	.+246    	; 0x3db2 <LCD_vidWriteCharctr_4bits+0x7f6>
	{
		_delay_ms(__us / 1000.0);
    3cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a e7       	ldi	r20, 0x7A	; 122
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8a 8f       	std	Y+26, r24	; 0x1a
    3cd6:	9b 8f       	std	Y+27, r25	; 0x1b
    3cd8:	ac 8f       	std	Y+28, r26	; 0x1c
    3cda:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cdc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3cde:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3ce0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ce2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4a ef       	ldi	r20, 0xFA	; 250
    3cea:	54 e4       	ldi	r21, 0x44	; 68
    3cec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	8e 8b       	std	Y+22, r24	; 0x16
    3cf6:	9f 8b       	std	Y+23, r25	; 0x17
    3cf8:	a8 8f       	std	Y+24, r26	; 0x18
    3cfa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3cfc:	6e 89       	ldd	r22, Y+22	; 0x16
    3cfe:	7f 89       	ldd	r23, Y+23	; 0x17
    3d00:	88 8d       	ldd	r24, Y+24	; 0x18
    3d02:	99 8d       	ldd	r25, Y+25	; 0x19
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e8       	ldi	r20, 0x80	; 128
    3d0a:	5f e3       	ldi	r21, 0x3F	; 63
    3d0c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3d10:	88 23       	and	r24, r24
    3d12:	2c f4       	brge	.+10     	; 0x3d1e <LCD_vidWriteCharctr_4bits+0x762>
		__ticks = 1;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9d 8b       	std	Y+21, r25	; 0x15
    3d1a:	8c 8b       	std	Y+20, r24	; 0x14
    3d1c:	3f c0       	rjmp	.+126    	; 0x3d9c <LCD_vidWriteCharctr_4bits+0x7e0>
	else if (__tmp > 65535)
    3d1e:	6e 89       	ldd	r22, Y+22	; 0x16
    3d20:	7f 89       	ldd	r23, Y+23	; 0x17
    3d22:	88 8d       	ldd	r24, Y+24	; 0x18
    3d24:	99 8d       	ldd	r25, Y+25	; 0x19
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	3f ef       	ldi	r19, 0xFF	; 255
    3d2a:	4f e7       	ldi	r20, 0x7F	; 127
    3d2c:	57 e4       	ldi	r21, 0x47	; 71
    3d2e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3d32:	18 16       	cp	r1, r24
    3d34:	4c f5       	brge	.+82     	; 0x3d88 <LCD_vidWriteCharctr_4bits+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d36:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d38:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e2       	ldi	r20, 0x20	; 32
    3d44:	51 e4       	ldi	r21, 0x41	; 65
    3d46:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	9d 8b       	std	Y+21, r25	; 0x15
    3d5c:	8c 8b       	std	Y+20, r24	; 0x14
    3d5e:	0f c0       	rjmp	.+30     	; 0x3d7e <LCD_vidWriteCharctr_4bits+0x7c2>
    3d60:	88 ec       	ldi	r24, 0xC8	; 200
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	9b 8b       	std	Y+19, r25	; 0x13
    3d66:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d68:	8a 89       	ldd	r24, Y+18	; 0x12
    3d6a:	9b 89       	ldd	r25, Y+19	; 0x13
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <LCD_vidWriteCharctr_4bits+0x7b0>
    3d70:	9b 8b       	std	Y+19, r25	; 0x13
    3d72:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d74:	8c 89       	ldd	r24, Y+20	; 0x14
    3d76:	9d 89       	ldd	r25, Y+21	; 0x15
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	9d 8b       	std	Y+21, r25	; 0x15
    3d7c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7e:	8c 89       	ldd	r24, Y+20	; 0x14
    3d80:	9d 89       	ldd	r25, Y+21	; 0x15
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	69 f7       	brne	.-38     	; 0x3d60 <LCD_vidWriteCharctr_4bits+0x7a4>
    3d86:	24 c0       	rjmp	.+72     	; 0x3dd0 <LCD_vidWriteCharctr_4bits+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d88:	6e 89       	ldd	r22, Y+22	; 0x16
    3d8a:	7f 89       	ldd	r23, Y+23	; 0x17
    3d8c:	88 8d       	ldd	r24, Y+24	; 0x18
    3d8e:	99 8d       	ldd	r25, Y+25	; 0x19
    3d90:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9d 8b       	std	Y+21, r25	; 0x15
    3d9a:	8c 8b       	std	Y+20, r24	; 0x14
    3d9c:	8c 89       	ldd	r24, Y+20	; 0x14
    3d9e:	9d 89       	ldd	r25, Y+21	; 0x15
    3da0:	99 8b       	std	Y+17, r25	; 0x11
    3da2:	88 8b       	std	Y+16, r24	; 0x10
    3da4:	88 89       	ldd	r24, Y+16	; 0x10
    3da6:	99 89       	ldd	r25, Y+17	; 0x11
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <LCD_vidWriteCharctr_4bits+0x7ec>
    3dac:	99 8b       	std	Y+17, r25	; 0x11
    3dae:	88 8b       	std	Y+16, r24	; 0x10
    3db0:	0f c0       	rjmp	.+30     	; 0x3dd0 <LCD_vidWriteCharctr_4bits+0x814>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3db2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3db4:	78 a1       	ldd	r23, Y+32	; 0x20
    3db6:	89 a1       	ldd	r24, Y+33	; 0x21
    3db8:	9a a1       	ldd	r25, Y+34	; 0x22
    3dba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	8e 8f       	std	Y+30, r24	; 0x1e
    3dc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3dc6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dca:	8a 95       	dec	r24
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <LCD_vidWriteCharctr_4bits+0x80e>
    3dce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	62 e0       	ldi	r22, 0x02	; 2
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	a0 e0       	ldi	r26, 0x00	; 0
    3de0:	b0 e4       	ldi	r27, 0x40	; 64
    3de2:	8b 87       	std	Y+11, r24	; 0x0b
    3de4:	9c 87       	std	Y+12, r25	; 0x0c
    3de6:	ad 87       	std	Y+13, r26	; 0x0d
    3de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4a ef       	ldi	r20, 0xFA	; 250
    3df8:	54 e4       	ldi	r21, 0x44	; 68
    3dfa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	8f 83       	std	Y+7, r24	; 0x07
    3e04:	98 87       	std	Y+8, r25	; 0x08
    3e06:	a9 87       	std	Y+9, r26	; 0x09
    3e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e0c:	78 85       	ldd	r23, Y+8	; 0x08
    3e0e:	89 85       	ldd	r24, Y+9	; 0x09
    3e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e8       	ldi	r20, 0x80	; 128
    3e18:	5f e3       	ldi	r21, 0x3F	; 63
    3e1a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3e1e:	88 23       	and	r24, r24
    3e20:	2c f4       	brge	.+10     	; 0x3e2c <LCD_vidWriteCharctr_4bits+0x870>
		__ticks = 1;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	9e 83       	std	Y+6, r25	; 0x06
    3e28:	8d 83       	std	Y+5, r24	; 0x05
    3e2a:	3f c0       	rjmp	.+126    	; 0x3eaa <LCD_vidWriteCharctr_4bits+0x8ee>
	else if (__tmp > 65535)
    3e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e2e:	78 85       	ldd	r23, Y+8	; 0x08
    3e30:	89 85       	ldd	r24, Y+9	; 0x09
    3e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	3f ef       	ldi	r19, 0xFF	; 255
    3e38:	4f e7       	ldi	r20, 0x7F	; 127
    3e3a:	57 e4       	ldi	r21, 0x47	; 71
    3e3c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3e40:	18 16       	cp	r1, r24
    3e42:	4c f5       	brge	.+82     	; 0x3e96 <LCD_vidWriteCharctr_4bits+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e2       	ldi	r20, 0x20	; 32
    3e52:	51 e4       	ldi	r21, 0x41	; 65
    3e54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9e 83       	std	Y+6, r25	; 0x06
    3e6a:	8d 83       	std	Y+5, r24	; 0x05
    3e6c:	0f c0       	rjmp	.+30     	; 0x3e8c <LCD_vidWriteCharctr_4bits+0x8d0>
    3e6e:	88 ec       	ldi	r24, 0xC8	; 200
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	9c 83       	std	Y+4, r25	; 0x04
    3e74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e76:	8b 81       	ldd	r24, Y+3	; 0x03
    3e78:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <LCD_vidWriteCharctr_4bits+0x8be>
    3e7e:	9c 83       	std	Y+4, r25	; 0x04
    3e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e82:	8d 81       	ldd	r24, Y+5	; 0x05
    3e84:	9e 81       	ldd	r25, Y+6	; 0x06
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	69 f7       	brne	.-38     	; 0x3e6e <LCD_vidWriteCharctr_4bits+0x8b2>
    3e94:	14 c0       	rjmp	.+40     	; 0x3ebe <LCD_vidWriteCharctr_4bits+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9e 83       	std	Y+6, r25	; 0x06
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3eac:	9e 81       	ldd	r25, Y+6	; 0x06
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <LCD_vidWriteCharctr_4bits+0x8fa>
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3ebe:	c1 59       	subi	r28, 0x91	; 145
    3ec0:	df 4f       	sbci	r29, 0xFF	; 255
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	1f 91       	pop	r17
    3ed2:	0f 91       	pop	r16
    3ed4:	08 95       	ret

00003ed6 <LCD_vidInit_4bits>:




void LCD_vidInit_4bits(void)
{
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	6c 97       	sbiw	r28, 0x1c	; 28
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(DIO_u8_PORTD,0XFF);
    3eea:	83 e0       	ldi	r24, 0x03	; 3
    3eec:	6f ef       	ldi	r22, 0xFF	; 255
    3eee:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,0,DIO_u8_OUTPUT);
    3ef2:	82 e0       	ldi	r24, 0x02	; 2
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	41 e0       	ldi	r20, 0x01	; 1
    3ef8:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,1,DIO_u8_OUTPUT);
    3efc:	82 e0       	ldi	r24, 0x02	; 2
    3efe:	61 e0       	ldi	r22, 0x01	; 1
    3f00:	41 e0       	ldi	r20, 0x01	; 1
    3f02:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,2,DIO_u8_OUTPUT);
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	62 e0       	ldi	r22, 0x02	; 2
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	a0 e2       	ldi	r26, 0x20	; 32
    3f16:	b2 e4       	ldi	r27, 0x42	; 66
    3f18:	89 8f       	std	Y+25, r24	; 0x19
    3f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    3f1c:	ab 8f       	std	Y+27, r26	; 0x1b
    3f1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f20:	69 8d       	ldd	r22, Y+25	; 0x19
    3f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	4a ef       	ldi	r20, 0xFA	; 250
    3f2e:	54 e4       	ldi	r21, 0x44	; 68
    3f30:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	8d 8b       	std	Y+21, r24	; 0x15
    3f3a:	9e 8b       	std	Y+22, r25	; 0x16
    3f3c:	af 8b       	std	Y+23, r26	; 0x17
    3f3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f40:	6d 89       	ldd	r22, Y+21	; 0x15
    3f42:	7e 89       	ldd	r23, Y+22	; 0x16
    3f44:	8f 89       	ldd	r24, Y+23	; 0x17
    3f46:	98 8d       	ldd	r25, Y+24	; 0x18
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3f54:	88 23       	and	r24, r24
    3f56:	2c f4       	brge	.+10     	; 0x3f62 <LCD_vidInit_4bits+0x8c>
		__ticks = 1;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	9c 8b       	std	Y+20, r25	; 0x14
    3f5e:	8b 8b       	std	Y+19, r24	; 0x13
    3f60:	3f c0       	rjmp	.+126    	; 0x3fe0 <LCD_vidInit_4bits+0x10a>
	else if (__tmp > 65535)
    3f62:	6d 89       	ldd	r22, Y+21	; 0x15
    3f64:	7e 89       	ldd	r23, Y+22	; 0x16
    3f66:	8f 89       	ldd	r24, Y+23	; 0x17
    3f68:	98 8d       	ldd	r25, Y+24	; 0x18
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	3f ef       	ldi	r19, 0xFF	; 255
    3f6e:	4f e7       	ldi	r20, 0x7F	; 127
    3f70:	57 e4       	ldi	r21, 0x47	; 71
    3f72:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3f76:	18 16       	cp	r1, r24
    3f78:	4c f5       	brge	.+82     	; 0x3fcc <LCD_vidInit_4bits+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e2       	ldi	r20, 0x20	; 32
    3f88:	51 e4       	ldi	r21, 0x41	; 65
    3f8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	bc 01       	movw	r22, r24
    3f94:	cd 01       	movw	r24, r26
    3f96:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	9c 8b       	std	Y+20, r25	; 0x14
    3fa0:	8b 8b       	std	Y+19, r24	; 0x13
    3fa2:	0f c0       	rjmp	.+30     	; 0x3fc2 <LCD_vidInit_4bits+0xec>
    3fa4:	88 ec       	ldi	r24, 0xC8	; 200
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	9a 8b       	std	Y+18, r25	; 0x12
    3faa:	89 8b       	std	Y+17, r24	; 0x11
    3fac:	89 89       	ldd	r24, Y+17	; 0x11
    3fae:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <LCD_vidInit_4bits+0xda>
    3fb4:	9a 8b       	std	Y+18, r25	; 0x12
    3fb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fba:	9c 89       	ldd	r25, Y+20	; 0x14
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	9c 8b       	std	Y+20, r25	; 0x14
    3fc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	69 f7       	brne	.-38     	; 0x3fa4 <LCD_vidInit_4bits+0xce>
    3fca:	14 c0       	rjmp	.+40     	; 0x3ff4 <LCD_vidInit_4bits+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3fce:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9c 8b       	std	Y+20, r25	; 0x14
    3fde:	8b 8b       	std	Y+19, r24	; 0x13
    3fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe4:	98 8b       	std	Y+16, r25	; 0x10
    3fe6:	8f 87       	std	Y+15, r24	; 0x0f
    3fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fea:	98 89       	ldd	r25, Y+16	; 0x10
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	f1 f7       	brne	.-4      	; 0x3fec <LCD_vidInit_4bits+0x116>
    3ff0:	98 8b       	std	Y+16, r25	; 0x10
    3ff2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    3ffa:	88 e2       	ldi	r24, 0x28	; 40
    3ffc:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    4000:	8c e0       	ldi	r24, 0x0C	; 12
    4002:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    4006:	86 e0       	ldi	r24, 0x06	; 6
    4008:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	a0 e0       	ldi	r26, 0x00	; 0
    4018:	b0 e4       	ldi	r27, 0x40	; 64
    401a:	8b 87       	std	Y+11, r24	; 0x0b
    401c:	9c 87       	std	Y+12, r25	; 0x0c
    401e:	ad 87       	std	Y+13, r26	; 0x0d
    4020:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4022:	6b 85       	ldd	r22, Y+11	; 0x0b
    4024:	7c 85       	ldd	r23, Y+12	; 0x0c
    4026:	8d 85       	ldd	r24, Y+13	; 0x0d
    4028:	9e 85       	ldd	r25, Y+14	; 0x0e
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	4a ef       	ldi	r20, 0xFA	; 250
    4030:	54 e4       	ldi	r21, 0x44	; 68
    4032:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	8f 83       	std	Y+7, r24	; 0x07
    403c:	98 87       	std	Y+8, r25	; 0x08
    403e:	a9 87       	std	Y+9, r26	; 0x09
    4040:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4042:	6f 81       	ldd	r22, Y+7	; 0x07
    4044:	78 85       	ldd	r23, Y+8	; 0x08
    4046:	89 85       	ldd	r24, Y+9	; 0x09
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e8       	ldi	r20, 0x80	; 128
    4050:	5f e3       	ldi	r21, 0x3F	; 63
    4052:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4056:	88 23       	and	r24, r24
    4058:	2c f4       	brge	.+10     	; 0x4064 <LCD_vidInit_4bits+0x18e>
		__ticks = 1;
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	9e 83       	std	Y+6, r25	; 0x06
    4060:	8d 83       	std	Y+5, r24	; 0x05
    4062:	3f c0       	rjmp	.+126    	; 0x40e2 <LCD_vidInit_4bits+0x20c>
	else if (__tmp > 65535)
    4064:	6f 81       	ldd	r22, Y+7	; 0x07
    4066:	78 85       	ldd	r23, Y+8	; 0x08
    4068:	89 85       	ldd	r24, Y+9	; 0x09
    406a:	9a 85       	ldd	r25, Y+10	; 0x0a
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	3f ef       	ldi	r19, 0xFF	; 255
    4070:	4f e7       	ldi	r20, 0x7F	; 127
    4072:	57 e4       	ldi	r21, 0x47	; 71
    4074:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4078:	18 16       	cp	r1, r24
    407a:	4c f5       	brge	.+82     	; 0x40ce <LCD_vidInit_4bits+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    407c:	6b 85       	ldd	r22, Y+11	; 0x0b
    407e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4080:	8d 85       	ldd	r24, Y+13	; 0x0d
    4082:	9e 85       	ldd	r25, Y+14	; 0x0e
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e2       	ldi	r20, 0x20	; 32
    408a:	51 e4       	ldi	r21, 0x41	; 65
    408c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	bc 01       	movw	r22, r24
    4096:	cd 01       	movw	r24, r26
    4098:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	9e 83       	std	Y+6, r25	; 0x06
    40a2:	8d 83       	std	Y+5, r24	; 0x05
    40a4:	0f c0       	rjmp	.+30     	; 0x40c4 <LCD_vidInit_4bits+0x1ee>
    40a6:	88 ec       	ldi	r24, 0xC8	; 200
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	9c 83       	std	Y+4, r25	; 0x04
    40ac:	8b 83       	std	Y+3, r24	; 0x03
    40ae:	8b 81       	ldd	r24, Y+3	; 0x03
    40b0:	9c 81       	ldd	r25, Y+4	; 0x04
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	f1 f7       	brne	.-4      	; 0x40b2 <LCD_vidInit_4bits+0x1dc>
    40b6:	9c 83       	std	Y+4, r25	; 0x04
    40b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ba:	8d 81       	ldd	r24, Y+5	; 0x05
    40bc:	9e 81       	ldd	r25, Y+6	; 0x06
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	9e 83       	std	Y+6, r25	; 0x06
    40c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c4:	8d 81       	ldd	r24, Y+5	; 0x05
    40c6:	9e 81       	ldd	r25, Y+6	; 0x06
    40c8:	00 97       	sbiw	r24, 0x00	; 0
    40ca:	69 f7       	brne	.-38     	; 0x40a6 <LCD_vidInit_4bits+0x1d0>
    40cc:	14 c0       	rjmp	.+40     	; 0x40f6 <LCD_vidInit_4bits+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ce:	6f 81       	ldd	r22, Y+7	; 0x07
    40d0:	78 85       	ldd	r23, Y+8	; 0x08
    40d2:	89 85       	ldd	r24, Y+9	; 0x09
    40d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	9e 83       	std	Y+6, r25	; 0x06
    40e0:	8d 83       	std	Y+5, r24	; 0x05
    40e2:	8d 81       	ldd	r24, Y+5	; 0x05
    40e4:	9e 81       	ldd	r25, Y+6	; 0x06
    40e6:	9a 83       	std	Y+2, r25	; 0x02
    40e8:	89 83       	std	Y+1, r24	; 0x01
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	9a 81       	ldd	r25, Y+2	; 0x02
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	f1 f7       	brne	.-4      	; 0x40ee <LCD_vidInit_4bits+0x218>
    40f2:	9a 83       	std	Y+2, r25	; 0x02
    40f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}
    40f6:	6c 96       	adiw	r28, 0x1c	; 28
    40f8:	0f b6       	in	r0, 0x3f	; 63
    40fa:	f8 94       	cli
    40fc:	de bf       	out	0x3e, r29	; 62
    40fe:	0f be       	out	0x3f, r0	; 63
    4100:	cd bf       	out	0x3d, r28	; 61
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	08 95       	ret

00004108 <LCD_vidWriteNumber_8bits>:
void LCD_vidWriteNumber_8bits(u16 Copy_u16Number)
{
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	2d 97       	sbiw	r28, 0x0d	; 13
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	f8 94       	cli
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	9d 87       	std	Y+13, r25	; 0x0d
    411e:	8c 87       	std	Y+12, r24	; 0x0c
    char buffer[10];
    u8 i = 0;
    4120:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u16Number == 0)
    4122:	8c 85       	ldd	r24, Y+12	; 0x0c
    4124:	9d 85       	ldd	r25, Y+13	; 0x0d
    4126:	00 97       	sbiw	r24, 0x00	; 0
    4128:	11 f5       	brne	.+68     	; 0x416e <LCD_vidWriteNumber_8bits+0x66>
    {
    	LCD_vidWriteCharctr('0');
    412a:	80 e3       	ldi	r24, 0x30	; 48
    412c:	0e 94 36 19 	call	0x326c	; 0x326c <LCD_vidWriteCharctr>
    4130:	34 c0       	rjmp	.+104    	; 0x419a <LCD_vidWriteNumber_8bits+0x92>
        return;
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	e8 2f       	mov	r30, r24
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	8c 85       	ldd	r24, Y+12	; 0x0c
    413a:	9d 85       	ldd	r25, Y+13	; 0x0d
    413c:	2a e0       	ldi	r18, 0x0A	; 10
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	b9 01       	movw	r22, r18
    4142:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    4146:	28 2f       	mov	r18, r24
    4148:	20 5d       	subi	r18, 0xD0	; 208
    414a:	ce 01       	movw	r24, r28
    414c:	02 96       	adiw	r24, 0x02	; 2
    414e:	e8 0f       	add	r30, r24
    4150:	f9 1f       	adc	r31, r25
    4152:	20 83       	st	Z, r18
        Copy_u16Number /= 10;
    4154:	8c 85       	ldd	r24, Y+12	; 0x0c
    4156:	9d 85       	ldd	r25, Y+13	; 0x0d
    4158:	2a e0       	ldi	r18, 0x0A	; 10
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	b9 01       	movw	r22, r18
    415e:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    4162:	cb 01       	movw	r24, r22
    4164:	9d 87       	std	Y+13, r25	; 0x0d
    4166:	8c 87       	std	Y+12, r24	; 0x0c
        i++;
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	8f 5f       	subi	r24, 0xFF	; 255
    416c:	89 83       	std	Y+1, r24	; 0x01
    {
    	LCD_vidWriteCharctr('0');
        return;
    }

    while (Copy_u16Number > 0)
    416e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4170:	9d 85       	ldd	r25, Y+13	; 0x0d
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	f1 f6       	brne	.-68     	; 0x4132 <LCD_vidWriteNumber_8bits+0x2a>
    4176:	0e c0       	rjmp	.+28     	; 0x4194 <LCD_vidWriteNumber_8bits+0x8c>
        i++;
    }

    while (i > 0)
    {
        i--;
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	81 50       	subi	r24, 0x01	; 1
    417c:	89 83       	std	Y+1, r24	; 0x01
        LCD_vidWriteCharctr(buffer[i]);
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	28 2f       	mov	r18, r24
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	ce 01       	movw	r24, r28
    4186:	02 96       	adiw	r24, 0x02	; 2
    4188:	fc 01       	movw	r30, r24
    418a:	e2 0f       	add	r30, r18
    418c:	f3 1f       	adc	r31, r19
    418e:	80 81       	ld	r24, Z
    4190:	0e 94 36 19 	call	0x326c	; 0x326c <LCD_vidWriteCharctr>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    4194:	89 81       	ldd	r24, Y+1	; 0x01
    4196:	88 23       	and	r24, r24
    4198:	79 f7       	brne	.-34     	; 0x4178 <LCD_vidWriteNumber_8bits+0x70>
    {
        i--;
        LCD_vidWriteCharctr(buffer[i]);
    }
}
    419a:	2d 96       	adiw	r28, 0x0d	; 13
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	cf 91       	pop	r28
    41a8:	df 91       	pop	r29
    41aa:	08 95       	ret

000041ac <LCD_vidWriteNumber_4bits>:

void LCD_vidWriteNumber_4bits(u16 Copy_u16Number)
{
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    41b4:	2d 97       	sbiw	r28, 0x0d	; 13
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	cd bf       	out	0x3d, r28	; 61
    41c0:	9d 87       	std	Y+13, r25	; 0x0d
    41c2:	8c 87       	std	Y+12, r24	; 0x0c
    char buffer[10];
    u8 i = 0;
    41c4:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u16Number == 0)
    41c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	11 f5       	brne	.+68     	; 0x4212 <LCD_vidWriteNumber_4bits+0x66>
    {
        LCD_Char('0');
    41ce:	80 e3       	ldi	r24, 0x30	; 48
    41d0:	0e 94 a0 24 	call	0x4940	; 0x4940 <LCD_Char>
    41d4:	34 c0       	rjmp	.+104    	; 0x423e <LCD_vidWriteNumber_4bits+0x92>
        return;
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	e8 2f       	mov	r30, r24
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    41de:	9d 85       	ldd	r25, Y+13	; 0x0d
    41e0:	2a e0       	ldi	r18, 0x0A	; 10
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	b9 01       	movw	r22, r18
    41e6:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    41ea:	28 2f       	mov	r18, r24
    41ec:	20 5d       	subi	r18, 0xD0	; 208
    41ee:	ce 01       	movw	r24, r28
    41f0:	02 96       	adiw	r24, 0x02	; 2
    41f2:	e8 0f       	add	r30, r24
    41f4:	f9 1f       	adc	r31, r25
    41f6:	20 83       	st	Z, r18
        Copy_u16Number /= 10;
    41f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    41fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    41fc:	2a e0       	ldi	r18, 0x0A	; 10
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	b9 01       	movw	r22, r18
    4202:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    4206:	cb 01       	movw	r24, r22
    4208:	9d 87       	std	Y+13, r25	; 0x0d
    420a:	8c 87       	std	Y+12, r24	; 0x0c
        i++;
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	8f 5f       	subi	r24, 0xFF	; 255
    4210:	89 83       	std	Y+1, r24	; 0x01
    {
        LCD_Char('0');
        return;
    }

    while (Copy_u16Number > 0)
    4212:	8c 85       	ldd	r24, Y+12	; 0x0c
    4214:	9d 85       	ldd	r25, Y+13	; 0x0d
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	f1 f6       	brne	.-68     	; 0x41d6 <LCD_vidWriteNumber_4bits+0x2a>
    421a:	0e c0       	rjmp	.+28     	; 0x4238 <LCD_vidWriteNumber_4bits+0x8c>
        i++;
    }

    while (i > 0)
    {
        i--;
    421c:	89 81       	ldd	r24, Y+1	; 0x01
    421e:	81 50       	subi	r24, 0x01	; 1
    4220:	89 83       	std	Y+1, r24	; 0x01
        LCD_Char(buffer[i]);
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	28 2f       	mov	r18, r24
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	ce 01       	movw	r24, r28
    422a:	02 96       	adiw	r24, 0x02	; 2
    422c:	fc 01       	movw	r30, r24
    422e:	e2 0f       	add	r30, r18
    4230:	f3 1f       	adc	r31, r19
    4232:	80 81       	ld	r24, Z
    4234:	0e 94 a0 24 	call	0x4940	; 0x4940 <LCD_Char>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	88 23       	and	r24, r24
    423c:	79 f7       	brne	.-34     	; 0x421c <LCD_vidWriteNumber_4bits+0x70>
    {
        i--;
        LCD_Char(buffer[i]);
    }
}
    423e:	2d 96       	adiw	r28, 0x0d	; 13
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <LCD_Command>:

void LCD_Command( unsigned char cmnd )
{
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	df 93       	push	r29
    4256:	cf 93       	push	r28
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	c7 55       	subi	r28, 0x57	; 87
    425e:	d0 40       	sbci	r29, 0x00	; 0
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	fe 01       	movw	r30, r28
    426c:	e9 5a       	subi	r30, 0xA9	; 169
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	80 83       	st	Z, r24

	PORTC &= ~ (1<<RS);		/* RS=0, command reg. */
    4272:	a5 e3       	ldi	r26, 0x35	; 53
    4274:	b0 e0       	ldi	r27, 0x00	; 0
    4276:	e5 e3       	ldi	r30, 0x35	; 53
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	80 81       	ld	r24, Z
    427c:	8e 7f       	andi	r24, 0xFE	; 254
    427e:	8c 93       	st	X, r24
	PORTC &= ~ (1<<1);     /*RW -> 0 Writing */
    4280:	a5 e3       	ldi	r26, 0x35	; 53
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	e5 e3       	ldi	r30, 0x35	; 53
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	8d 7f       	andi	r24, 0xFD	; 253
    428c:	8c 93       	st	X, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    428e:	a8 e3       	ldi	r26, 0x38	; 56
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	e8 e3       	ldi	r30, 0x38	; 56
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	80 81       	ld	r24, Z
    4298:	98 2f       	mov	r25, r24
    429a:	9f 70       	andi	r25, 0x0F	; 15
    429c:	fe 01       	movw	r30, r28
    429e:	e9 5a       	subi	r30, 0xA9	; 169
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	80 81       	ld	r24, Z
    42a4:	80 7f       	andi	r24, 0xF0	; 240
    42a6:	89 2b       	or	r24, r25
    42a8:	8c 93       	st	X, r24

	PORTC |= (1<<EN);		/* Enable pulse */
    42aa:	a5 e3       	ldi	r26, 0x35	; 53
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	e5 e3       	ldi	r30, 0x35	; 53
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	84 60       	ori	r24, 0x04	; 4
    42b6:	8c 93       	st	X, r24
    42b8:	fe 01       	movw	r30, r28
    42ba:	ed 5a       	subi	r30, 0xAD	; 173
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	a0 e8       	ldi	r26, 0x80	; 128
    42c4:	bf e3       	ldi	r27, 0x3F	; 63
    42c6:	80 83       	st	Z, r24
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	a2 83       	std	Z+2, r26	; 0x02
    42cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42ce:	8e 01       	movw	r16, r28
    42d0:	01 5b       	subi	r16, 0xB1	; 177
    42d2:	1f 4f       	sbci	r17, 0xFF	; 255
    42d4:	fe 01       	movw	r30, r28
    42d6:	ed 5a       	subi	r30, 0xAD	; 173
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	2b ea       	ldi	r18, 0xAB	; 171
    42e4:	3a ea       	ldi	r19, 0xAA	; 170
    42e6:	4a e2       	ldi	r20, 0x2A	; 42
    42e8:	50 e4       	ldi	r21, 0x40	; 64
    42ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	f8 01       	movw	r30, r16
    42f4:	80 83       	st	Z, r24
    42f6:	91 83       	std	Z+1, r25	; 0x01
    42f8:	a2 83       	std	Z+2, r26	; 0x02
    42fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42fc:	fe 01       	movw	r30, r28
    42fe:	e1 5b       	subi	r30, 0xB1	; 177
    4300:	ff 4f       	sbci	r31, 0xFF	; 255
    4302:	60 81       	ld	r22, Z
    4304:	71 81       	ldd	r23, Z+1	; 0x01
    4306:	82 81       	ldd	r24, Z+2	; 0x02
    4308:	93 81       	ldd	r25, Z+3	; 0x03
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e8       	ldi	r20, 0x80	; 128
    4310:	5f e3       	ldi	r21, 0x3F	; 63
    4312:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4316:	88 23       	and	r24, r24
    4318:	34 f4       	brge	.+12     	; 0x4326 <LCD_Command+0xd6>
		__ticks = 1;
    431a:	fe 01       	movw	r30, r28
    431c:	e2 5b       	subi	r30, 0xB2	; 178
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	80 83       	st	Z, r24
    4324:	e0 c0       	rjmp	.+448    	; 0x44e6 <LCD_Command+0x296>
	else if (__tmp > 255)
    4326:	fe 01       	movw	r30, r28
    4328:	e1 5b       	subi	r30, 0xB1	; 177
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	60 81       	ld	r22, Z
    432e:	71 81       	ldd	r23, Z+1	; 0x01
    4330:	82 81       	ldd	r24, Z+2	; 0x02
    4332:	93 81       	ldd	r25, Z+3	; 0x03
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	4f e7       	ldi	r20, 0x7F	; 127
    433a:	53 e4       	ldi	r21, 0x43	; 67
    433c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4340:	18 16       	cp	r1, r24
    4342:	0c f0       	brlt	.+2      	; 0x4346 <LCD_Command+0xf6>
    4344:	c0 c0       	rjmp	.+384    	; 0x44c6 <LCD_Command+0x276>
	{
		_delay_ms(__us / 1000.0);
    4346:	fe 01       	movw	r30, r28
    4348:	ed 5a       	subi	r30, 0xAD	; 173
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	82 81       	ldd	r24, Z+2	; 0x02
    4352:	93 81       	ldd	r25, Z+3	; 0x03
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	4a e7       	ldi	r20, 0x7A	; 122
    435a:	54 e4       	ldi	r21, 0x44	; 68
    435c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	fe 01       	movw	r30, r28
    4366:	e6 5b       	subi	r30, 0xB6	; 182
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	80 83       	st	Z, r24
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	a2 83       	std	Z+2, r26	; 0x02
    4370:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4372:	8e 01       	movw	r16, r28
    4374:	0a 5b       	subi	r16, 0xBA	; 186
    4376:	1f 4f       	sbci	r17, 0xFF	; 255
    4378:	fe 01       	movw	r30, r28
    437a:	e6 5b       	subi	r30, 0xB6	; 182
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	60 81       	ld	r22, Z
    4380:	71 81       	ldd	r23, Z+1	; 0x01
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	4a ef       	ldi	r20, 0xFA	; 250
    438c:	54 e4       	ldi	r21, 0x44	; 68
    438e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	f8 01       	movw	r30, r16
    4398:	80 83       	st	Z, r24
    439a:	91 83       	std	Z+1, r25	; 0x01
    439c:	a2 83       	std	Z+2, r26	; 0x02
    439e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43a0:	fe 01       	movw	r30, r28
    43a2:	ea 5b       	subi	r30, 0xBA	; 186
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	60 81       	ld	r22, Z
    43a8:	71 81       	ldd	r23, Z+1	; 0x01
    43aa:	82 81       	ldd	r24, Z+2	; 0x02
    43ac:	93 81       	ldd	r25, Z+3	; 0x03
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e8       	ldi	r20, 0x80	; 128
    43b4:	5f e3       	ldi	r21, 0x3F	; 63
    43b6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    43ba:	88 23       	and	r24, r24
    43bc:	44 f4       	brge	.+16     	; 0x43ce <LCD_Command+0x17e>
		__ticks = 1;
    43be:	fe 01       	movw	r30, r28
    43c0:	ec 5b       	subi	r30, 0xBC	; 188
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	91 83       	std	Z+1, r25	; 0x01
    43ca:	80 83       	st	Z, r24
    43cc:	64 c0       	rjmp	.+200    	; 0x4496 <LCD_Command+0x246>
	else if (__tmp > 65535)
    43ce:	fe 01       	movw	r30, r28
    43d0:	ea 5b       	subi	r30, 0xBA	; 186
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	60 81       	ld	r22, Z
    43d6:	71 81       	ldd	r23, Z+1	; 0x01
    43d8:	82 81       	ldd	r24, Z+2	; 0x02
    43da:	93 81       	ldd	r25, Z+3	; 0x03
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	3f ef       	ldi	r19, 0xFF	; 255
    43e0:	4f e7       	ldi	r20, 0x7F	; 127
    43e2:	57 e4       	ldi	r21, 0x47	; 71
    43e4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    43e8:	18 16       	cp	r1, r24
    43ea:	0c f0       	brlt	.+2      	; 0x43ee <LCD_Command+0x19e>
    43ec:	43 c0       	rjmp	.+134    	; 0x4474 <LCD_Command+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ee:	fe 01       	movw	r30, r28
    43f0:	e6 5b       	subi	r30, 0xB6	; 182
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e2       	ldi	r20, 0x20	; 32
    4402:	51 e4       	ldi	r21, 0x41	; 65
    4404:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	8e 01       	movw	r16, r28
    440e:	0c 5b       	subi	r16, 0xBC	; 188
    4410:	1f 4f       	sbci	r17, 0xFF	; 255
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	f8 01       	movw	r30, r16
    4420:	91 83       	std	Z+1, r25	; 0x01
    4422:	80 83       	st	Z, r24
    4424:	1f c0       	rjmp	.+62     	; 0x4464 <LCD_Command+0x214>
    4426:	fe 01       	movw	r30, r28
    4428:	ee 5b       	subi	r30, 0xBE	; 190
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	88 ec       	ldi	r24, 0xC8	; 200
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	91 83       	std	Z+1, r25	; 0x01
    4432:	80 83       	st	Z, r24
    4434:	fe 01       	movw	r30, r28
    4436:	ee 5b       	subi	r30, 0xBE	; 190
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <LCD_Command+0x1ee>
    4442:	fe 01       	movw	r30, r28
    4444:	ee 5b       	subi	r30, 0xBE	; 190
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444c:	de 01       	movw	r26, r28
    444e:	ac 5b       	subi	r26, 0xBC	; 188
    4450:	bf 4f       	sbci	r27, 0xFF	; 255
    4452:	fe 01       	movw	r30, r28
    4454:	ec 5b       	subi	r30, 0xBC	; 188
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	80 81       	ld	r24, Z
    445a:	91 81       	ldd	r25, Z+1	; 0x01
    445c:	01 97       	sbiw	r24, 0x01	; 1
    445e:	11 96       	adiw	r26, 0x01	; 1
    4460:	9c 93       	st	X, r25
    4462:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4464:	fe 01       	movw	r30, r28
    4466:	ec 5b       	subi	r30, 0xBC	; 188
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	80 81       	ld	r24, Z
    446c:	91 81       	ldd	r25, Z+1	; 0x01
    446e:	00 97       	sbiw	r24, 0x00	; 0
    4470:	d1 f6       	brne	.-76     	; 0x4426 <LCD_Command+0x1d6>
    4472:	42 c0       	rjmp	.+132    	; 0x44f8 <LCD_Command+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4474:	8e 01       	movw	r16, r28
    4476:	0c 5b       	subi	r16, 0xBC	; 188
    4478:	1f 4f       	sbci	r17, 0xFF	; 255
    447a:	fe 01       	movw	r30, r28
    447c:	ea 5b       	subi	r30, 0xBA	; 186
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	60 81       	ld	r22, Z
    4482:	71 81       	ldd	r23, Z+1	; 0x01
    4484:	82 81       	ldd	r24, Z+2	; 0x02
    4486:	93 81       	ldd	r25, Z+3	; 0x03
    4488:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	f8 01       	movw	r30, r16
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
    4496:	de 01       	movw	r26, r28
    4498:	a0 5c       	subi	r26, 0xC0	; 192
    449a:	bf 4f       	sbci	r27, 0xFF	; 255
    449c:	fe 01       	movw	r30, r28
    449e:	ec 5b       	subi	r30, 0xBC	; 188
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 81       	ld	r24, Z
    44a4:	91 81       	ldd	r25, Z+1	; 0x01
    44a6:	11 96       	adiw	r26, 0x01	; 1
    44a8:	9c 93       	st	X, r25
    44aa:	8e 93       	st	-X, r24
    44ac:	fe 01       	movw	r30, r28
    44ae:	e0 5c       	subi	r30, 0xC0	; 192
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	80 81       	ld	r24, Z
    44b4:	91 81       	ldd	r25, Z+1	; 0x01
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	f1 f7       	brne	.-4      	; 0x44b6 <LCD_Command+0x266>
    44ba:	fe 01       	movw	r30, r28
    44bc:	e0 5c       	subi	r30, 0xC0	; 192
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	91 83       	std	Z+1, r25	; 0x01
    44c2:	80 83       	st	Z, r24
    44c4:	19 c0       	rjmp	.+50     	; 0x44f8 <LCD_Command+0x2a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44c6:	8e 01       	movw	r16, r28
    44c8:	02 5b       	subi	r16, 0xB2	; 178
    44ca:	1f 4f       	sbci	r17, 0xFF	; 255
    44cc:	fe 01       	movw	r30, r28
    44ce:	e1 5b       	subi	r30, 0xB1	; 177
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	60 81       	ld	r22, Z
    44d4:	71 81       	ldd	r23, Z+1	; 0x01
    44d6:	82 81       	ldd	r24, Z+2	; 0x02
    44d8:	93 81       	ldd	r25, Z+3	; 0x03
    44da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	f8 01       	movw	r30, r16
    44e4:	80 83       	st	Z, r24
    44e6:	fe 01       	movw	r30, r28
    44e8:	e2 5b       	subi	r30, 0xB2	; 178
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	80 81       	ld	r24, Z
    44ee:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    44f2:	8a 95       	dec	r24
    44f4:	f1 f7       	brne	.-4      	; 0x44f2 <LCD_Command+0x2a2>
    44f6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    44f8:	a5 e3       	ldi	r26, 0x35	; 53
    44fa:	b0 e0       	ldi	r27, 0x00	; 0
    44fc:	e5 e3       	ldi	r30, 0x35	; 53
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	80 81       	ld	r24, Z
    4502:	8b 7f       	andi	r24, 0xFB	; 251
    4504:	8c 93       	st	X, r24
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	a8 e4       	ldi	r26, 0x48	; 72
    450c:	b3 e4       	ldi	r27, 0x43	; 67
    450e:	8b af       	std	Y+59, r24	; 0x3b
    4510:	9c af       	std	Y+60, r25	; 0x3c
    4512:	ad af       	std	Y+61, r26	; 0x3d
    4514:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4516:	6b ad       	ldd	r22, Y+59	; 0x3b
    4518:	7c ad       	ldd	r23, Y+60	; 0x3c
    451a:	8d ad       	ldd	r24, Y+61	; 0x3d
    451c:	9e ad       	ldd	r25, Y+62	; 0x3e
    451e:	2b ea       	ldi	r18, 0xAB	; 171
    4520:	3a ea       	ldi	r19, 0xAA	; 170
    4522:	4a e2       	ldi	r20, 0x2A	; 42
    4524:	50 e4       	ldi	r21, 0x40	; 64
    4526:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
    452e:	8f ab       	std	Y+55, r24	; 0x37
    4530:	98 af       	std	Y+56, r25	; 0x38
    4532:	a9 af       	std	Y+57, r26	; 0x39
    4534:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4536:	6f a9       	ldd	r22, Y+55	; 0x37
    4538:	78 ad       	ldd	r23, Y+56	; 0x38
    453a:	89 ad       	ldd	r24, Y+57	; 0x39
    453c:	9a ad       	ldd	r25, Y+58	; 0x3a
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e8       	ldi	r20, 0x80	; 128
    4544:	5f e3       	ldi	r21, 0x3F	; 63
    4546:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    454a:	88 23       	and	r24, r24
    454c:	1c f4       	brge	.+6      	; 0x4554 <LCD_Command+0x304>
		__ticks = 1;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	8e ab       	std	Y+54, r24	; 0x36
    4552:	91 c0       	rjmp	.+290    	; 0x4676 <LCD_Command+0x426>
	else if (__tmp > 255)
    4554:	6f a9       	ldd	r22, Y+55	; 0x37
    4556:	78 ad       	ldd	r23, Y+56	; 0x38
    4558:	89 ad       	ldd	r24, Y+57	; 0x39
    455a:	9a ad       	ldd	r25, Y+58	; 0x3a
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	4f e7       	ldi	r20, 0x7F	; 127
    4562:	53 e4       	ldi	r21, 0x43	; 67
    4564:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4568:	18 16       	cp	r1, r24
    456a:	0c f0       	brlt	.+2      	; 0x456e <LCD_Command+0x31e>
    456c:	7b c0       	rjmp	.+246    	; 0x4664 <LCD_Command+0x414>
	{
		_delay_ms(__us / 1000.0);
    456e:	6b ad       	ldd	r22, Y+59	; 0x3b
    4570:	7c ad       	ldd	r23, Y+60	; 0x3c
    4572:	8d ad       	ldd	r24, Y+61	; 0x3d
    4574:	9e ad       	ldd	r25, Y+62	; 0x3e
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	4a e7       	ldi	r20, 0x7A	; 122
    457c:	54 e4       	ldi	r21, 0x44	; 68
    457e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	8a ab       	std	Y+50, r24	; 0x32
    4588:	9b ab       	std	Y+51, r25	; 0x33
    458a:	ac ab       	std	Y+52, r26	; 0x34
    458c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    458e:	6a a9       	ldd	r22, Y+50	; 0x32
    4590:	7b a9       	ldd	r23, Y+51	; 0x33
    4592:	8c a9       	ldd	r24, Y+52	; 0x34
    4594:	9d a9       	ldd	r25, Y+53	; 0x35
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	4a ef       	ldi	r20, 0xFA	; 250
    459c:	54 e4       	ldi	r21, 0x44	; 68
    459e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	8e a7       	std	Y+46, r24	; 0x2e
    45a8:	9f a7       	std	Y+47, r25	; 0x2f
    45aa:	a8 ab       	std	Y+48, r26	; 0x30
    45ac:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    45ae:	6e a5       	ldd	r22, Y+46	; 0x2e
    45b0:	7f a5       	ldd	r23, Y+47	; 0x2f
    45b2:	88 a9       	ldd	r24, Y+48	; 0x30
    45b4:	99 a9       	ldd	r25, Y+49	; 0x31
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e8       	ldi	r20, 0x80	; 128
    45bc:	5f e3       	ldi	r21, 0x3F	; 63
    45be:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    45c2:	88 23       	and	r24, r24
    45c4:	2c f4       	brge	.+10     	; 0x45d0 <LCD_Command+0x380>
		__ticks = 1;
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	9d a7       	std	Y+45, r25	; 0x2d
    45cc:	8c a7       	std	Y+44, r24	; 0x2c
    45ce:	3f c0       	rjmp	.+126    	; 0x464e <LCD_Command+0x3fe>
	else if (__tmp > 65535)
    45d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    45d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    45d4:	88 a9       	ldd	r24, Y+48	; 0x30
    45d6:	99 a9       	ldd	r25, Y+49	; 0x31
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	3f ef       	ldi	r19, 0xFF	; 255
    45dc:	4f e7       	ldi	r20, 0x7F	; 127
    45de:	57 e4       	ldi	r21, 0x47	; 71
    45e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    45e4:	18 16       	cp	r1, r24
    45e6:	4c f5       	brge	.+82     	; 0x463a <LCD_Command+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e8:	6a a9       	ldd	r22, Y+50	; 0x32
    45ea:	7b a9       	ldd	r23, Y+51	; 0x33
    45ec:	8c a9       	ldd	r24, Y+52	; 0x34
    45ee:	9d a9       	ldd	r25, Y+53	; 0x35
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e2       	ldi	r20, 0x20	; 32
    45f6:	51 e4       	ldi	r21, 0x41	; 65
    45f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	bc 01       	movw	r22, r24
    4602:	cd 01       	movw	r24, r26
    4604:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	9d a7       	std	Y+45, r25	; 0x2d
    460e:	8c a7       	std	Y+44, r24	; 0x2c
    4610:	0f c0       	rjmp	.+30     	; 0x4630 <LCD_Command+0x3e0>
    4612:	88 ec       	ldi	r24, 0xC8	; 200
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	9b a7       	std	Y+43, r25	; 0x2b
    4618:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    461a:	8a a5       	ldd	r24, Y+42	; 0x2a
    461c:	9b a5       	ldd	r25, Y+43	; 0x2b
    461e:	01 97       	sbiw	r24, 0x01	; 1
    4620:	f1 f7       	brne	.-4      	; 0x461e <LCD_Command+0x3ce>
    4622:	9b a7       	std	Y+43, r25	; 0x2b
    4624:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4626:	8c a5       	ldd	r24, Y+44	; 0x2c
    4628:	9d a5       	ldd	r25, Y+45	; 0x2d
    462a:	01 97       	sbiw	r24, 0x01	; 1
    462c:	9d a7       	std	Y+45, r25	; 0x2d
    462e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4630:	8c a5       	ldd	r24, Y+44	; 0x2c
    4632:	9d a5       	ldd	r25, Y+45	; 0x2d
    4634:	00 97       	sbiw	r24, 0x00	; 0
    4636:	69 f7       	brne	.-38     	; 0x4612 <LCD_Command+0x3c2>
    4638:	24 c0       	rjmp	.+72     	; 0x4682 <LCD_Command+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    463a:	6e a5       	ldd	r22, Y+46	; 0x2e
    463c:	7f a5       	ldd	r23, Y+47	; 0x2f
    463e:	88 a9       	ldd	r24, Y+48	; 0x30
    4640:	99 a9       	ldd	r25, Y+49	; 0x31
    4642:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	9d a7       	std	Y+45, r25	; 0x2d
    464c:	8c a7       	std	Y+44, r24	; 0x2c
    464e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4650:	9d a5       	ldd	r25, Y+45	; 0x2d
    4652:	99 a7       	std	Y+41, r25	; 0x29
    4654:	88 a7       	std	Y+40, r24	; 0x28
    4656:	88 a5       	ldd	r24, Y+40	; 0x28
    4658:	99 a5       	ldd	r25, Y+41	; 0x29
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <LCD_Command+0x40a>
    465e:	99 a7       	std	Y+41, r25	; 0x29
    4660:	88 a7       	std	Y+40, r24	; 0x28
    4662:	0f c0       	rjmp	.+30     	; 0x4682 <LCD_Command+0x432>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4664:	6f a9       	ldd	r22, Y+55	; 0x37
    4666:	78 ad       	ldd	r23, Y+56	; 0x38
    4668:	89 ad       	ldd	r24, Y+57	; 0x39
    466a:	9a ad       	ldd	r25, Y+58	; 0x3a
    466c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	8e ab       	std	Y+54, r24	; 0x36
    4676:	8e a9       	ldd	r24, Y+54	; 0x36
    4678:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    467a:	8f a1       	ldd	r24, Y+39	; 0x27
    467c:	8a 95       	dec	r24
    467e:	f1 f7       	brne	.-4      	; 0x467c <LCD_Command+0x42c>
    4680:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    4682:	a8 e3       	ldi	r26, 0x38	; 56
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	e8 e3       	ldi	r30, 0x38	; 56
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	80 81       	ld	r24, Z
    468c:	28 2f       	mov	r18, r24
    468e:	2f 70       	andi	r18, 0x0F	; 15
    4690:	fe 01       	movw	r30, r28
    4692:	e9 5a       	subi	r30, 0xA9	; 169
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	88 2f       	mov	r24, r24
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	82 95       	swap	r24
    469e:	92 95       	swap	r25
    46a0:	90 7f       	andi	r25, 0xF0	; 240
    46a2:	98 27       	eor	r25, r24
    46a4:	80 7f       	andi	r24, 0xF0	; 240
    46a6:	98 27       	eor	r25, r24
    46a8:	82 2b       	or	r24, r18
    46aa:	8c 93       	st	X, r24
	PORTC |= (1<<EN);
    46ac:	a5 e3       	ldi	r26, 0x35	; 53
    46ae:	b0 e0       	ldi	r27, 0x00	; 0
    46b0:	e5 e3       	ldi	r30, 0x35	; 53
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	80 81       	ld	r24, Z
    46b6:	84 60       	ori	r24, 0x04	; 4
    46b8:	8c 93       	st	X, r24
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	a0 e8       	ldi	r26, 0x80	; 128
    46c0:	bf e3       	ldi	r27, 0x3F	; 63
    46c2:	8b a3       	std	Y+35, r24	; 0x23
    46c4:	9c a3       	std	Y+36, r25	; 0x24
    46c6:	ad a3       	std	Y+37, r26	; 0x25
    46c8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    46ca:	6b a1       	ldd	r22, Y+35	; 0x23
    46cc:	7c a1       	ldd	r23, Y+36	; 0x24
    46ce:	8d a1       	ldd	r24, Y+37	; 0x25
    46d0:	9e a1       	ldd	r25, Y+38	; 0x26
    46d2:	2b ea       	ldi	r18, 0xAB	; 171
    46d4:	3a ea       	ldi	r19, 0xAA	; 170
    46d6:	4a e2       	ldi	r20, 0x2A	; 42
    46d8:	50 e4       	ldi	r21, 0x40	; 64
    46da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	8f 8f       	std	Y+31, r24	; 0x1f
    46e4:	98 a3       	std	Y+32, r25	; 0x20
    46e6:	a9 a3       	std	Y+33, r26	; 0x21
    46e8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    46ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46ec:	78 a1       	ldd	r23, Y+32	; 0x20
    46ee:	89 a1       	ldd	r24, Y+33	; 0x21
    46f0:	9a a1       	ldd	r25, Y+34	; 0x22
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	40 e8       	ldi	r20, 0x80	; 128
    46f8:	5f e3       	ldi	r21, 0x3F	; 63
    46fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    46fe:	88 23       	and	r24, r24
    4700:	1c f4       	brge	.+6      	; 0x4708 <LCD_Command+0x4b8>
		__ticks = 1;
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	8e 8f       	std	Y+30, r24	; 0x1e
    4706:	91 c0       	rjmp	.+290    	; 0x482a <LCD_Command+0x5da>
	else if (__tmp > 255)
    4708:	6f 8d       	ldd	r22, Y+31	; 0x1f
    470a:	78 a1       	ldd	r23, Y+32	; 0x20
    470c:	89 a1       	ldd	r24, Y+33	; 0x21
    470e:	9a a1       	ldd	r25, Y+34	; 0x22
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	4f e7       	ldi	r20, 0x7F	; 127
    4716:	53 e4       	ldi	r21, 0x43	; 67
    4718:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    471c:	18 16       	cp	r1, r24
    471e:	0c f0       	brlt	.+2      	; 0x4722 <LCD_Command+0x4d2>
    4720:	7b c0       	rjmp	.+246    	; 0x4818 <LCD_Command+0x5c8>
	{
		_delay_ms(__us / 1000.0);
    4722:	6b a1       	ldd	r22, Y+35	; 0x23
    4724:	7c a1       	ldd	r23, Y+36	; 0x24
    4726:	8d a1       	ldd	r24, Y+37	; 0x25
    4728:	9e a1       	ldd	r25, Y+38	; 0x26
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	4a e7       	ldi	r20, 0x7A	; 122
    4730:	54 e4       	ldi	r21, 0x44	; 68
    4732:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	8a 8f       	std	Y+26, r24	; 0x1a
    473c:	9b 8f       	std	Y+27, r25	; 0x1b
    473e:	ac 8f       	std	Y+28, r26	; 0x1c
    4740:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4742:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4744:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4746:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4748:	9d 8d       	ldd	r25, Y+29	; 0x1d
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	4a ef       	ldi	r20, 0xFA	; 250
    4750:	54 e4       	ldi	r21, 0x44	; 68
    4752:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	8e 8b       	std	Y+22, r24	; 0x16
    475c:	9f 8b       	std	Y+23, r25	; 0x17
    475e:	a8 8f       	std	Y+24, r26	; 0x18
    4760:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4762:	6e 89       	ldd	r22, Y+22	; 0x16
    4764:	7f 89       	ldd	r23, Y+23	; 0x17
    4766:	88 8d       	ldd	r24, Y+24	; 0x18
    4768:	99 8d       	ldd	r25, Y+25	; 0x19
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e8       	ldi	r20, 0x80	; 128
    4770:	5f e3       	ldi	r21, 0x3F	; 63
    4772:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4776:	88 23       	and	r24, r24
    4778:	2c f4       	brge	.+10     	; 0x4784 <LCD_Command+0x534>
		__ticks = 1;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	9d 8b       	std	Y+21, r25	; 0x15
    4780:	8c 8b       	std	Y+20, r24	; 0x14
    4782:	3f c0       	rjmp	.+126    	; 0x4802 <LCD_Command+0x5b2>
	else if (__tmp > 65535)
    4784:	6e 89       	ldd	r22, Y+22	; 0x16
    4786:	7f 89       	ldd	r23, Y+23	; 0x17
    4788:	88 8d       	ldd	r24, Y+24	; 0x18
    478a:	99 8d       	ldd	r25, Y+25	; 0x19
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	3f ef       	ldi	r19, 0xFF	; 255
    4790:	4f e7       	ldi	r20, 0x7F	; 127
    4792:	57 e4       	ldi	r21, 0x47	; 71
    4794:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4798:	18 16       	cp	r1, r24
    479a:	4c f5       	brge	.+82     	; 0x47ee <LCD_Command+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    479e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    47a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    47a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 e2       	ldi	r20, 0x20	; 32
    47aa:	51 e4       	ldi	r21, 0x41	; 65
    47ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	bc 01       	movw	r22, r24
    47b6:	cd 01       	movw	r24, r26
    47b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	9d 8b       	std	Y+21, r25	; 0x15
    47c2:	8c 8b       	std	Y+20, r24	; 0x14
    47c4:	0f c0       	rjmp	.+30     	; 0x47e4 <LCD_Command+0x594>
    47c6:	88 ec       	ldi	r24, 0xC8	; 200
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	9b 8b       	std	Y+19, r25	; 0x13
    47cc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47ce:	8a 89       	ldd	r24, Y+18	; 0x12
    47d0:	9b 89       	ldd	r25, Y+19	; 0x13
    47d2:	01 97       	sbiw	r24, 0x01	; 1
    47d4:	f1 f7       	brne	.-4      	; 0x47d2 <LCD_Command+0x582>
    47d6:	9b 8b       	std	Y+19, r25	; 0x13
    47d8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47da:	8c 89       	ldd	r24, Y+20	; 0x14
    47dc:	9d 89       	ldd	r25, Y+21	; 0x15
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	9d 8b       	std	Y+21, r25	; 0x15
    47e2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e4:	8c 89       	ldd	r24, Y+20	; 0x14
    47e6:	9d 89       	ldd	r25, Y+21	; 0x15
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	69 f7       	brne	.-38     	; 0x47c6 <LCD_Command+0x576>
    47ec:	24 c0       	rjmp	.+72     	; 0x4836 <LCD_Command+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ee:	6e 89       	ldd	r22, Y+22	; 0x16
    47f0:	7f 89       	ldd	r23, Y+23	; 0x17
    47f2:	88 8d       	ldd	r24, Y+24	; 0x18
    47f4:	99 8d       	ldd	r25, Y+25	; 0x19
    47f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	9d 8b       	std	Y+21, r25	; 0x15
    4800:	8c 8b       	std	Y+20, r24	; 0x14
    4802:	8c 89       	ldd	r24, Y+20	; 0x14
    4804:	9d 89       	ldd	r25, Y+21	; 0x15
    4806:	99 8b       	std	Y+17, r25	; 0x11
    4808:	88 8b       	std	Y+16, r24	; 0x10
    480a:	88 89       	ldd	r24, Y+16	; 0x10
    480c:	99 89       	ldd	r25, Y+17	; 0x11
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <LCD_Command+0x5be>
    4812:	99 8b       	std	Y+17, r25	; 0x11
    4814:	88 8b       	std	Y+16, r24	; 0x10
    4816:	0f c0       	rjmp	.+30     	; 0x4836 <LCD_Command+0x5e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4818:	6f 8d       	ldd	r22, Y+31	; 0x1f
    481a:	78 a1       	ldd	r23, Y+32	; 0x20
    481c:	89 a1       	ldd	r24, Y+33	; 0x21
    481e:	9a a1       	ldd	r25, Y+34	; 0x22
    4820:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	8e 8f       	std	Y+30, r24	; 0x1e
    482a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    482c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    482e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4830:	8a 95       	dec	r24
    4832:	f1 f7       	brne	.-4      	; 0x4830 <LCD_Command+0x5e0>
    4834:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    4836:	a5 e3       	ldi	r26, 0x35	; 53
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	e5 e3       	ldi	r30, 0x35	; 53
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	8b 7f       	andi	r24, 0xFB	; 251
    4842:	8c 93       	st	X, r24
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	a0 e0       	ldi	r26, 0x00	; 0
    484a:	b0 e4       	ldi	r27, 0x40	; 64
    484c:	8b 87       	std	Y+11, r24	; 0x0b
    484e:	9c 87       	std	Y+12, r25	; 0x0c
    4850:	ad 87       	std	Y+13, r26	; 0x0d
    4852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4854:	6b 85       	ldd	r22, Y+11	; 0x0b
    4856:	7c 85       	ldd	r23, Y+12	; 0x0c
    4858:	8d 85       	ldd	r24, Y+13	; 0x0d
    485a:	9e 85       	ldd	r25, Y+14	; 0x0e
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	4a ef       	ldi	r20, 0xFA	; 250
    4862:	54 e4       	ldi	r21, 0x44	; 68
    4864:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	8f 83       	std	Y+7, r24	; 0x07
    486e:	98 87       	std	Y+8, r25	; 0x08
    4870:	a9 87       	std	Y+9, r26	; 0x09
    4872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4874:	6f 81       	ldd	r22, Y+7	; 0x07
    4876:	78 85       	ldd	r23, Y+8	; 0x08
    4878:	89 85       	ldd	r24, Y+9	; 0x09
    487a:	9a 85       	ldd	r25, Y+10	; 0x0a
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e8       	ldi	r20, 0x80	; 128
    4882:	5f e3       	ldi	r21, 0x3F	; 63
    4884:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4888:	88 23       	and	r24, r24
    488a:	2c f4       	brge	.+10     	; 0x4896 <LCD_Command+0x646>
		__ticks = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	9e 83       	std	Y+6, r25	; 0x06
    4892:	8d 83       	std	Y+5, r24	; 0x05
    4894:	3f c0       	rjmp	.+126    	; 0x4914 <LCD_Command+0x6c4>
	else if (__tmp > 65535)
    4896:	6f 81       	ldd	r22, Y+7	; 0x07
    4898:	78 85       	ldd	r23, Y+8	; 0x08
    489a:	89 85       	ldd	r24, Y+9	; 0x09
    489c:	9a 85       	ldd	r25, Y+10	; 0x0a
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	3f ef       	ldi	r19, 0xFF	; 255
    48a2:	4f e7       	ldi	r20, 0x7F	; 127
    48a4:	57 e4       	ldi	r21, 0x47	; 71
    48a6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    48aa:	18 16       	cp	r1, r24
    48ac:	4c f5       	brge	.+82     	; 0x4900 <LCD_Command+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    48b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	40 e2       	ldi	r20, 0x20	; 32
    48bc:	51 e4       	ldi	r21, 0x41	; 65
    48be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	bc 01       	movw	r22, r24
    48c8:	cd 01       	movw	r24, r26
    48ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	9e 83       	std	Y+6, r25	; 0x06
    48d4:	8d 83       	std	Y+5, r24	; 0x05
    48d6:	0f c0       	rjmp	.+30     	; 0x48f6 <LCD_Command+0x6a6>
    48d8:	88 ec       	ldi	r24, 0xC8	; 200
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9c 83       	std	Y+4, r25	; 0x04
    48de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48e0:	8b 81       	ldd	r24, Y+3	; 0x03
    48e2:	9c 81       	ldd	r25, Y+4	; 0x04
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <LCD_Command+0x694>
    48e8:	9c 83       	std	Y+4, r25	; 0x04
    48ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ec:	8d 81       	ldd	r24, Y+5	; 0x05
    48ee:	9e 81       	ldd	r25, Y+6	; 0x06
    48f0:	01 97       	sbiw	r24, 0x01	; 1
    48f2:	9e 83       	std	Y+6, r25	; 0x06
    48f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f6:	8d 81       	ldd	r24, Y+5	; 0x05
    48f8:	9e 81       	ldd	r25, Y+6	; 0x06
    48fa:	00 97       	sbiw	r24, 0x00	; 0
    48fc:	69 f7       	brne	.-38     	; 0x48d8 <LCD_Command+0x688>
    48fe:	14 c0       	rjmp	.+40     	; 0x4928 <LCD_Command+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4900:	6f 81       	ldd	r22, Y+7	; 0x07
    4902:	78 85       	ldd	r23, Y+8	; 0x08
    4904:	89 85       	ldd	r24, Y+9	; 0x09
    4906:	9a 85       	ldd	r25, Y+10	; 0x0a
    4908:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	9e 83       	std	Y+6, r25	; 0x06
    4912:	8d 83       	std	Y+5, r24	; 0x05
    4914:	8d 81       	ldd	r24, Y+5	; 0x05
    4916:	9e 81       	ldd	r25, Y+6	; 0x06
    4918:	9a 83       	std	Y+2, r25	; 0x02
    491a:	89 83       	std	Y+1, r24	; 0x01
    491c:	89 81       	ldd	r24, Y+1	; 0x01
    491e:	9a 81       	ldd	r25, Y+2	; 0x02
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	f1 f7       	brne	.-4      	; 0x4920 <LCD_Command+0x6d0>
    4924:	9a 83       	std	Y+2, r25	; 0x02
    4926:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4928:	c9 5a       	subi	r28, 0xA9	; 169
    492a:	df 4f       	sbci	r29, 0xFF	; 255
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	de bf       	out	0x3e, r29	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	08 95       	ret

00004940 <LCD_Char>:

void LCD_Char( unsigned char data )
{
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	df 93       	push	r29
    4946:	cf 93       	push	r28
    4948:	cd b7       	in	r28, 0x3d	; 61
    494a:	de b7       	in	r29, 0x3e	; 62
    494c:	c7 55       	subi	r28, 0x57	; 87
    494e:	d0 40       	sbci	r29, 0x00	; 0
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	fe 01       	movw	r30, r28
    495c:	e9 5a       	subi	r30, 0xA9	; 169
    495e:	ff 4f       	sbci	r31, 0xFF	; 255
    4960:	80 83       	st	Z, r24

	PORTC |= (1<<RS);		/* RS=1, data reg. */
    4962:	a5 e3       	ldi	r26, 0x35	; 53
    4964:	b0 e0       	ldi	r27, 0x00	; 0
    4966:	e5 e3       	ldi	r30, 0x35	; 53
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	80 81       	ld	r24, Z
    496c:	81 60       	ori	r24, 0x01	; 1
    496e:	8c 93       	st	X, r24
	PORTC &=~ (1<<1);
    4970:	a5 e3       	ldi	r26, 0x35	; 53
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	e5 e3       	ldi	r30, 0x35	; 53
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	8d 7f       	andi	r24, 0xFD	; 253
    497c:	8c 93       	st	X, r24
	///0X1111
	///make to store only first 4 bits
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    497e:	a8 e3       	ldi	r26, 0x38	; 56
    4980:	b0 e0       	ldi	r27, 0x00	; 0
    4982:	e8 e3       	ldi	r30, 0x38	; 56
    4984:	f0 e0       	ldi	r31, 0x00	; 0
    4986:	80 81       	ld	r24, Z
    4988:	98 2f       	mov	r25, r24
    498a:	9f 70       	andi	r25, 0x0F	; 15
    498c:	fe 01       	movw	r30, r28
    498e:	e9 5a       	subi	r30, 0xA9	; 169
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 81       	ld	r24, Z
    4994:	80 7f       	andi	r24, 0xF0	; 240
    4996:	89 2b       	or	r24, r25
    4998:	8c 93       	st	X, r24

	PORTC|= (1<<EN);
    499a:	a5 e3       	ldi	r26, 0x35	; 53
    499c:	b0 e0       	ldi	r27, 0x00	; 0
    499e:	e5 e3       	ldi	r30, 0x35	; 53
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	84 60       	ori	r24, 0x04	; 4
    49a6:	8c 93       	st	X, r24
    49a8:	fe 01       	movw	r30, r28
    49aa:	ed 5a       	subi	r30, 0xAD	; 173
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	a0 e8       	ldi	r26, 0x80	; 128
    49b4:	bf e3       	ldi	r27, 0x3F	; 63
    49b6:	80 83       	st	Z, r24
    49b8:	91 83       	std	Z+1, r25	; 0x01
    49ba:	a2 83       	std	Z+2, r26	; 0x02
    49bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49be:	8e 01       	movw	r16, r28
    49c0:	01 5b       	subi	r16, 0xB1	; 177
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	ed 5a       	subi	r30, 0xAD	; 173
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	60 81       	ld	r22, Z
    49cc:	71 81       	ldd	r23, Z+1	; 0x01
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	2b ea       	ldi	r18, 0xAB	; 171
    49d4:	3a ea       	ldi	r19, 0xAA	; 170
    49d6:	4a e2       	ldi	r20, 0x2A	; 42
    49d8:	50 e4       	ldi	r21, 0x40	; 64
    49da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	f8 01       	movw	r30, r16
    49e4:	80 83       	st	Z, r24
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	a2 83       	std	Z+2, r26	; 0x02
    49ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49ec:	fe 01       	movw	r30, r28
    49ee:	e1 5b       	subi	r30, 0xB1	; 177
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	60 81       	ld	r22, Z
    49f4:	71 81       	ldd	r23, Z+1	; 0x01
    49f6:	82 81       	ldd	r24, Z+2	; 0x02
    49f8:	93 81       	ldd	r25, Z+3	; 0x03
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	40 e8       	ldi	r20, 0x80	; 128
    4a00:	5f e3       	ldi	r21, 0x3F	; 63
    4a02:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4a06:	88 23       	and	r24, r24
    4a08:	34 f4       	brge	.+12     	; 0x4a16 <LCD_Char+0xd6>
		__ticks = 1;
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e2 5b       	subi	r30, 0xB2	; 178
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	80 83       	st	Z, r24
    4a14:	e0 c0       	rjmp	.+448    	; 0x4bd6 <LCD_Char+0x296>
	else if (__tmp > 255)
    4a16:	fe 01       	movw	r30, r28
    4a18:	e1 5b       	subi	r30, 0xB1	; 177
    4a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1c:	60 81       	ld	r22, Z
    4a1e:	71 81       	ldd	r23, Z+1	; 0x01
    4a20:	82 81       	ldd	r24, Z+2	; 0x02
    4a22:	93 81       	ldd	r25, Z+3	; 0x03
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	4f e7       	ldi	r20, 0x7F	; 127
    4a2a:	53 e4       	ldi	r21, 0x43	; 67
    4a2c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4a30:	18 16       	cp	r1, r24
    4a32:	0c f0       	brlt	.+2      	; 0x4a36 <LCD_Char+0xf6>
    4a34:	c0 c0       	rjmp	.+384    	; 0x4bb6 <LCD_Char+0x276>
	{
		_delay_ms(__us / 1000.0);
    4a36:	fe 01       	movw	r30, r28
    4a38:	ed 5a       	subi	r30, 0xAD	; 173
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	60 81       	ld	r22, Z
    4a3e:	71 81       	ldd	r23, Z+1	; 0x01
    4a40:	82 81       	ldd	r24, Z+2	; 0x02
    4a42:	93 81       	ldd	r25, Z+3	; 0x03
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	4a e7       	ldi	r20, 0x7A	; 122
    4a4a:	54 e4       	ldi	r21, 0x44	; 68
    4a4c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	fe 01       	movw	r30, r28
    4a56:	e6 5b       	subi	r30, 0xB6	; 182
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	80 83       	st	Z, r24
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	a2 83       	std	Z+2, r26	; 0x02
    4a60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a62:	8e 01       	movw	r16, r28
    4a64:	0a 5b       	subi	r16, 0xBA	; 186
    4a66:	1f 4f       	sbci	r17, 0xFF	; 255
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e6 5b       	subi	r30, 0xB6	; 182
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	4a ef       	ldi	r20, 0xFA	; 250
    4a7c:	54 e4       	ldi	r21, 0x44	; 68
    4a7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	f8 01       	movw	r30, r16
    4a88:	80 83       	st	Z, r24
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	a2 83       	std	Z+2, r26	; 0x02
    4a8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a90:	fe 01       	movw	r30, r28
    4a92:	ea 5b       	subi	r30, 0xBA	; 186
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	60 81       	ld	r22, Z
    4a98:	71 81       	ldd	r23, Z+1	; 0x01
    4a9a:	82 81       	ldd	r24, Z+2	; 0x02
    4a9c:	93 81       	ldd	r25, Z+3	; 0x03
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e8       	ldi	r20, 0x80	; 128
    4aa4:	5f e3       	ldi	r21, 0x3F	; 63
    4aa6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4aaa:	88 23       	and	r24, r24
    4aac:	44 f4       	brge	.+16     	; 0x4abe <LCD_Char+0x17e>
		__ticks = 1;
    4aae:	fe 01       	movw	r30, r28
    4ab0:	ec 5b       	subi	r30, 0xBC	; 188
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	91 83       	std	Z+1, r25	; 0x01
    4aba:	80 83       	st	Z, r24
    4abc:	64 c0       	rjmp	.+200    	; 0x4b86 <LCD_Char+0x246>
	else if (__tmp > 65535)
    4abe:	fe 01       	movw	r30, r28
    4ac0:	ea 5b       	subi	r30, 0xBA	; 186
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	60 81       	ld	r22, Z
    4ac6:	71 81       	ldd	r23, Z+1	; 0x01
    4ac8:	82 81       	ldd	r24, Z+2	; 0x02
    4aca:	93 81       	ldd	r25, Z+3	; 0x03
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	3f ef       	ldi	r19, 0xFF	; 255
    4ad0:	4f e7       	ldi	r20, 0x7F	; 127
    4ad2:	57 e4       	ldi	r21, 0x47	; 71
    4ad4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4ad8:	18 16       	cp	r1, r24
    4ada:	0c f0       	brlt	.+2      	; 0x4ade <LCD_Char+0x19e>
    4adc:	43 c0       	rjmp	.+134    	; 0x4b64 <LCD_Char+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e6 5b       	subi	r30, 0xB6	; 182
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	60 81       	ld	r22, Z
    4ae6:	71 81       	ldd	r23, Z+1	; 0x01
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	93 81       	ldd	r25, Z+3	; 0x03
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	40 e2       	ldi	r20, 0x20	; 32
    4af2:	51 e4       	ldi	r21, 0x41	; 65
    4af4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	8e 01       	movw	r16, r28
    4afe:	0c 5b       	subi	r16, 0xBC	; 188
    4b00:	1f 4f       	sbci	r17, 0xFF	; 255
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	f8 01       	movw	r30, r16
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	80 83       	st	Z, r24
    4b14:	1f c0       	rjmp	.+62     	; 0x4b54 <LCD_Char+0x214>
    4b16:	fe 01       	movw	r30, r28
    4b18:	ee 5b       	subi	r30, 0xBE	; 190
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	88 ec       	ldi	r24, 0xC8	; 200
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	91 83       	std	Z+1, r25	; 0x01
    4b22:	80 83       	st	Z, r24
    4b24:	fe 01       	movw	r30, r28
    4b26:	ee 5b       	subi	r30, 0xBE	; 190
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	80 81       	ld	r24, Z
    4b2c:	91 81       	ldd	r25, Z+1	; 0x01
    4b2e:	01 97       	sbiw	r24, 0x01	; 1
    4b30:	f1 f7       	brne	.-4      	; 0x4b2e <LCD_Char+0x1ee>
    4b32:	fe 01       	movw	r30, r28
    4b34:	ee 5b       	subi	r30, 0xBE	; 190
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b3c:	de 01       	movw	r26, r28
    4b3e:	ac 5b       	subi	r26, 0xBC	; 188
    4b40:	bf 4f       	sbci	r27, 0xFF	; 255
    4b42:	fe 01       	movw	r30, r28
    4b44:	ec 5b       	subi	r30, 0xBC	; 188
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	80 81       	ld	r24, Z
    4b4a:	91 81       	ldd	r25, Z+1	; 0x01
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	11 96       	adiw	r26, 0x01	; 1
    4b50:	9c 93       	st	X, r25
    4b52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b54:	fe 01       	movw	r30, r28
    4b56:	ec 5b       	subi	r30, 0xBC	; 188
    4b58:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5a:	80 81       	ld	r24, Z
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	00 97       	sbiw	r24, 0x00	; 0
    4b60:	d1 f6       	brne	.-76     	; 0x4b16 <LCD_Char+0x1d6>
    4b62:	42 c0       	rjmp	.+132    	; 0x4be8 <LCD_Char+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b64:	8e 01       	movw	r16, r28
    4b66:	0c 5b       	subi	r16, 0xBC	; 188
    4b68:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	ea 5b       	subi	r30, 0xBA	; 186
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	60 81       	ld	r22, Z
    4b72:	71 81       	ldd	r23, Z+1	; 0x01
    4b74:	82 81       	ldd	r24, Z+2	; 0x02
    4b76:	93 81       	ldd	r25, Z+3	; 0x03
    4b78:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	f8 01       	movw	r30, r16
    4b82:	91 83       	std	Z+1, r25	; 0x01
    4b84:	80 83       	st	Z, r24
    4b86:	de 01       	movw	r26, r28
    4b88:	a0 5c       	subi	r26, 0xC0	; 192
    4b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	ec 5b       	subi	r30, 0xBC	; 188
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	80 81       	ld	r24, Z
    4b94:	91 81       	ldd	r25, Z+1	; 0x01
    4b96:	11 96       	adiw	r26, 0x01	; 1
    4b98:	9c 93       	st	X, r25
    4b9a:	8e 93       	st	-X, r24
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e0 5c       	subi	r30, 0xC0	; 192
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	f1 f7       	brne	.-4      	; 0x4ba6 <LCD_Char+0x266>
    4baa:	fe 01       	movw	r30, r28
    4bac:	e0 5c       	subi	r30, 0xC0	; 192
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	91 83       	std	Z+1, r25	; 0x01
    4bb2:	80 83       	st	Z, r24
    4bb4:	19 c0       	rjmp	.+50     	; 0x4be8 <LCD_Char+0x2a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4bb6:	8e 01       	movw	r16, r28
    4bb8:	02 5b       	subi	r16, 0xB2	; 178
    4bba:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e1 5b       	subi	r30, 0xB1	; 177
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	60 81       	ld	r22, Z
    4bc4:	71 81       	ldd	r23, Z+1	; 0x01
    4bc6:	82 81       	ldd	r24, Z+2	; 0x02
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	80 83       	st	Z, r24
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	e2 5b       	subi	r30, 0xB2	; 178
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	80 81       	ld	r24, Z
    4bde:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4be0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4be2:	8a 95       	dec	r24
    4be4:	f1 f7       	brne	.-4      	; 0x4be2 <LCD_Char+0x2a2>
    4be6:	8f af       	std	Y+63, r24	; 0x3f

	_delay_us(1
	);
	PORTC &= ~ (1<<EN);
    4be8:	a5 e3       	ldi	r26, 0x35	; 53
    4bea:	b0 e0       	ldi	r27, 0x00	; 0
    4bec:	e5 e3       	ldi	r30, 0x35	; 53
    4bee:	f0 e0       	ldi	r31, 0x00	; 0
    4bf0:	80 81       	ld	r24, Z
    4bf2:	8b 7f       	andi	r24, 0xFB	; 251
    4bf4:	8c 93       	st	X, r24
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	a8 e4       	ldi	r26, 0x48	; 72
    4bfc:	b3 e4       	ldi	r27, 0x43	; 67
    4bfe:	8b af       	std	Y+59, r24	; 0x3b
    4c00:	9c af       	std	Y+60, r25	; 0x3c
    4c02:	ad af       	std	Y+61, r26	; 0x3d
    4c04:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c06:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c08:	7c ad       	ldd	r23, Y+60	; 0x3c
    4c0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c0e:	2b ea       	ldi	r18, 0xAB	; 171
    4c10:	3a ea       	ldi	r19, 0xAA	; 170
    4c12:	4a e2       	ldi	r20, 0x2A	; 42
    4c14:	50 e4       	ldi	r21, 0x40	; 64
    4c16:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	cb 01       	movw	r24, r22
    4c1e:	8f ab       	std	Y+55, r24	; 0x37
    4c20:	98 af       	std	Y+56, r25	; 0x38
    4c22:	a9 af       	std	Y+57, r26	; 0x39
    4c24:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4c26:	6f a9       	ldd	r22, Y+55	; 0x37
    4c28:	78 ad       	ldd	r23, Y+56	; 0x38
    4c2a:	89 ad       	ldd	r24, Y+57	; 0x39
    4c2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c2e:	20 e0       	ldi	r18, 0x00	; 0
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	40 e8       	ldi	r20, 0x80	; 128
    4c34:	5f e3       	ldi	r21, 0x3F	; 63
    4c36:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4c3a:	88 23       	and	r24, r24
    4c3c:	1c f4       	brge	.+6      	; 0x4c44 <LCD_Char+0x304>
		__ticks = 1;
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	8e ab       	std	Y+54, r24	; 0x36
    4c42:	91 c0       	rjmp	.+290    	; 0x4d66 <LCD_Char+0x426>
	else if (__tmp > 255)
    4c44:	6f a9       	ldd	r22, Y+55	; 0x37
    4c46:	78 ad       	ldd	r23, Y+56	; 0x38
    4c48:	89 ad       	ldd	r24, Y+57	; 0x39
    4c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	4f e7       	ldi	r20, 0x7F	; 127
    4c52:	53 e4       	ldi	r21, 0x43	; 67
    4c54:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4c58:	18 16       	cp	r1, r24
    4c5a:	0c f0       	brlt	.+2      	; 0x4c5e <LCD_Char+0x31e>
    4c5c:	7b c0       	rjmp	.+246    	; 0x4d54 <LCD_Char+0x414>
	{
		_delay_ms(__us / 1000.0);
    4c5e:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c60:	7c ad       	ldd	r23, Y+60	; 0x3c
    4c62:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c64:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	4a e7       	ldi	r20, 0x7A	; 122
    4c6c:	54 e4       	ldi	r21, 0x44	; 68
    4c6e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4c72:	dc 01       	movw	r26, r24
    4c74:	cb 01       	movw	r24, r22
    4c76:	8a ab       	std	Y+50, r24	; 0x32
    4c78:	9b ab       	std	Y+51, r25	; 0x33
    4c7a:	ac ab       	std	Y+52, r26	; 0x34
    4c7c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c7e:	6a a9       	ldd	r22, Y+50	; 0x32
    4c80:	7b a9       	ldd	r23, Y+51	; 0x33
    4c82:	8c a9       	ldd	r24, Y+52	; 0x34
    4c84:	9d a9       	ldd	r25, Y+53	; 0x35
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	4a ef       	ldi	r20, 0xFA	; 250
    4c8c:	54 e4       	ldi	r21, 0x44	; 68
    4c8e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	8e a7       	std	Y+46, r24	; 0x2e
    4c98:	9f a7       	std	Y+47, r25	; 0x2f
    4c9a:	a8 ab       	std	Y+48, r26	; 0x30
    4c9c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4c9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    4ca0:	7f a5       	ldd	r23, Y+47	; 0x2f
    4ca2:	88 a9       	ldd	r24, Y+48	; 0x30
    4ca4:	99 a9       	ldd	r25, Y+49	; 0x31
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e8       	ldi	r20, 0x80	; 128
    4cac:	5f e3       	ldi	r21, 0x3F	; 63
    4cae:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4cb2:	88 23       	and	r24, r24
    4cb4:	2c f4       	brge	.+10     	; 0x4cc0 <LCD_Char+0x380>
		__ticks = 1;
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	9d a7       	std	Y+45, r25	; 0x2d
    4cbc:	8c a7       	std	Y+44, r24	; 0x2c
    4cbe:	3f c0       	rjmp	.+126    	; 0x4d3e <LCD_Char+0x3fe>
	else if (__tmp > 65535)
    4cc0:	6e a5       	ldd	r22, Y+46	; 0x2e
    4cc2:	7f a5       	ldd	r23, Y+47	; 0x2f
    4cc4:	88 a9       	ldd	r24, Y+48	; 0x30
    4cc6:	99 a9       	ldd	r25, Y+49	; 0x31
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	3f ef       	ldi	r19, 0xFF	; 255
    4ccc:	4f e7       	ldi	r20, 0x7F	; 127
    4cce:	57 e4       	ldi	r21, 0x47	; 71
    4cd0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4cd4:	18 16       	cp	r1, r24
    4cd6:	4c f5       	brge	.+82     	; 0x4d2a <LCD_Char+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd8:	6a a9       	ldd	r22, Y+50	; 0x32
    4cda:	7b a9       	ldd	r23, Y+51	; 0x33
    4cdc:	8c a9       	ldd	r24, Y+52	; 0x34
    4cde:	9d a9       	ldd	r25, Y+53	; 0x35
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e2       	ldi	r20, 0x20	; 32
    4ce6:	51 e4       	ldi	r21, 0x41	; 65
    4ce8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	9d a7       	std	Y+45, r25	; 0x2d
    4cfe:	8c a7       	std	Y+44, r24	; 0x2c
    4d00:	0f c0       	rjmp	.+30     	; 0x4d20 <LCD_Char+0x3e0>
    4d02:	88 ec       	ldi	r24, 0xC8	; 200
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	9b a7       	std	Y+43, r25	; 0x2b
    4d08:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4d0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d0c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <LCD_Char+0x3ce>
    4d12:	9b a7       	std	Y+43, r25	; 0x2b
    4d14:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d16:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d18:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	9d a7       	std	Y+45, r25	; 0x2d
    4d1e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d20:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d22:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	69 f7       	brne	.-38     	; 0x4d02 <LCD_Char+0x3c2>
    4d28:	24 c0       	rjmp	.+72     	; 0x4d72 <LCD_Char+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    4d2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    4d2e:	88 a9       	ldd	r24, Y+48	; 0x30
    4d30:	99 a9       	ldd	r25, Y+49	; 0x31
    4d32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	9d a7       	std	Y+45, r25	; 0x2d
    4d3c:	8c a7       	std	Y+44, r24	; 0x2c
    4d3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d40:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d42:	99 a7       	std	Y+41, r25	; 0x29
    4d44:	88 a7       	std	Y+40, r24	; 0x28
    4d46:	88 a5       	ldd	r24, Y+40	; 0x28
    4d48:	99 a5       	ldd	r25, Y+41	; 0x29
    4d4a:	01 97       	sbiw	r24, 0x01	; 1
    4d4c:	f1 f7       	brne	.-4      	; 0x4d4a <LCD_Char+0x40a>
    4d4e:	99 a7       	std	Y+41, r25	; 0x29
    4d50:	88 a7       	std	Y+40, r24	; 0x28
    4d52:	0f c0       	rjmp	.+30     	; 0x4d72 <LCD_Char+0x432>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d54:	6f a9       	ldd	r22, Y+55	; 0x37
    4d56:	78 ad       	ldd	r23, Y+56	; 0x38
    4d58:	89 ad       	ldd	r24, Y+57	; 0x39
    4d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	8e ab       	std	Y+54, r24	; 0x36
    4d66:	8e a9       	ldd	r24, Y+54	; 0x36
    4d68:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d6a:	8f a1       	ldd	r24, Y+39	; 0x27
    4d6c:	8a 95       	dec	r24
    4d6e:	f1 f7       	brne	.-4      	; 0x4d6c <LCD_Char+0x42c>
    4d70:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    4d72:	a8 e3       	ldi	r26, 0x38	; 56
    4d74:	b0 e0       	ldi	r27, 0x00	; 0
    4d76:	e8 e3       	ldi	r30, 0x38	; 56
    4d78:	f0 e0       	ldi	r31, 0x00	; 0
    4d7a:	80 81       	ld	r24, Z
    4d7c:	28 2f       	mov	r18, r24
    4d7e:	2f 70       	andi	r18, 0x0F	; 15
    4d80:	fe 01       	movw	r30, r28
    4d82:	e9 5a       	subi	r30, 0xA9	; 169
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	80 81       	ld	r24, Z
    4d88:	88 2f       	mov	r24, r24
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	82 95       	swap	r24
    4d8e:	92 95       	swap	r25
    4d90:	90 7f       	andi	r25, 0xF0	; 240
    4d92:	98 27       	eor	r25, r24
    4d94:	80 7f       	andi	r24, 0xF0	; 240
    4d96:	98 27       	eor	r25, r24
    4d98:	82 2b       	or	r24, r18
    4d9a:	8c 93       	st	X, r24
	PORTC |= (1<<EN);
    4d9c:	a5 e3       	ldi	r26, 0x35	; 53
    4d9e:	b0 e0       	ldi	r27, 0x00	; 0
    4da0:	e5 e3       	ldi	r30, 0x35	; 53
    4da2:	f0 e0       	ldi	r31, 0x00	; 0
    4da4:	80 81       	ld	r24, Z
    4da6:	84 60       	ori	r24, 0x04	; 4
    4da8:	8c 93       	st	X, r24
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	a0 e8       	ldi	r26, 0x80	; 128
    4db0:	bf e3       	ldi	r27, 0x3F	; 63
    4db2:	8b a3       	std	Y+35, r24	; 0x23
    4db4:	9c a3       	std	Y+36, r25	; 0x24
    4db6:	ad a3       	std	Y+37, r26	; 0x25
    4db8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4dba:	6b a1       	ldd	r22, Y+35	; 0x23
    4dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    4dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    4dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    4dc2:	2b ea       	ldi	r18, 0xAB	; 171
    4dc4:	3a ea       	ldi	r19, 0xAA	; 170
    4dc6:	4a e2       	ldi	r20, 0x2A	; 42
    4dc8:	50 e4       	ldi	r21, 0x40	; 64
    4dca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4dce:	dc 01       	movw	r26, r24
    4dd0:	cb 01       	movw	r24, r22
    4dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    4dd4:	98 a3       	std	Y+32, r25	; 0x20
    4dd6:	a9 a3       	std	Y+33, r26	; 0x21
    4dd8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4dda:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4ddc:	78 a1       	ldd	r23, Y+32	; 0x20
    4dde:	89 a1       	ldd	r24, Y+33	; 0x21
    4de0:	9a a1       	ldd	r25, Y+34	; 0x22
    4de2:	20 e0       	ldi	r18, 0x00	; 0
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	40 e8       	ldi	r20, 0x80	; 128
    4de8:	5f e3       	ldi	r21, 0x3F	; 63
    4dea:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4dee:	88 23       	and	r24, r24
    4df0:	1c f4       	brge	.+6      	; 0x4df8 <LCD_Char+0x4b8>
		__ticks = 1;
    4df2:	81 e0       	ldi	r24, 0x01	; 1
    4df4:	8e 8f       	std	Y+30, r24	; 0x1e
    4df6:	91 c0       	rjmp	.+290    	; 0x4f1a <LCD_Char+0x5da>
	else if (__tmp > 255)
    4df8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4dfa:	78 a1       	ldd	r23, Y+32	; 0x20
    4dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    4dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	4f e7       	ldi	r20, 0x7F	; 127
    4e06:	53 e4       	ldi	r21, 0x43	; 67
    4e08:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4e0c:	18 16       	cp	r1, r24
    4e0e:	0c f0       	brlt	.+2      	; 0x4e12 <LCD_Char+0x4d2>
    4e10:	7b c0       	rjmp	.+246    	; 0x4f08 <LCD_Char+0x5c8>
	{
		_delay_ms(__us / 1000.0);
    4e12:	6b a1       	ldd	r22, Y+35	; 0x23
    4e14:	7c a1       	ldd	r23, Y+36	; 0x24
    4e16:	8d a1       	ldd	r24, Y+37	; 0x25
    4e18:	9e a1       	ldd	r25, Y+38	; 0x26
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	4a e7       	ldi	r20, 0x7A	; 122
    4e20:	54 e4       	ldi	r21, 0x44	; 68
    4e22:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4e26:	dc 01       	movw	r26, r24
    4e28:	cb 01       	movw	r24, r22
    4e2a:	8a 8f       	std	Y+26, r24	; 0x1a
    4e2c:	9b 8f       	std	Y+27, r25	; 0x1b
    4e2e:	ac 8f       	std	Y+28, r26	; 0x1c
    4e30:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e32:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e34:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	4a ef       	ldi	r20, 0xFA	; 250
    4e40:	54 e4       	ldi	r21, 0x44	; 68
    4e42:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	8e 8b       	std	Y+22, r24	; 0x16
    4e4c:	9f 8b       	std	Y+23, r25	; 0x17
    4e4e:	a8 8f       	std	Y+24, r26	; 0x18
    4e50:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4e52:	6e 89       	ldd	r22, Y+22	; 0x16
    4e54:	7f 89       	ldd	r23, Y+23	; 0x17
    4e56:	88 8d       	ldd	r24, Y+24	; 0x18
    4e58:	99 8d       	ldd	r25, Y+25	; 0x19
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	40 e8       	ldi	r20, 0x80	; 128
    4e60:	5f e3       	ldi	r21, 0x3F	; 63
    4e62:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4e66:	88 23       	and	r24, r24
    4e68:	2c f4       	brge	.+10     	; 0x4e74 <LCD_Char+0x534>
		__ticks = 1;
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	9d 8b       	std	Y+21, r25	; 0x15
    4e70:	8c 8b       	std	Y+20, r24	; 0x14
    4e72:	3f c0       	rjmp	.+126    	; 0x4ef2 <LCD_Char+0x5b2>
	else if (__tmp > 65535)
    4e74:	6e 89       	ldd	r22, Y+22	; 0x16
    4e76:	7f 89       	ldd	r23, Y+23	; 0x17
    4e78:	88 8d       	ldd	r24, Y+24	; 0x18
    4e7a:	99 8d       	ldd	r25, Y+25	; 0x19
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	3f ef       	ldi	r19, 0xFF	; 255
    4e80:	4f e7       	ldi	r20, 0x7F	; 127
    4e82:	57 e4       	ldi	r21, 0x47	; 71
    4e84:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4e88:	18 16       	cp	r1, r24
    4e8a:	4c f5       	brge	.+82     	; 0x4ede <LCD_Char+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e8c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e8e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4e90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	40 e2       	ldi	r20, 0x20	; 32
    4e9a:	51 e4       	ldi	r21, 0x41	; 65
    4e9c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4ea0:	dc 01       	movw	r26, r24
    4ea2:	cb 01       	movw	r24, r22
    4ea4:	bc 01       	movw	r22, r24
    4ea6:	cd 01       	movw	r24, r26
    4ea8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	9d 8b       	std	Y+21, r25	; 0x15
    4eb2:	8c 8b       	std	Y+20, r24	; 0x14
    4eb4:	0f c0       	rjmp	.+30     	; 0x4ed4 <LCD_Char+0x594>
    4eb6:	88 ec       	ldi	r24, 0xC8	; 200
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	9b 8b       	std	Y+19, r25	; 0x13
    4ebc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ebe:	8a 89       	ldd	r24, Y+18	; 0x12
    4ec0:	9b 89       	ldd	r25, Y+19	; 0x13
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <LCD_Char+0x582>
    4ec6:	9b 8b       	std	Y+19, r25	; 0x13
    4ec8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eca:	8c 89       	ldd	r24, Y+20	; 0x14
    4ecc:	9d 89       	ldd	r25, Y+21	; 0x15
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	9d 8b       	std	Y+21, r25	; 0x15
    4ed2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed4:	8c 89       	ldd	r24, Y+20	; 0x14
    4ed6:	9d 89       	ldd	r25, Y+21	; 0x15
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	69 f7       	brne	.-38     	; 0x4eb6 <LCD_Char+0x576>
    4edc:	24 c0       	rjmp	.+72     	; 0x4f26 <LCD_Char+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ede:	6e 89       	ldd	r22, Y+22	; 0x16
    4ee0:	7f 89       	ldd	r23, Y+23	; 0x17
    4ee2:	88 8d       	ldd	r24, Y+24	; 0x18
    4ee4:	99 8d       	ldd	r25, Y+25	; 0x19
    4ee6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	9d 8b       	std	Y+21, r25	; 0x15
    4ef0:	8c 8b       	std	Y+20, r24	; 0x14
    4ef2:	8c 89       	ldd	r24, Y+20	; 0x14
    4ef4:	9d 89       	ldd	r25, Y+21	; 0x15
    4ef6:	99 8b       	std	Y+17, r25	; 0x11
    4ef8:	88 8b       	std	Y+16, r24	; 0x10
    4efa:	88 89       	ldd	r24, Y+16	; 0x10
    4efc:	99 89       	ldd	r25, Y+17	; 0x11
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	f1 f7       	brne	.-4      	; 0x4efe <LCD_Char+0x5be>
    4f02:	99 8b       	std	Y+17, r25	; 0x11
    4f04:	88 8b       	std	Y+16, r24	; 0x10
    4f06:	0f c0       	rjmp	.+30     	; 0x4f26 <LCD_Char+0x5e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f08:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4f0a:	78 a1       	ldd	r23, Y+32	; 0x20
    4f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f10:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	8e 8f       	std	Y+30, r24	; 0x1e
    4f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f1c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f20:	8a 95       	dec	r24
    4f22:	f1 f7       	brne	.-4      	; 0x4f20 <LCD_Char+0x5e0>
    4f24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    4f26:	a5 e3       	ldi	r26, 0x35	; 53
    4f28:	b0 e0       	ldi	r27, 0x00	; 0
    4f2a:	e5 e3       	ldi	r30, 0x35	; 53
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	80 81       	ld	r24, Z
    4f30:	8b 7f       	andi	r24, 0xFB	; 251
    4f32:	8c 93       	st	X, r24
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a0 e0       	ldi	r26, 0x00	; 0
    4f3a:	b0 e4       	ldi	r27, 0x40	; 64
    4f3c:	8b 87       	std	Y+11, r24	; 0x0b
    4f3e:	9c 87       	std	Y+12, r25	; 0x0c
    4f40:	ad 87       	std	Y+13, r26	; 0x0d
    4f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	4a ef       	ldi	r20, 0xFA	; 250
    4f52:	54 e4       	ldi	r21, 0x44	; 68
    4f54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	8f 83       	std	Y+7, r24	; 0x07
    4f5e:	98 87       	std	Y+8, r25	; 0x08
    4f60:	a9 87       	std	Y+9, r26	; 0x09
    4f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f64:	6f 81       	ldd	r22, Y+7	; 0x07
    4f66:	78 85       	ldd	r23, Y+8	; 0x08
    4f68:	89 85       	ldd	r24, Y+9	; 0x09
    4f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	40 e8       	ldi	r20, 0x80	; 128
    4f72:	5f e3       	ldi	r21, 0x3F	; 63
    4f74:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4f78:	88 23       	and	r24, r24
    4f7a:	2c f4       	brge	.+10     	; 0x4f86 <LCD_Char+0x646>
		__ticks = 1;
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	9e 83       	std	Y+6, r25	; 0x06
    4f82:	8d 83       	std	Y+5, r24	; 0x05
    4f84:	3f c0       	rjmp	.+126    	; 0x5004 <LCD_Char+0x6c4>
	else if (__tmp > 65535)
    4f86:	6f 81       	ldd	r22, Y+7	; 0x07
    4f88:	78 85       	ldd	r23, Y+8	; 0x08
    4f8a:	89 85       	ldd	r24, Y+9	; 0x09
    4f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	3f ef       	ldi	r19, 0xFF	; 255
    4f92:	4f e7       	ldi	r20, 0x7F	; 127
    4f94:	57 e4       	ldi	r21, 0x47	; 71
    4f96:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4f9a:	18 16       	cp	r1, r24
    4f9c:	4c f5       	brge	.+82     	; 0x4ff0 <LCD_Char+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	40 e2       	ldi	r20, 0x20	; 32
    4fac:	51 e4       	ldi	r21, 0x41	; 65
    4fae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	bc 01       	movw	r22, r24
    4fb8:	cd 01       	movw	r24, r26
    4fba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	9e 83       	std	Y+6, r25	; 0x06
    4fc4:	8d 83       	std	Y+5, r24	; 0x05
    4fc6:	0f c0       	rjmp	.+30     	; 0x4fe6 <LCD_Char+0x6a6>
    4fc8:	88 ec       	ldi	r24, 0xC8	; 200
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	9c 83       	std	Y+4, r25	; 0x04
    4fce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd4:	01 97       	sbiw	r24, 0x01	; 1
    4fd6:	f1 f7       	brne	.-4      	; 0x4fd4 <LCD_Char+0x694>
    4fd8:	9c 83       	std	Y+4, r25	; 0x04
    4fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fde:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	9e 83       	std	Y+6, r25	; 0x06
    4fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fea:	00 97       	sbiw	r24, 0x00	; 0
    4fec:	69 f7       	brne	.-38     	; 0x4fc8 <LCD_Char+0x688>
    4fee:	14 c0       	rjmp	.+40     	; 0x5018 <LCD_Char+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ff2:	78 85       	ldd	r23, Y+8	; 0x08
    4ff4:	89 85       	ldd	r24, Y+9	; 0x09
    4ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ff8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	9e 83       	std	Y+6, r25	; 0x06
    5002:	8d 83       	std	Y+5, r24	; 0x05
    5004:	8d 81       	ldd	r24, Y+5	; 0x05
    5006:	9e 81       	ldd	r25, Y+6	; 0x06
    5008:	9a 83       	std	Y+2, r25	; 0x02
    500a:	89 83       	std	Y+1, r24	; 0x01
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	01 97       	sbiw	r24, 0x01	; 1
    5012:	f1 f7       	brne	.-4      	; 0x5010 <LCD_Char+0x6d0>
    5014:	9a 83       	std	Y+2, r25	; 0x02
    5016:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5018:	c9 5a       	subi	r28, 0xA9	; 169
    501a:	df 4f       	sbci	r29, 0xFF	; 255
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	1f 91       	pop	r17
    502c:	0f 91       	pop	r16
    502e:	08 95       	ret

00005030 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
    5038:	6c 97       	sbiw	r28, 0x1c	; 28
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT); // RS
    5044:	82 e0       	ldi	r24, 0x02	; 2
    5046:	60 e0       	ldi	r22, 0x00	; 0
    5048:	41 e0       	ldi	r20, 0x01	; 1
    504a:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT); // RW
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	61 e0       	ldi	r22, 0x01	; 1
    5052:	41 e0       	ldi	r20, 0x01	; 1
    5054:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT); // E
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	62 e0       	ldi	r22, 0x02	; 2
    505c:	41 e0       	ldi	r20, 0x01	; 1
    505e:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_u8_PORTB, 4, DIO_u8_OUTPUT); // D4
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	64 e0       	ldi	r22, 0x04	; 4
    5066:	41 e0       	ldi	r20, 0x01	; 1
    5068:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 5, DIO_u8_OUTPUT); // D5
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	65 e0       	ldi	r22, 0x05	; 5
    5070:	41 e0       	ldi	r20, 0x01	; 1
    5072:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 6, DIO_u8_OUTPUT); // D6
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	66 e0       	ldi	r22, 0x06	; 6
    507a:	41 e0       	ldi	r20, 0x01	; 1
    507c:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 7, DIO_u8_OUTPUT); // D7
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	67 e0       	ldi	r22, 0x07	; 7
    5084:	41 e0       	ldi	r20, 0x01	; 1
    5086:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	a8 e4       	ldi	r26, 0x48	; 72
    5090:	b2 e4       	ldi	r27, 0x42	; 66
    5092:	89 8f       	std	Y+25, r24	; 0x19
    5094:	9a 8f       	std	Y+26, r25	; 0x1a
    5096:	ab 8f       	std	Y+27, r26	; 0x1b
    5098:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    509a:	69 8d       	ldd	r22, Y+25	; 0x19
    509c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    509e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	4a ef       	ldi	r20, 0xFA	; 250
    50a8:	54 e4       	ldi	r21, 0x44	; 68
    50aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	8d 8b       	std	Y+21, r24	; 0x15
    50b4:	9e 8b       	std	Y+22, r25	; 0x16
    50b6:	af 8b       	std	Y+23, r26	; 0x17
    50b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50ba:	6d 89       	ldd	r22, Y+21	; 0x15
    50bc:	7e 89       	ldd	r23, Y+22	; 0x16
    50be:	8f 89       	ldd	r24, Y+23	; 0x17
    50c0:	98 8d       	ldd	r25, Y+24	; 0x18
    50c2:	20 e0       	ldi	r18, 0x00	; 0
    50c4:	30 e0       	ldi	r19, 0x00	; 0
    50c6:	40 e8       	ldi	r20, 0x80	; 128
    50c8:	5f e3       	ldi	r21, 0x3F	; 63
    50ca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    50ce:	88 23       	and	r24, r24
    50d0:	2c f4       	brge	.+10     	; 0x50dc <LCD_Init+0xac>
		__ticks = 1;
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	9c 8b       	std	Y+20, r25	; 0x14
    50d8:	8b 8b       	std	Y+19, r24	; 0x13
    50da:	3f c0       	rjmp	.+126    	; 0x515a <LCD_Init+0x12a>
	else if (__tmp > 65535)
    50dc:	6d 89       	ldd	r22, Y+21	; 0x15
    50de:	7e 89       	ldd	r23, Y+22	; 0x16
    50e0:	8f 89       	ldd	r24, Y+23	; 0x17
    50e2:	98 8d       	ldd	r25, Y+24	; 0x18
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	3f ef       	ldi	r19, 0xFF	; 255
    50e8:	4f e7       	ldi	r20, 0x7F	; 127
    50ea:	57 e4       	ldi	r21, 0x47	; 71
    50ec:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    50f0:	18 16       	cp	r1, r24
    50f2:	4c f5       	brge	.+82     	; 0x5146 <LCD_Init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f4:	69 8d       	ldd	r22, Y+25	; 0x19
    50f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	40 e2       	ldi	r20, 0x20	; 32
    5102:	51 e4       	ldi	r21, 0x41	; 65
    5104:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5108:	dc 01       	movw	r26, r24
    510a:	cb 01       	movw	r24, r22
    510c:	bc 01       	movw	r22, r24
    510e:	cd 01       	movw	r24, r26
    5110:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	9c 8b       	std	Y+20, r25	; 0x14
    511a:	8b 8b       	std	Y+19, r24	; 0x13
    511c:	0f c0       	rjmp	.+30     	; 0x513c <LCD_Init+0x10c>
    511e:	88 ec       	ldi	r24, 0xC8	; 200
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	9a 8b       	std	Y+18, r25	; 0x12
    5124:	89 8b       	std	Y+17, r24	; 0x11
    5126:	89 89       	ldd	r24, Y+17	; 0x11
    5128:	9a 89       	ldd	r25, Y+18	; 0x12
    512a:	01 97       	sbiw	r24, 0x01	; 1
    512c:	f1 f7       	brne	.-4      	; 0x512a <LCD_Init+0xfa>
    512e:	9a 8b       	std	Y+18, r25	; 0x12
    5130:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5132:	8b 89       	ldd	r24, Y+19	; 0x13
    5134:	9c 89       	ldd	r25, Y+20	; 0x14
    5136:	01 97       	sbiw	r24, 0x01	; 1
    5138:	9c 8b       	std	Y+20, r25	; 0x14
    513a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    513c:	8b 89       	ldd	r24, Y+19	; 0x13
    513e:	9c 89       	ldd	r25, Y+20	; 0x14
    5140:	00 97       	sbiw	r24, 0x00	; 0
    5142:	69 f7       	brne	.-38     	; 0x511e <LCD_Init+0xee>
    5144:	14 c0       	rjmp	.+40     	; 0x516e <LCD_Init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5146:	6d 89       	ldd	r22, Y+21	; 0x15
    5148:	7e 89       	ldd	r23, Y+22	; 0x16
    514a:	8f 89       	ldd	r24, Y+23	; 0x17
    514c:	98 8d       	ldd	r25, Y+24	; 0x18
    514e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5152:	dc 01       	movw	r26, r24
    5154:	cb 01       	movw	r24, r22
    5156:	9c 8b       	std	Y+20, r25	; 0x14
    5158:	8b 8b       	std	Y+19, r24	; 0x13
    515a:	8b 89       	ldd	r24, Y+19	; 0x13
    515c:	9c 89       	ldd	r25, Y+20	; 0x14
    515e:	98 8b       	std	Y+16, r25	; 0x10
    5160:	8f 87       	std	Y+15, r24	; 0x0f
    5162:	8f 85       	ldd	r24, Y+15	; 0x0f
    5164:	98 89       	ldd	r25, Y+16	; 0x10
    5166:	01 97       	sbiw	r24, 0x01	; 1
    5168:	f1 f7       	brne	.-4      	; 0x5166 <LCD_Init+0x136>
    516a:	98 8b       	std	Y+16, r25	; 0x10
    516c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);

	LCD_Command(0x33);
    516e:	83 e3       	ldi	r24, 0x33	; 51
    5170:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x32);
    5174:	82 e3       	ldi	r24, 0x32	; 50
    5176:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x28);
    517a:	88 e2       	ldi	r24, 0x28	; 40
    517c:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x0C);
    5180:	8c e0       	ldi	r24, 0x0C	; 12
    5182:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x06);
    5186:	86 e0       	ldi	r24, 0x06	; 6
    5188:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_Command(0x01);
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	a0 e0       	ldi	r26, 0x00	; 0
    5198:	b0 e4       	ldi	r27, 0x40	; 64
    519a:	8b 87       	std	Y+11, r24	; 0x0b
    519c:	9c 87       	std	Y+12, r25	; 0x0c
    519e:	ad 87       	std	Y+13, r26	; 0x0d
    51a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    51a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    51a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	4a ef       	ldi	r20, 0xFA	; 250
    51b0:	54 e4       	ldi	r21, 0x44	; 68
    51b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    51b6:	dc 01       	movw	r26, r24
    51b8:	cb 01       	movw	r24, r22
    51ba:	8f 83       	std	Y+7, r24	; 0x07
    51bc:	98 87       	std	Y+8, r25	; 0x08
    51be:	a9 87       	std	Y+9, r26	; 0x09
    51c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51c2:	6f 81       	ldd	r22, Y+7	; 0x07
    51c4:	78 85       	ldd	r23, Y+8	; 0x08
    51c6:	89 85       	ldd	r24, Y+9	; 0x09
    51c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	40 e8       	ldi	r20, 0x80	; 128
    51d0:	5f e3       	ldi	r21, 0x3F	; 63
    51d2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    51d6:	88 23       	and	r24, r24
    51d8:	2c f4       	brge	.+10     	; 0x51e4 <LCD_Init+0x1b4>
		__ticks = 1;
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	9e 83       	std	Y+6, r25	; 0x06
    51e0:	8d 83       	std	Y+5, r24	; 0x05
    51e2:	3f c0       	rjmp	.+126    	; 0x5262 <LCD_Init+0x232>
	else if (__tmp > 65535)
    51e4:	6f 81       	ldd	r22, Y+7	; 0x07
    51e6:	78 85       	ldd	r23, Y+8	; 0x08
    51e8:	89 85       	ldd	r24, Y+9	; 0x09
    51ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	3f ef       	ldi	r19, 0xFF	; 255
    51f0:	4f e7       	ldi	r20, 0x7F	; 127
    51f2:	57 e4       	ldi	r21, 0x47	; 71
    51f4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    51f8:	18 16       	cp	r1, r24
    51fa:	4c f5       	brge	.+82     	; 0x524e <LCD_Init+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    51fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5200:	8d 85       	ldd	r24, Y+13	; 0x0d
    5202:	9e 85       	ldd	r25, Y+14	; 0x0e
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	40 e2       	ldi	r20, 0x20	; 32
    520a:	51 e4       	ldi	r21, 0x41	; 65
    520c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	bc 01       	movw	r22, r24
    5216:	cd 01       	movw	r24, r26
    5218:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	9e 83       	std	Y+6, r25	; 0x06
    5222:	8d 83       	std	Y+5, r24	; 0x05
    5224:	0f c0       	rjmp	.+30     	; 0x5244 <LCD_Init+0x214>
    5226:	88 ec       	ldi	r24, 0xC8	; 200
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	9c 83       	std	Y+4, r25	; 0x04
    522c:	8b 83       	std	Y+3, r24	; 0x03
    522e:	8b 81       	ldd	r24, Y+3	; 0x03
    5230:	9c 81       	ldd	r25, Y+4	; 0x04
    5232:	01 97       	sbiw	r24, 0x01	; 1
    5234:	f1 f7       	brne	.-4      	; 0x5232 <LCD_Init+0x202>
    5236:	9c 83       	std	Y+4, r25	; 0x04
    5238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    523a:	8d 81       	ldd	r24, Y+5	; 0x05
    523c:	9e 81       	ldd	r25, Y+6	; 0x06
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	9e 83       	std	Y+6, r25	; 0x06
    5242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5244:	8d 81       	ldd	r24, Y+5	; 0x05
    5246:	9e 81       	ldd	r25, Y+6	; 0x06
    5248:	00 97       	sbiw	r24, 0x00	; 0
    524a:	69 f7       	brne	.-38     	; 0x5226 <LCD_Init+0x1f6>
    524c:	14 c0       	rjmp	.+40     	; 0x5276 <LCD_Init+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    524e:	6f 81       	ldd	r22, Y+7	; 0x07
    5250:	78 85       	ldd	r23, Y+8	; 0x08
    5252:	89 85       	ldd	r24, Y+9	; 0x09
    5254:	9a 85       	ldd	r25, Y+10	; 0x0a
    5256:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    525a:	dc 01       	movw	r26, r24
    525c:	cb 01       	movw	r24, r22
    525e:	9e 83       	std	Y+6, r25	; 0x06
    5260:	8d 83       	std	Y+5, r24	; 0x05
    5262:	8d 81       	ldd	r24, Y+5	; 0x05
    5264:	9e 81       	ldd	r25, Y+6	; 0x06
    5266:	9a 83       	std	Y+2, r25	; 0x02
    5268:	89 83       	std	Y+1, r24	; 0x01
    526a:	89 81       	ldd	r24, Y+1	; 0x01
    526c:	9a 81       	ldd	r25, Y+2	; 0x02
    526e:	01 97       	sbiw	r24, 0x01	; 1
    5270:	f1 f7       	brne	.-4      	; 0x526e <LCD_Init+0x23e>
    5272:	9a 83       	std	Y+2, r25	; 0x02
    5274:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    5276:	6c 96       	adiw	r28, 0x1c	; 28
    5278:	0f b6       	in	r0, 0x3f	; 63
    527a:	f8 94       	cli
    527c:	de bf       	out	0x3e, r29	; 62
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	cd bf       	out	0x3d, r28	; 61
    5282:	cf 91       	pop	r28
    5284:	df 91       	pop	r29
    5286:	08 95       	ret

00005288 <LCD_String>:

void LCD_String (char *str)		/* Send string to LCD function */
{
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	00 d0       	rcall	.+0      	; 0x528e <LCD_String+0x6>
    528e:	00 d0       	rcall	.+0      	; 0x5290 <LCD_String+0x8>
    5290:	cd b7       	in	r28, 0x3d	; 61
    5292:	de b7       	in	r29, 0x3e	; 62
    5294:	9c 83       	std	Y+4, r25	; 0x04
    5296:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    5298:	1a 82       	std	Y+2, r1	; 0x02
    529a:	19 82       	std	Y+1, r1	; 0x01
    529c:	0f c0       	rjmp	.+30     	; 0x52bc <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    529e:	29 81       	ldd	r18, Y+1	; 0x01
    52a0:	3a 81       	ldd	r19, Y+2	; 0x02
    52a2:	8b 81       	ldd	r24, Y+3	; 0x03
    52a4:	9c 81       	ldd	r25, Y+4	; 0x04
    52a6:	fc 01       	movw	r30, r24
    52a8:	e2 0f       	add	r30, r18
    52aa:	f3 1f       	adc	r31, r19
    52ac:	80 81       	ld	r24, Z
    52ae:	0e 94 a0 24 	call	0x4940	; 0x4940 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	9a 81       	ldd	r25, Y+2	; 0x02
    52b6:	01 96       	adiw	r24, 0x01	; 1
    52b8:	9a 83       	std	Y+2, r25	; 0x02
    52ba:	89 83       	std	Y+1, r24	; 0x01
    52bc:	29 81       	ldd	r18, Y+1	; 0x01
    52be:	3a 81       	ldd	r19, Y+2	; 0x02
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	9c 81       	ldd	r25, Y+4	; 0x04
    52c4:	fc 01       	movw	r30, r24
    52c6:	e2 0f       	add	r30, r18
    52c8:	f3 1f       	adc	r31, r19
    52ca:	80 81       	ld	r24, Z
    52cc:	88 23       	and	r24, r24
    52ce:	39 f7       	brne	.-50     	; 0x529e <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	0f 90       	pop	r0
    52d6:	0f 90       	pop	r0
    52d8:	cf 91       	pop	r28
    52da:	df 91       	pop	r29
    52dc:	08 95       	ret

000052de <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    52de:	df 93       	push	r29
    52e0:	cf 93       	push	r28
    52e2:	00 d0       	rcall	.+0      	; 0x52e4 <LCD_String_xy+0x6>
    52e4:	00 d0       	rcall	.+0      	; 0x52e6 <LCD_String_xy+0x8>
    52e6:	cd b7       	in	r28, 0x3d	; 61
    52e8:	de b7       	in	r29, 0x3e	; 62
    52ea:	89 83       	std	Y+1, r24	; 0x01
    52ec:	6a 83       	std	Y+2, r22	; 0x02
    52ee:	5c 83       	std	Y+4, r21	; 0x04
    52f0:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    52f2:	89 81       	ldd	r24, Y+1	; 0x01
    52f4:	88 23       	and	r24, r24
    52f6:	49 f4       	brne	.+18     	; 0x530a <LCD_String_xy+0x2c>
    52f8:	8a 81       	ldd	r24, Y+2	; 0x02
    52fa:	80 31       	cpi	r24, 0x10	; 16
    52fc:	30 f4       	brcc	.+12     	; 0x530a <LCD_String_xy+0x2c>
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    52fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5300:	8f 70       	andi	r24, 0x0F	; 15
    5302:	80 68       	ori	r24, 0x80	; 128
    5304:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
    5308:	0b c0       	rjmp	.+22     	; 0x5320 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    530a:	89 81       	ldd	r24, Y+1	; 0x01
    530c:	81 30       	cpi	r24, 0x01	; 1
    530e:	41 f4       	brne	.+16     	; 0x5320 <LCD_String_xy+0x42>
    5310:	8a 81       	ldd	r24, Y+2	; 0x02
    5312:	80 31       	cpi	r24, 0x10	; 16
    5314:	28 f4       	brcc	.+10     	; 0x5320 <LCD_String_xy+0x42>
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    5316:	8a 81       	ldd	r24, Y+2	; 0x02
    5318:	8f 70       	andi	r24, 0x0F	; 15
    531a:	80 6c       	ori	r24, 0xC0	; 192
    531c:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    5320:	8b 81       	ldd	r24, Y+3	; 0x03
    5322:	9c 81       	ldd	r25, Y+4	; 0x04
    5324:	0e 94 44 29 	call	0x5288	; 0x5288 <LCD_String>
}
    5328:	0f 90       	pop	r0
    532a:	0f 90       	pop	r0
    532c:	0f 90       	pop	r0
    532e:	0f 90       	pop	r0
    5330:	cf 91       	pop	r28
    5332:	df 91       	pop	r29
    5334:	08 95       	ret

00005336 <LCD_Clear>:

void LCD_Clear()
{
    5336:	df 93       	push	r29
    5338:	cf 93       	push	r28
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	2e 97       	sbiw	r28, 0x0e	; 14
    5340:	0f b6       	in	r0, 0x3f	; 63
    5342:	f8 94       	cli
    5344:	de bf       	out	0x3e, r29	; 62
    5346:	0f be       	out	0x3f, r0	; 63
    5348:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	a0 e0       	ldi	r26, 0x00	; 0
    5356:	b0 e4       	ldi	r27, 0x40	; 64
    5358:	8b 87       	std	Y+11, r24	; 0x0b
    535a:	9c 87       	std	Y+12, r25	; 0x0c
    535c:	ad 87       	std	Y+13, r26	; 0x0d
    535e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5360:	6b 85       	ldd	r22, Y+11	; 0x0b
    5362:	7c 85       	ldd	r23, Y+12	; 0x0c
    5364:	8d 85       	ldd	r24, Y+13	; 0x0d
    5366:	9e 85       	ldd	r25, Y+14	; 0x0e
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	4a ef       	ldi	r20, 0xFA	; 250
    536e:	54 e4       	ldi	r21, 0x44	; 68
    5370:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	8f 83       	std	Y+7, r24	; 0x07
    537a:	98 87       	std	Y+8, r25	; 0x08
    537c:	a9 87       	std	Y+9, r26	; 0x09
    537e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5380:	6f 81       	ldd	r22, Y+7	; 0x07
    5382:	78 85       	ldd	r23, Y+8	; 0x08
    5384:	89 85       	ldd	r24, Y+9	; 0x09
    5386:	9a 85       	ldd	r25, Y+10	; 0x0a
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	40 e8       	ldi	r20, 0x80	; 128
    538e:	5f e3       	ldi	r21, 0x3F	; 63
    5390:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5394:	88 23       	and	r24, r24
    5396:	2c f4       	brge	.+10     	; 0x53a2 <LCD_Clear+0x6c>
		__ticks = 1;
    5398:	81 e0       	ldi	r24, 0x01	; 1
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	9e 83       	std	Y+6, r25	; 0x06
    539e:	8d 83       	std	Y+5, r24	; 0x05
    53a0:	3f c0       	rjmp	.+126    	; 0x5420 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    53a2:	6f 81       	ldd	r22, Y+7	; 0x07
    53a4:	78 85       	ldd	r23, Y+8	; 0x08
    53a6:	89 85       	ldd	r24, Y+9	; 0x09
    53a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	3f ef       	ldi	r19, 0xFF	; 255
    53ae:	4f e7       	ldi	r20, 0x7F	; 127
    53b0:	57 e4       	ldi	r21, 0x47	; 71
    53b2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    53b6:	18 16       	cp	r1, r24
    53b8:	4c f5       	brge	.+82     	; 0x540c <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    53bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    53be:	8d 85       	ldd	r24, Y+13	; 0x0d
    53c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c2:	20 e0       	ldi	r18, 0x00	; 0
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	40 e2       	ldi	r20, 0x20	; 32
    53c8:	51 e4       	ldi	r21, 0x41	; 65
    53ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	bc 01       	movw	r22, r24
    53d4:	cd 01       	movw	r24, r26
    53d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    53da:	dc 01       	movw	r26, r24
    53dc:	cb 01       	movw	r24, r22
    53de:	9e 83       	std	Y+6, r25	; 0x06
    53e0:	8d 83       	std	Y+5, r24	; 0x05
    53e2:	0f c0       	rjmp	.+30     	; 0x5402 <LCD_Clear+0xcc>
    53e4:	88 ec       	ldi	r24, 0xC8	; 200
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	9c 83       	std	Y+4, r25	; 0x04
    53ea:	8b 83       	std	Y+3, r24	; 0x03
    53ec:	8b 81       	ldd	r24, Y+3	; 0x03
    53ee:	9c 81       	ldd	r25, Y+4	; 0x04
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	f1 f7       	brne	.-4      	; 0x53f0 <LCD_Clear+0xba>
    53f4:	9c 83       	std	Y+4, r25	; 0x04
    53f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53f8:	8d 81       	ldd	r24, Y+5	; 0x05
    53fa:	9e 81       	ldd	r25, Y+6	; 0x06
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	9e 83       	std	Y+6, r25	; 0x06
    5400:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5402:	8d 81       	ldd	r24, Y+5	; 0x05
    5404:	9e 81       	ldd	r25, Y+6	; 0x06
    5406:	00 97       	sbiw	r24, 0x00	; 0
    5408:	69 f7       	brne	.-38     	; 0x53e4 <LCD_Clear+0xae>
    540a:	14 c0       	rjmp	.+40     	; 0x5434 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    540c:	6f 81       	ldd	r22, Y+7	; 0x07
    540e:	78 85       	ldd	r23, Y+8	; 0x08
    5410:	89 85       	ldd	r24, Y+9	; 0x09
    5412:	9a 85       	ldd	r25, Y+10	; 0x0a
    5414:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	9e 83       	std	Y+6, r25	; 0x06
    541e:	8d 83       	std	Y+5, r24	; 0x05
    5420:	8d 81       	ldd	r24, Y+5	; 0x05
    5422:	9e 81       	ldd	r25, Y+6	; 0x06
    5424:	9a 83       	std	Y+2, r25	; 0x02
    5426:	89 83       	std	Y+1, r24	; 0x01
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
    542c:	01 97       	sbiw	r24, 0x01	; 1
    542e:	f1 f7       	brne	.-4      	; 0x542c <LCD_Clear+0xf6>
    5430:	9a 83       	std	Y+2, r25	; 0x02
    5432:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    5434:	80 e8       	ldi	r24, 0x80	; 128
    5436:	0e 94 28 21 	call	0x4250	; 0x4250 <LCD_Command>
}
    543a:	2e 96       	adiw	r28, 0x0e	; 14
    543c:	0f b6       	in	r0, 0x3f	; 63
    543e:	f8 94       	cli
    5440:	de bf       	out	0x3e, r29	; 62
    5442:	0f be       	out	0x3f, r0	; 63
    5444:	cd bf       	out	0x3d, r28	; 61
    5446:	cf 91       	pop	r28
    5448:	df 91       	pop	r29
    544a:	08 95       	ret

0000544c <SWCH_init>:
#include "../MCAL/DIO_Interface.h"
#include "../MCAL/DIO_Register.h"
#include "SWCH_Config.h"
#include "SWCH_Interface.h"
void SWCH_init(u8 ARG_u8InputState)
{
    544c:	df 93       	push	r29
    544e:	cf 93       	push	r28
    5450:	00 d0       	rcall	.+0      	; 0x5452 <SWCH_init+0x6>
    5452:	0f 92       	push	r0
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
    5458:	89 83       	std	Y+1, r24	; 0x01
    switch(ARG_u8InputState)
    545a:	89 81       	ldd	r24, Y+1	; 0x01
    545c:	28 2f       	mov	r18, r24
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	3b 83       	std	Y+3, r19	; 0x03
    5462:	2a 83       	std	Y+2, r18	; 0x02
    5464:	8a 81       	ldd	r24, Y+2	; 0x02
    5466:	9b 81       	ldd	r25, Y+3	; 0x03
    5468:	00 97       	sbiw	r24, 0x00	; 0
    546a:	31 f0       	breq	.+12     	; 0x5478 <SWCH_init+0x2c>
    546c:	2a 81       	ldd	r18, Y+2	; 0x02
    546e:	3b 81       	ldd	r19, Y+3	; 0x03
    5470:	21 30       	cpi	r18, 0x01	; 1
    5472:	31 05       	cpc	r19, r1
    5474:	61 f0       	breq	.+24     	; 0x548e <SWCH_init+0x42>
    5476:	10 c0       	rjmp	.+32     	; 0x5498 <SWCH_init+0x4c>
    {
        case SWCH_INPUT_PULLUP:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    5478:	82 e0       	ldi	r24, 0x02	; 2
    547a:	60 e0       	ldi	r22, 0x00	; 0
    547c:	40 e0       	ldi	r20, 0x00	; 0
    547e:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
            DIO_voidSetPinValue(SWCH_PORT, SWCH_PIN, 1);
    5482:	82 e0       	ldi	r24, 0x02	; 2
    5484:	60 e0       	ldi	r22, 0x00	; 0
    5486:	41 e0       	ldi	r20, 0x01	; 1
    5488:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    548c:	05 c0       	rjmp	.+10     	; 0x5498 <SWCH_init+0x4c>
            break;

        case SWCH_INPUT_FLOATING:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    548e:	82 e0       	ldi	r24, 0x02	; 2
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
            break;

        default:
            break;
    }
}
    5498:	0f 90       	pop	r0
    549a:	0f 90       	pop	r0
    549c:	0f 90       	pop	r0
    549e:	cf 91       	pop	r28
    54a0:	df 91       	pop	r29
    54a2:	08 95       	ret

000054a4 <SWCH_GetVal>:

u8 SWCH_GetVal()
{
    54a4:	df 93       	push	r29
    54a6:	cf 93       	push	r28
    54a8:	cd b7       	in	r28, 0x3d	; 61
    54aa:	de b7       	in	r29, 0x3e	; 62
    return (DIO_u8GetPinValue(SWCH_PORT, SWCH_PIN));
    54ac:	82 e0       	ldi	r24, 0x02	; 2
    54ae:	60 e0       	ldi	r22, 0x00	; 0
    54b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8GetPinValue>
}
    54b4:	cf 91       	pop	r28
    54b6:	df 91       	pop	r29
    54b8:	08 95       	ret

000054ba <STEPPER_voidInit>:
#include "../MCAL/DIO_Interface.h"
#include "Stepper_interface.h"
#include "Stepper_config.h"
#include "util/delay.h"

void STEPPER_voidInit(void){
    54ba:	df 93       	push	r29
    54bc:	cf 93       	push	r28
    54be:	cd b7       	in	r28, 0x3d	; 61
    54c0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_OUTPUT);
    54c2:	83 e0       	ldi	r24, 0x03	; 3
    54c4:	60 e0       	ldi	r22, 0x00	; 0
    54c6:	41 e0       	ldi	r20, 0x01	; 1
    54c8:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_OUTPUT);
    54cc:	83 e0       	ldi	r24, 0x03	; 3
    54ce:	61 e0       	ldi	r22, 0x01	; 1
    54d0:	41 e0       	ldi	r20, 0x01	; 1
    54d2:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_OUTPUT);
    54d6:	83 e0       	ldi	r24, 0x03	; 3
    54d8:	62 e0       	ldi	r22, 0x02	; 2
    54da:	41 e0       	ldi	r20, 0x01	; 1
    54dc:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_OUTPUT);
    54e0:	83 e0       	ldi	r24, 0x03	; 3
    54e2:	63 e0       	ldi	r22, 0x03	; 3
    54e4:	41 e0       	ldi	r20, 0x01	; 1
    54e6:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_voidSetPinDirection>
}
    54ea:	cf 91       	pop	r28
    54ec:	df 91       	pop	r29
    54ee:	08 95       	ret

000054f0 <STEPPER_voidRotateCW>:
void STEPPER_voidRotateCW(void){
    54f0:	df 93       	push	r29
    54f2:	cf 93       	push	r28
    54f4:	cd b7       	in	r28, 0x3d	; 61
    54f6:	de b7       	in	r29, 0x3e	; 62
    54f8:	e8 97       	sbiw	r28, 0x38	; 56
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	f8 94       	cli
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    5504:	83 e0       	ldi	r24, 0x03	; 3
    5506:	60 e0       	ldi	r22, 0x00	; 0
    5508:	41 e0       	ldi	r20, 0x01	; 1
    550a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    550e:	83 e0       	ldi	r24, 0x03	; 3
    5510:	61 e0       	ldi	r22, 0x01	; 1
    5512:	40 e0       	ldi	r20, 0x00	; 0
    5514:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    5518:	83 e0       	ldi	r24, 0x03	; 3
    551a:	62 e0       	ldi	r22, 0x02	; 2
    551c:	40 e0       	ldi	r20, 0x00	; 0
    551e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    5522:	83 e0       	ldi	r24, 0x03	; 3
    5524:	63 e0       	ldi	r22, 0x03	; 3
    5526:	40 e0       	ldi	r20, 0x00	; 0
    5528:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	a0 ea       	ldi	r26, 0xA0	; 160
    5532:	b0 e4       	ldi	r27, 0x40	; 64
    5534:	8d ab       	std	Y+53, r24	; 0x35
    5536:	9e ab       	std	Y+54, r25	; 0x36
    5538:	af ab       	std	Y+55, r26	; 0x37
    553a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    553c:	6d a9       	ldd	r22, Y+53	; 0x35
    553e:	7e a9       	ldd	r23, Y+54	; 0x36
    5540:	8f a9       	ldd	r24, Y+55	; 0x37
    5542:	98 ad       	ldd	r25, Y+56	; 0x38
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	4a ef       	ldi	r20, 0xFA	; 250
    554a:	54 e4       	ldi	r21, 0x44	; 68
    554c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	89 ab       	std	Y+49, r24	; 0x31
    5556:	9a ab       	std	Y+50, r25	; 0x32
    5558:	ab ab       	std	Y+51, r26	; 0x33
    555a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    555c:	69 a9       	ldd	r22, Y+49	; 0x31
    555e:	7a a9       	ldd	r23, Y+50	; 0x32
    5560:	8b a9       	ldd	r24, Y+51	; 0x33
    5562:	9c a9       	ldd	r25, Y+52	; 0x34
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	40 e8       	ldi	r20, 0x80	; 128
    556a:	5f e3       	ldi	r21, 0x3F	; 63
    556c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5570:	88 23       	and	r24, r24
    5572:	2c f4       	brge	.+10     	; 0x557e <STEPPER_voidRotateCW+0x8e>
		__ticks = 1;
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	98 ab       	std	Y+48, r25	; 0x30
    557a:	8f a7       	std	Y+47, r24	; 0x2f
    557c:	3f c0       	rjmp	.+126    	; 0x55fc <STEPPER_voidRotateCW+0x10c>
	else if (__tmp > 65535)
    557e:	69 a9       	ldd	r22, Y+49	; 0x31
    5580:	7a a9       	ldd	r23, Y+50	; 0x32
    5582:	8b a9       	ldd	r24, Y+51	; 0x33
    5584:	9c a9       	ldd	r25, Y+52	; 0x34
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	3f ef       	ldi	r19, 0xFF	; 255
    558a:	4f e7       	ldi	r20, 0x7F	; 127
    558c:	57 e4       	ldi	r21, 0x47	; 71
    558e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5592:	18 16       	cp	r1, r24
    5594:	4c f5       	brge	.+82     	; 0x55e8 <STEPPER_voidRotateCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5596:	6d a9       	ldd	r22, Y+53	; 0x35
    5598:	7e a9       	ldd	r23, Y+54	; 0x36
    559a:	8f a9       	ldd	r24, Y+55	; 0x37
    559c:	98 ad       	ldd	r25, Y+56	; 0x38
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e2       	ldi	r20, 0x20	; 32
    55a4:	51 e4       	ldi	r21, 0x41	; 65
    55a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	bc 01       	movw	r22, r24
    55b0:	cd 01       	movw	r24, r26
    55b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    55b6:	dc 01       	movw	r26, r24
    55b8:	cb 01       	movw	r24, r22
    55ba:	98 ab       	std	Y+48, r25	; 0x30
    55bc:	8f a7       	std	Y+47, r24	; 0x2f
    55be:	0f c0       	rjmp	.+30     	; 0x55de <STEPPER_voidRotateCW+0xee>
    55c0:	88 ec       	ldi	r24, 0xC8	; 200
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	9e a7       	std	Y+46, r25	; 0x2e
    55c6:	8d a7       	std	Y+45, r24	; 0x2d
    55c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    55ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    55cc:	01 97       	sbiw	r24, 0x01	; 1
    55ce:	f1 f7       	brne	.-4      	; 0x55cc <STEPPER_voidRotateCW+0xdc>
    55d0:	9e a7       	std	Y+46, r25	; 0x2e
    55d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    55d6:	98 a9       	ldd	r25, Y+48	; 0x30
    55d8:	01 97       	sbiw	r24, 0x01	; 1
    55da:	98 ab       	std	Y+48, r25	; 0x30
    55dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55de:	8f a5       	ldd	r24, Y+47	; 0x2f
    55e0:	98 a9       	ldd	r25, Y+48	; 0x30
    55e2:	00 97       	sbiw	r24, 0x00	; 0
    55e4:	69 f7       	brne	.-38     	; 0x55c0 <STEPPER_voidRotateCW+0xd0>
    55e6:	14 c0       	rjmp	.+40     	; 0x5610 <STEPPER_voidRotateCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55e8:	69 a9       	ldd	r22, Y+49	; 0x31
    55ea:	7a a9       	ldd	r23, Y+50	; 0x32
    55ec:	8b a9       	ldd	r24, Y+51	; 0x33
    55ee:	9c a9       	ldd	r25, Y+52	; 0x34
    55f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	98 ab       	std	Y+48, r25	; 0x30
    55fa:	8f a7       	std	Y+47, r24	; 0x2f
    55fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    55fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5600:	9c a7       	std	Y+44, r25	; 0x2c
    5602:	8b a7       	std	Y+43, r24	; 0x2b
    5604:	8b a5       	ldd	r24, Y+43	; 0x2b
    5606:	9c a5       	ldd	r25, Y+44	; 0x2c
    5608:	01 97       	sbiw	r24, 0x01	; 1
    560a:	f1 f7       	brne	.-4      	; 0x5608 <STEPPER_voidRotateCW+0x118>
    560c:	9c a7       	std	Y+44, r25	; 0x2c
    560e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    5610:	83 e0       	ldi	r24, 0x03	; 3
    5612:	60 e0       	ldi	r22, 0x00	; 0
    5614:	40 e0       	ldi	r20, 0x00	; 0
    5616:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    561a:	83 e0       	ldi	r24, 0x03	; 3
    561c:	61 e0       	ldi	r22, 0x01	; 1
    561e:	41 e0       	ldi	r20, 0x01	; 1
    5620:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    5624:	83 e0       	ldi	r24, 0x03	; 3
    5626:	62 e0       	ldi	r22, 0x02	; 2
    5628:	40 e0       	ldi	r20, 0x00	; 0
    562a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    562e:	83 e0       	ldi	r24, 0x03	; 3
    5630:	63 e0       	ldi	r22, 0x03	; 3
    5632:	40 e0       	ldi	r20, 0x00	; 0
    5634:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5638:	80 e0       	ldi	r24, 0x00	; 0
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	a0 ea       	ldi	r26, 0xA0	; 160
    563e:	b0 e4       	ldi	r27, 0x40	; 64
    5640:	8f a3       	std	Y+39, r24	; 0x27
    5642:	98 a7       	std	Y+40, r25	; 0x28
    5644:	a9 a7       	std	Y+41, r26	; 0x29
    5646:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5648:	6f a1       	ldd	r22, Y+39	; 0x27
    564a:	78 a5       	ldd	r23, Y+40	; 0x28
    564c:	89 a5       	ldd	r24, Y+41	; 0x29
    564e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	4a ef       	ldi	r20, 0xFA	; 250
    5656:	54 e4       	ldi	r21, 0x44	; 68
    5658:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	8b a3       	std	Y+35, r24	; 0x23
    5662:	9c a3       	std	Y+36, r25	; 0x24
    5664:	ad a3       	std	Y+37, r26	; 0x25
    5666:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5668:	6b a1       	ldd	r22, Y+35	; 0x23
    566a:	7c a1       	ldd	r23, Y+36	; 0x24
    566c:	8d a1       	ldd	r24, Y+37	; 0x25
    566e:	9e a1       	ldd	r25, Y+38	; 0x26
    5670:	20 e0       	ldi	r18, 0x00	; 0
    5672:	30 e0       	ldi	r19, 0x00	; 0
    5674:	40 e8       	ldi	r20, 0x80	; 128
    5676:	5f e3       	ldi	r21, 0x3F	; 63
    5678:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    567c:	88 23       	and	r24, r24
    567e:	2c f4       	brge	.+10     	; 0x568a <STEPPER_voidRotateCW+0x19a>
		__ticks = 1;
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	9a a3       	std	Y+34, r25	; 0x22
    5686:	89 a3       	std	Y+33, r24	; 0x21
    5688:	3f c0       	rjmp	.+126    	; 0x5708 <STEPPER_voidRotateCW+0x218>
	else if (__tmp > 65535)
    568a:	6b a1       	ldd	r22, Y+35	; 0x23
    568c:	7c a1       	ldd	r23, Y+36	; 0x24
    568e:	8d a1       	ldd	r24, Y+37	; 0x25
    5690:	9e a1       	ldd	r25, Y+38	; 0x26
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	3f ef       	ldi	r19, 0xFF	; 255
    5696:	4f e7       	ldi	r20, 0x7F	; 127
    5698:	57 e4       	ldi	r21, 0x47	; 71
    569a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    569e:	18 16       	cp	r1, r24
    56a0:	4c f5       	brge	.+82     	; 0x56f4 <STEPPER_voidRotateCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56a2:	6f a1       	ldd	r22, Y+39	; 0x27
    56a4:	78 a5       	ldd	r23, Y+40	; 0x28
    56a6:	89 a5       	ldd	r24, Y+41	; 0x29
    56a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	40 e2       	ldi	r20, 0x20	; 32
    56b0:	51 e4       	ldi	r21, 0x41	; 65
    56b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    56b6:	dc 01       	movw	r26, r24
    56b8:	cb 01       	movw	r24, r22
    56ba:	bc 01       	movw	r22, r24
    56bc:	cd 01       	movw	r24, r26
    56be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	9a a3       	std	Y+34, r25	; 0x22
    56c8:	89 a3       	std	Y+33, r24	; 0x21
    56ca:	0f c0       	rjmp	.+30     	; 0x56ea <STEPPER_voidRotateCW+0x1fa>
    56cc:	88 ec       	ldi	r24, 0xC8	; 200
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	98 a3       	std	Y+32, r25	; 0x20
    56d2:	8f 8f       	std	Y+31, r24	; 0x1f
    56d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    56d6:	98 a1       	ldd	r25, Y+32	; 0x20
    56d8:	01 97       	sbiw	r24, 0x01	; 1
    56da:	f1 f7       	brne	.-4      	; 0x56d8 <STEPPER_voidRotateCW+0x1e8>
    56dc:	98 a3       	std	Y+32, r25	; 0x20
    56de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56e0:	89 a1       	ldd	r24, Y+33	; 0x21
    56e2:	9a a1       	ldd	r25, Y+34	; 0x22
    56e4:	01 97       	sbiw	r24, 0x01	; 1
    56e6:	9a a3       	std	Y+34, r25	; 0x22
    56e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56ea:	89 a1       	ldd	r24, Y+33	; 0x21
    56ec:	9a a1       	ldd	r25, Y+34	; 0x22
    56ee:	00 97       	sbiw	r24, 0x00	; 0
    56f0:	69 f7       	brne	.-38     	; 0x56cc <STEPPER_voidRotateCW+0x1dc>
    56f2:	14 c0       	rjmp	.+40     	; 0x571c <STEPPER_voidRotateCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f4:	6b a1       	ldd	r22, Y+35	; 0x23
    56f6:	7c a1       	ldd	r23, Y+36	; 0x24
    56f8:	8d a1       	ldd	r24, Y+37	; 0x25
    56fa:	9e a1       	ldd	r25, Y+38	; 0x26
    56fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5700:	dc 01       	movw	r26, r24
    5702:	cb 01       	movw	r24, r22
    5704:	9a a3       	std	Y+34, r25	; 0x22
    5706:	89 a3       	std	Y+33, r24	; 0x21
    5708:	89 a1       	ldd	r24, Y+33	; 0x21
    570a:	9a a1       	ldd	r25, Y+34	; 0x22
    570c:	9e 8f       	std	Y+30, r25	; 0x1e
    570e:	8d 8f       	std	Y+29, r24	; 0x1d
    5710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5714:	01 97       	sbiw	r24, 0x01	; 1
    5716:	f1 f7       	brne	.-4      	; 0x5714 <STEPPER_voidRotateCW+0x224>
    5718:	9e 8f       	std	Y+30, r25	; 0x1e
    571a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    571c:	83 e0       	ldi	r24, 0x03	; 3
    571e:	60 e0       	ldi	r22, 0x00	; 0
    5720:	40 e0       	ldi	r20, 0x00	; 0
    5722:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    5726:	83 e0       	ldi	r24, 0x03	; 3
    5728:	61 e0       	ldi	r22, 0x01	; 1
    572a:	40 e0       	ldi	r20, 0x00	; 0
    572c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    5730:	83 e0       	ldi	r24, 0x03	; 3
    5732:	62 e0       	ldi	r22, 0x02	; 2
    5734:	41 e0       	ldi	r20, 0x01	; 1
    5736:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    573a:	83 e0       	ldi	r24, 0x03	; 3
    573c:	63 e0       	ldi	r22, 0x03	; 3
    573e:	40 e0       	ldi	r20, 0x00	; 0
    5740:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	a0 ea       	ldi	r26, 0xA0	; 160
    574a:	b0 e4       	ldi	r27, 0x40	; 64
    574c:	89 8f       	std	Y+25, r24	; 0x19
    574e:	9a 8f       	std	Y+26, r25	; 0x1a
    5750:	ab 8f       	std	Y+27, r26	; 0x1b
    5752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5754:	69 8d       	ldd	r22, Y+25	; 0x19
    5756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    575a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	4a ef       	ldi	r20, 0xFA	; 250
    5762:	54 e4       	ldi	r21, 0x44	; 68
    5764:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	8d 8b       	std	Y+21, r24	; 0x15
    576e:	9e 8b       	std	Y+22, r25	; 0x16
    5770:	af 8b       	std	Y+23, r26	; 0x17
    5772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5774:	6d 89       	ldd	r22, Y+21	; 0x15
    5776:	7e 89       	ldd	r23, Y+22	; 0x16
    5778:	8f 89       	ldd	r24, Y+23	; 0x17
    577a:	98 8d       	ldd	r25, Y+24	; 0x18
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e8       	ldi	r20, 0x80	; 128
    5782:	5f e3       	ldi	r21, 0x3F	; 63
    5784:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5788:	88 23       	and	r24, r24
    578a:	2c f4       	brge	.+10     	; 0x5796 <STEPPER_voidRotateCW+0x2a6>
		__ticks = 1;
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	9c 8b       	std	Y+20, r25	; 0x14
    5792:	8b 8b       	std	Y+19, r24	; 0x13
    5794:	3f c0       	rjmp	.+126    	; 0x5814 <STEPPER_voidRotateCW+0x324>
	else if (__tmp > 65535)
    5796:	6d 89       	ldd	r22, Y+21	; 0x15
    5798:	7e 89       	ldd	r23, Y+22	; 0x16
    579a:	8f 89       	ldd	r24, Y+23	; 0x17
    579c:	98 8d       	ldd	r25, Y+24	; 0x18
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	3f ef       	ldi	r19, 0xFF	; 255
    57a2:	4f e7       	ldi	r20, 0x7F	; 127
    57a4:	57 e4       	ldi	r21, 0x47	; 71
    57a6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    57aa:	18 16       	cp	r1, r24
    57ac:	4c f5       	brge	.+82     	; 0x5800 <STEPPER_voidRotateCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ae:	69 8d       	ldd	r22, Y+25	; 0x19
    57b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	30 e0       	ldi	r19, 0x00	; 0
    57ba:	40 e2       	ldi	r20, 0x20	; 32
    57bc:	51 e4       	ldi	r21, 0x41	; 65
    57be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    57c2:	dc 01       	movw	r26, r24
    57c4:	cb 01       	movw	r24, r22
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	9c 8b       	std	Y+20, r25	; 0x14
    57d4:	8b 8b       	std	Y+19, r24	; 0x13
    57d6:	0f c0       	rjmp	.+30     	; 0x57f6 <STEPPER_voidRotateCW+0x306>
    57d8:	88 ec       	ldi	r24, 0xC8	; 200
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	9a 8b       	std	Y+18, r25	; 0x12
    57de:	89 8b       	std	Y+17, r24	; 0x11
    57e0:	89 89       	ldd	r24, Y+17	; 0x11
    57e2:	9a 89       	ldd	r25, Y+18	; 0x12
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <STEPPER_voidRotateCW+0x2f4>
    57e8:	9a 8b       	std	Y+18, r25	; 0x12
    57ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ec:	8b 89       	ldd	r24, Y+19	; 0x13
    57ee:	9c 89       	ldd	r25, Y+20	; 0x14
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	9c 8b       	std	Y+20, r25	; 0x14
    57f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57f6:	8b 89       	ldd	r24, Y+19	; 0x13
    57f8:	9c 89       	ldd	r25, Y+20	; 0x14
    57fa:	00 97       	sbiw	r24, 0x00	; 0
    57fc:	69 f7       	brne	.-38     	; 0x57d8 <STEPPER_voidRotateCW+0x2e8>
    57fe:	14 c0       	rjmp	.+40     	; 0x5828 <STEPPER_voidRotateCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5800:	6d 89       	ldd	r22, Y+21	; 0x15
    5802:	7e 89       	ldd	r23, Y+22	; 0x16
    5804:	8f 89       	ldd	r24, Y+23	; 0x17
    5806:	98 8d       	ldd	r25, Y+24	; 0x18
    5808:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	9c 8b       	std	Y+20, r25	; 0x14
    5812:	8b 8b       	std	Y+19, r24	; 0x13
    5814:	8b 89       	ldd	r24, Y+19	; 0x13
    5816:	9c 89       	ldd	r25, Y+20	; 0x14
    5818:	98 8b       	std	Y+16, r25	; 0x10
    581a:	8f 87       	std	Y+15, r24	; 0x0f
    581c:	8f 85       	ldd	r24, Y+15	; 0x0f
    581e:	98 89       	ldd	r25, Y+16	; 0x10
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <STEPPER_voidRotateCW+0x330>
    5824:	98 8b       	std	Y+16, r25	; 0x10
    5826:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    5828:	83 e0       	ldi	r24, 0x03	; 3
    582a:	60 e0       	ldi	r22, 0x00	; 0
    582c:	40 e0       	ldi	r20, 0x00	; 0
    582e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    5832:	83 e0       	ldi	r24, 0x03	; 3
    5834:	61 e0       	ldi	r22, 0x01	; 1
    5836:	40 e0       	ldi	r20, 0x00	; 0
    5838:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    583c:	83 e0       	ldi	r24, 0x03	; 3
    583e:	62 e0       	ldi	r22, 0x02	; 2
    5840:	40 e0       	ldi	r20, 0x00	; 0
    5842:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    5846:	83 e0       	ldi	r24, 0x03	; 3
    5848:	63 e0       	ldi	r22, 0x03	; 3
    584a:	41 e0       	ldi	r20, 0x01	; 1
    584c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	a0 ea       	ldi	r26, 0xA0	; 160
    5856:	b0 e4       	ldi	r27, 0x40	; 64
    5858:	8b 87       	std	Y+11, r24	; 0x0b
    585a:	9c 87       	std	Y+12, r25	; 0x0c
    585c:	ad 87       	std	Y+13, r26	; 0x0d
    585e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5860:	6b 85       	ldd	r22, Y+11	; 0x0b
    5862:	7c 85       	ldd	r23, Y+12	; 0x0c
    5864:	8d 85       	ldd	r24, Y+13	; 0x0d
    5866:	9e 85       	ldd	r25, Y+14	; 0x0e
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	4a ef       	ldi	r20, 0xFA	; 250
    586e:	54 e4       	ldi	r21, 0x44	; 68
    5870:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5874:	dc 01       	movw	r26, r24
    5876:	cb 01       	movw	r24, r22
    5878:	8f 83       	std	Y+7, r24	; 0x07
    587a:	98 87       	std	Y+8, r25	; 0x08
    587c:	a9 87       	std	Y+9, r26	; 0x09
    587e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5880:	6f 81       	ldd	r22, Y+7	; 0x07
    5882:	78 85       	ldd	r23, Y+8	; 0x08
    5884:	89 85       	ldd	r24, Y+9	; 0x09
    5886:	9a 85       	ldd	r25, Y+10	; 0x0a
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	40 e8       	ldi	r20, 0x80	; 128
    588e:	5f e3       	ldi	r21, 0x3F	; 63
    5890:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5894:	88 23       	and	r24, r24
    5896:	2c f4       	brge	.+10     	; 0x58a2 <STEPPER_voidRotateCW+0x3b2>
		__ticks = 1;
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	9e 83       	std	Y+6, r25	; 0x06
    589e:	8d 83       	std	Y+5, r24	; 0x05
    58a0:	3f c0       	rjmp	.+126    	; 0x5920 <STEPPER_voidRotateCW+0x430>
	else if (__tmp > 65535)
    58a2:	6f 81       	ldd	r22, Y+7	; 0x07
    58a4:	78 85       	ldd	r23, Y+8	; 0x08
    58a6:	89 85       	ldd	r24, Y+9	; 0x09
    58a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	3f ef       	ldi	r19, 0xFF	; 255
    58ae:	4f e7       	ldi	r20, 0x7F	; 127
    58b0:	57 e4       	ldi	r21, 0x47	; 71
    58b2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    58b6:	18 16       	cp	r1, r24
    58b8:	4c f5       	brge	.+82     	; 0x590c <STEPPER_voidRotateCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    58bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    58be:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58c2:	20 e0       	ldi	r18, 0x00	; 0
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	40 e2       	ldi	r20, 0x20	; 32
    58c8:	51 e4       	ldi	r21, 0x41	; 65
    58ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    58ce:	dc 01       	movw	r26, r24
    58d0:	cb 01       	movw	r24, r22
    58d2:	bc 01       	movw	r22, r24
    58d4:	cd 01       	movw	r24, r26
    58d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    58da:	dc 01       	movw	r26, r24
    58dc:	cb 01       	movw	r24, r22
    58de:	9e 83       	std	Y+6, r25	; 0x06
    58e0:	8d 83       	std	Y+5, r24	; 0x05
    58e2:	0f c0       	rjmp	.+30     	; 0x5902 <STEPPER_voidRotateCW+0x412>
    58e4:	88 ec       	ldi	r24, 0xC8	; 200
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	9c 83       	std	Y+4, r25	; 0x04
    58ea:	8b 83       	std	Y+3, r24	; 0x03
    58ec:	8b 81       	ldd	r24, Y+3	; 0x03
    58ee:	9c 81       	ldd	r25, Y+4	; 0x04
    58f0:	01 97       	sbiw	r24, 0x01	; 1
    58f2:	f1 f7       	brne	.-4      	; 0x58f0 <STEPPER_voidRotateCW+0x400>
    58f4:	9c 83       	std	Y+4, r25	; 0x04
    58f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58f8:	8d 81       	ldd	r24, Y+5	; 0x05
    58fa:	9e 81       	ldd	r25, Y+6	; 0x06
    58fc:	01 97       	sbiw	r24, 0x01	; 1
    58fe:	9e 83       	std	Y+6, r25	; 0x06
    5900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5902:	8d 81       	ldd	r24, Y+5	; 0x05
    5904:	9e 81       	ldd	r25, Y+6	; 0x06
    5906:	00 97       	sbiw	r24, 0x00	; 0
    5908:	69 f7       	brne	.-38     	; 0x58e4 <STEPPER_voidRotateCW+0x3f4>
    590a:	14 c0       	rjmp	.+40     	; 0x5934 <STEPPER_voidRotateCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    590c:	6f 81       	ldd	r22, Y+7	; 0x07
    590e:	78 85       	ldd	r23, Y+8	; 0x08
    5910:	89 85       	ldd	r24, Y+9	; 0x09
    5912:	9a 85       	ldd	r25, Y+10	; 0x0a
    5914:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5918:	dc 01       	movw	r26, r24
    591a:	cb 01       	movw	r24, r22
    591c:	9e 83       	std	Y+6, r25	; 0x06
    591e:	8d 83       	std	Y+5, r24	; 0x05
    5920:	8d 81       	ldd	r24, Y+5	; 0x05
    5922:	9e 81       	ldd	r25, Y+6	; 0x06
    5924:	9a 83       	std	Y+2, r25	; 0x02
    5926:	89 83       	std	Y+1, r24	; 0x01
    5928:	89 81       	ldd	r24, Y+1	; 0x01
    592a:	9a 81       	ldd	r25, Y+2	; 0x02
    592c:	01 97       	sbiw	r24, 0x01	; 1
    592e:	f1 f7       	brne	.-4      	; 0x592c <STEPPER_voidRotateCW+0x43c>
    5930:	9a 83       	std	Y+2, r25	; 0x02
    5932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    5934:	e8 96       	adiw	r28, 0x38	; 56
    5936:	0f b6       	in	r0, 0x3f	; 63
    5938:	f8 94       	cli
    593a:	de bf       	out	0x3e, r29	; 62
    593c:	0f be       	out	0x3f, r0	; 63
    593e:	cd bf       	out	0x3d, r28	; 61
    5940:	cf 91       	pop	r28
    5942:	df 91       	pop	r29
    5944:	08 95       	ret

00005946 <STEPPER_voidRotateACW>:
void STEPPER_voidRotateACW(void){
    5946:	df 93       	push	r29
    5948:	cf 93       	push	r28
    594a:	cd b7       	in	r28, 0x3d	; 61
    594c:	de b7       	in	r29, 0x3e	; 62
    594e:	e8 97       	sbiw	r28, 0x38	; 56
    5950:	0f b6       	in	r0, 0x3f	; 63
    5952:	f8 94       	cli
    5954:	de bf       	out	0x3e, r29	; 62
    5956:	0f be       	out	0x3f, r0	; 63
    5958:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    595a:	83 e0       	ldi	r24, 0x03	; 3
    595c:	63 e0       	ldi	r22, 0x03	; 3
    595e:	41 e0       	ldi	r20, 0x01	; 1
    5960:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    5964:	83 e0       	ldi	r24, 0x03	; 3
    5966:	62 e0       	ldi	r22, 0x02	; 2
    5968:	40 e0       	ldi	r20, 0x00	; 0
    596a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    596e:	83 e0       	ldi	r24, 0x03	; 3
    5970:	61 e0       	ldi	r22, 0x01	; 1
    5972:	40 e0       	ldi	r20, 0x00	; 0
    5974:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    5978:	83 e0       	ldi	r24, 0x03	; 3
    597a:	60 e0       	ldi	r22, 0x00	; 0
    597c:	40 e0       	ldi	r20, 0x00	; 0
    597e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	a0 ea       	ldi	r26, 0xA0	; 160
    5988:	b0 e4       	ldi	r27, 0x40	; 64
    598a:	8d ab       	std	Y+53, r24	; 0x35
    598c:	9e ab       	std	Y+54, r25	; 0x36
    598e:	af ab       	std	Y+55, r26	; 0x37
    5990:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5992:	6d a9       	ldd	r22, Y+53	; 0x35
    5994:	7e a9       	ldd	r23, Y+54	; 0x36
    5996:	8f a9       	ldd	r24, Y+55	; 0x37
    5998:	98 ad       	ldd	r25, Y+56	; 0x38
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	4a ef       	ldi	r20, 0xFA	; 250
    59a0:	54 e4       	ldi	r21, 0x44	; 68
    59a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	89 ab       	std	Y+49, r24	; 0x31
    59ac:	9a ab       	std	Y+50, r25	; 0x32
    59ae:	ab ab       	std	Y+51, r26	; 0x33
    59b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    59b2:	69 a9       	ldd	r22, Y+49	; 0x31
    59b4:	7a a9       	ldd	r23, Y+50	; 0x32
    59b6:	8b a9       	ldd	r24, Y+51	; 0x33
    59b8:	9c a9       	ldd	r25, Y+52	; 0x34
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	40 e8       	ldi	r20, 0x80	; 128
    59c0:	5f e3       	ldi	r21, 0x3F	; 63
    59c2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    59c6:	88 23       	and	r24, r24
    59c8:	2c f4       	brge	.+10     	; 0x59d4 <STEPPER_voidRotateACW+0x8e>
		__ticks = 1;
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	98 ab       	std	Y+48, r25	; 0x30
    59d0:	8f a7       	std	Y+47, r24	; 0x2f
    59d2:	3f c0       	rjmp	.+126    	; 0x5a52 <STEPPER_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    59d4:	69 a9       	ldd	r22, Y+49	; 0x31
    59d6:	7a a9       	ldd	r23, Y+50	; 0x32
    59d8:	8b a9       	ldd	r24, Y+51	; 0x33
    59da:	9c a9       	ldd	r25, Y+52	; 0x34
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	3f ef       	ldi	r19, 0xFF	; 255
    59e0:	4f e7       	ldi	r20, 0x7F	; 127
    59e2:	57 e4       	ldi	r21, 0x47	; 71
    59e4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    59e8:	18 16       	cp	r1, r24
    59ea:	4c f5       	brge	.+82     	; 0x5a3e <STEPPER_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ec:	6d a9       	ldd	r22, Y+53	; 0x35
    59ee:	7e a9       	ldd	r23, Y+54	; 0x36
    59f0:	8f a9       	ldd	r24, Y+55	; 0x37
    59f2:	98 ad       	ldd	r25, Y+56	; 0x38
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	40 e2       	ldi	r20, 0x20	; 32
    59fa:	51 e4       	ldi	r21, 0x41	; 65
    59fc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5a00:	dc 01       	movw	r26, r24
    5a02:	cb 01       	movw	r24, r22
    5a04:	bc 01       	movw	r22, r24
    5a06:	cd 01       	movw	r24, r26
    5a08:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	cb 01       	movw	r24, r22
    5a10:	98 ab       	std	Y+48, r25	; 0x30
    5a12:	8f a7       	std	Y+47, r24	; 0x2f
    5a14:	0f c0       	rjmp	.+30     	; 0x5a34 <STEPPER_voidRotateACW+0xee>
    5a16:	88 ec       	ldi	r24, 0xC8	; 200
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	9e a7       	std	Y+46, r25	; 0x2e
    5a1c:	8d a7       	std	Y+45, r24	; 0x2d
    5a1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a20:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	f1 f7       	brne	.-4      	; 0x5a22 <STEPPER_voidRotateACW+0xdc>
    5a26:	9e a7       	std	Y+46, r25	; 0x2e
    5a28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    5a2e:	01 97       	sbiw	r24, 0x01	; 1
    5a30:	98 ab       	std	Y+48, r25	; 0x30
    5a32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a36:	98 a9       	ldd	r25, Y+48	; 0x30
    5a38:	00 97       	sbiw	r24, 0x00	; 0
    5a3a:	69 f7       	brne	.-38     	; 0x5a16 <STEPPER_voidRotateACW+0xd0>
    5a3c:	14 c0       	rjmp	.+40     	; 0x5a66 <STEPPER_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    5a40:	7a a9       	ldd	r23, Y+50	; 0x32
    5a42:	8b a9       	ldd	r24, Y+51	; 0x33
    5a44:	9c a9       	ldd	r25, Y+52	; 0x34
    5a46:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	cb 01       	movw	r24, r22
    5a4e:	98 ab       	std	Y+48, r25	; 0x30
    5a50:	8f a7       	std	Y+47, r24	; 0x2f
    5a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a54:	98 a9       	ldd	r25, Y+48	; 0x30
    5a56:	9c a7       	std	Y+44, r25	; 0x2c
    5a58:	8b a7       	std	Y+43, r24	; 0x2b
    5a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <STEPPER_voidRotateACW+0x118>
    5a62:	9c a7       	std	Y+44, r25	; 0x2c
    5a64:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    5a66:	83 e0       	ldi	r24, 0x03	; 3
    5a68:	63 e0       	ldi	r22, 0x03	; 3
    5a6a:	40 e0       	ldi	r20, 0x00	; 0
    5a6c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    5a70:	83 e0       	ldi	r24, 0x03	; 3
    5a72:	62 e0       	ldi	r22, 0x02	; 2
    5a74:	41 e0       	ldi	r20, 0x01	; 1
    5a76:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    5a7a:	83 e0       	ldi	r24, 0x03	; 3
    5a7c:	61 e0       	ldi	r22, 0x01	; 1
    5a7e:	40 e0       	ldi	r20, 0x00	; 0
    5a80:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    5a84:	83 e0       	ldi	r24, 0x03	; 3
    5a86:	60 e0       	ldi	r22, 0x00	; 0
    5a88:	40 e0       	ldi	r20, 0x00	; 0
    5a8a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	a0 ea       	ldi	r26, 0xA0	; 160
    5a94:	b0 e4       	ldi	r27, 0x40	; 64
    5a96:	8f a3       	std	Y+39, r24	; 0x27
    5a98:	98 a7       	std	Y+40, r25	; 0x28
    5a9a:	a9 a7       	std	Y+41, r26	; 0x29
    5a9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    5aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    5aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    5aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5aa6:	20 e0       	ldi	r18, 0x00	; 0
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	4a ef       	ldi	r20, 0xFA	; 250
    5aac:	54 e4       	ldi	r21, 0x44	; 68
    5aae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	8b a3       	std	Y+35, r24	; 0x23
    5ab8:	9c a3       	std	Y+36, r25	; 0x24
    5aba:	ad a3       	std	Y+37, r26	; 0x25
    5abc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5abe:	6b a1       	ldd	r22, Y+35	; 0x23
    5ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    5ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    5ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	40 e8       	ldi	r20, 0x80	; 128
    5acc:	5f e3       	ldi	r21, 0x3F	; 63
    5ace:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5ad2:	88 23       	and	r24, r24
    5ad4:	2c f4       	brge	.+10     	; 0x5ae0 <STEPPER_voidRotateACW+0x19a>
		__ticks = 1;
    5ad6:	81 e0       	ldi	r24, 0x01	; 1
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	9a a3       	std	Y+34, r25	; 0x22
    5adc:	89 a3       	std	Y+33, r24	; 0x21
    5ade:	3f c0       	rjmp	.+126    	; 0x5b5e <STEPPER_voidRotateACW+0x218>
	else if (__tmp > 65535)
    5ae0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ae2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ae8:	20 e0       	ldi	r18, 0x00	; 0
    5aea:	3f ef       	ldi	r19, 0xFF	; 255
    5aec:	4f e7       	ldi	r20, 0x7F	; 127
    5aee:	57 e4       	ldi	r21, 0x47	; 71
    5af0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5af4:	18 16       	cp	r1, r24
    5af6:	4c f5       	brge	.+82     	; 0x5b4a <STEPPER_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af8:	6f a1       	ldd	r22, Y+39	; 0x27
    5afa:	78 a5       	ldd	r23, Y+40	; 0x28
    5afc:	89 a5       	ldd	r24, Y+41	; 0x29
    5afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	40 e2       	ldi	r20, 0x20	; 32
    5b06:	51 e4       	ldi	r21, 0x41	; 65
    5b08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	bc 01       	movw	r22, r24
    5b12:	cd 01       	movw	r24, r26
    5b14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	9a a3       	std	Y+34, r25	; 0x22
    5b1e:	89 a3       	std	Y+33, r24	; 0x21
    5b20:	0f c0       	rjmp	.+30     	; 0x5b40 <STEPPER_voidRotateACW+0x1fa>
    5b22:	88 ec       	ldi	r24, 0xC8	; 200
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	98 a3       	std	Y+32, r25	; 0x20
    5b28:	8f 8f       	std	Y+31, r24	; 0x1f
    5b2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b2c:	98 a1       	ldd	r25, Y+32	; 0x20
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	f1 f7       	brne	.-4      	; 0x5b2e <STEPPER_voidRotateACW+0x1e8>
    5b32:	98 a3       	std	Y+32, r25	; 0x20
    5b34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b36:	89 a1       	ldd	r24, Y+33	; 0x21
    5b38:	9a a1       	ldd	r25, Y+34	; 0x22
    5b3a:	01 97       	sbiw	r24, 0x01	; 1
    5b3c:	9a a3       	std	Y+34, r25	; 0x22
    5b3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b40:	89 a1       	ldd	r24, Y+33	; 0x21
    5b42:	9a a1       	ldd	r25, Y+34	; 0x22
    5b44:	00 97       	sbiw	r24, 0x00	; 0
    5b46:	69 f7       	brne	.-38     	; 0x5b22 <STEPPER_voidRotateACW+0x1dc>
    5b48:	14 c0       	rjmp	.+40     	; 0x5b72 <STEPPER_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    5b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    5b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    5b50:	9e a1       	ldd	r25, Y+38	; 0x26
    5b52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	9a a3       	std	Y+34, r25	; 0x22
    5b5c:	89 a3       	std	Y+33, r24	; 0x21
    5b5e:	89 a1       	ldd	r24, Y+33	; 0x21
    5b60:	9a a1       	ldd	r25, Y+34	; 0x22
    5b62:	9e 8f       	std	Y+30, r25	; 0x1e
    5b64:	8d 8f       	std	Y+29, r24	; 0x1d
    5b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b6a:	01 97       	sbiw	r24, 0x01	; 1
    5b6c:	f1 f7       	brne	.-4      	; 0x5b6a <STEPPER_voidRotateACW+0x224>
    5b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    5b72:	83 e0       	ldi	r24, 0x03	; 3
    5b74:	63 e0       	ldi	r22, 0x03	; 3
    5b76:	40 e0       	ldi	r20, 0x00	; 0
    5b78:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    5b7c:	83 e0       	ldi	r24, 0x03	; 3
    5b7e:	62 e0       	ldi	r22, 0x02	; 2
    5b80:	40 e0       	ldi	r20, 0x00	; 0
    5b82:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    5b86:	83 e0       	ldi	r24, 0x03	; 3
    5b88:	61 e0       	ldi	r22, 0x01	; 1
    5b8a:	41 e0       	ldi	r20, 0x01	; 1
    5b8c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    5b90:	83 e0       	ldi	r24, 0x03	; 3
    5b92:	60 e0       	ldi	r22, 0x00	; 0
    5b94:	40 e0       	ldi	r20, 0x00	; 0
    5b96:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	a0 ea       	ldi	r26, 0xA0	; 160
    5ba0:	b0 e4       	ldi	r27, 0x40	; 64
    5ba2:	89 8f       	std	Y+25, r24	; 0x19
    5ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    5ba6:	ab 8f       	std	Y+27, r26	; 0x1b
    5ba8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5baa:	69 8d       	ldd	r22, Y+25	; 0x19
    5bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	4a ef       	ldi	r20, 0xFA	; 250
    5bb8:	54 e4       	ldi	r21, 0x44	; 68
    5bba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	8d 8b       	std	Y+21, r24	; 0x15
    5bc4:	9e 8b       	std	Y+22, r25	; 0x16
    5bc6:	af 8b       	std	Y+23, r26	; 0x17
    5bc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5bca:	6d 89       	ldd	r22, Y+21	; 0x15
    5bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    5bce:	8f 89       	ldd	r24, Y+23	; 0x17
    5bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	40 e8       	ldi	r20, 0x80	; 128
    5bd8:	5f e3       	ldi	r21, 0x3F	; 63
    5bda:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5bde:	88 23       	and	r24, r24
    5be0:	2c f4       	brge	.+10     	; 0x5bec <STEPPER_voidRotateACW+0x2a6>
		__ticks = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	9c 8b       	std	Y+20, r25	; 0x14
    5be8:	8b 8b       	std	Y+19, r24	; 0x13
    5bea:	3f c0       	rjmp	.+126    	; 0x5c6a <STEPPER_voidRotateACW+0x324>
	else if (__tmp > 65535)
    5bec:	6d 89       	ldd	r22, Y+21	; 0x15
    5bee:	7e 89       	ldd	r23, Y+22	; 0x16
    5bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    5bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    5bf4:	20 e0       	ldi	r18, 0x00	; 0
    5bf6:	3f ef       	ldi	r19, 0xFF	; 255
    5bf8:	4f e7       	ldi	r20, 0x7F	; 127
    5bfa:	57 e4       	ldi	r21, 0x47	; 71
    5bfc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5c00:	18 16       	cp	r1, r24
    5c02:	4c f5       	brge	.+82     	; 0x5c56 <STEPPER_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c04:	69 8d       	ldd	r22, Y+25	; 0x19
    5c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e2       	ldi	r20, 0x20	; 32
    5c12:	51 e4       	ldi	r21, 0x41	; 65
    5c14:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	bc 01       	movw	r22, r24
    5c1e:	cd 01       	movw	r24, r26
    5c20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5c24:	dc 01       	movw	r26, r24
    5c26:	cb 01       	movw	r24, r22
    5c28:	9c 8b       	std	Y+20, r25	; 0x14
    5c2a:	8b 8b       	std	Y+19, r24	; 0x13
    5c2c:	0f c0       	rjmp	.+30     	; 0x5c4c <STEPPER_voidRotateACW+0x306>
    5c2e:	88 ec       	ldi	r24, 0xC8	; 200
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	9a 8b       	std	Y+18, r25	; 0x12
    5c34:	89 8b       	std	Y+17, r24	; 0x11
    5c36:	89 89       	ldd	r24, Y+17	; 0x11
    5c38:	9a 89       	ldd	r25, Y+18	; 0x12
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
    5c3c:	f1 f7       	brne	.-4      	; 0x5c3a <STEPPER_voidRotateACW+0x2f4>
    5c3e:	9a 8b       	std	Y+18, r25	; 0x12
    5c40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c42:	8b 89       	ldd	r24, Y+19	; 0x13
    5c44:	9c 89       	ldd	r25, Y+20	; 0x14
    5c46:	01 97       	sbiw	r24, 0x01	; 1
    5c48:	9c 8b       	std	Y+20, r25	; 0x14
    5c4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    5c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    5c50:	00 97       	sbiw	r24, 0x00	; 0
    5c52:	69 f7       	brne	.-38     	; 0x5c2e <STEPPER_voidRotateACW+0x2e8>
    5c54:	14 c0       	rjmp	.+40     	; 0x5c7e <STEPPER_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c56:	6d 89       	ldd	r22, Y+21	; 0x15
    5c58:	7e 89       	ldd	r23, Y+22	; 0x16
    5c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c5e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5c62:	dc 01       	movw	r26, r24
    5c64:	cb 01       	movw	r24, r22
    5c66:	9c 8b       	std	Y+20, r25	; 0x14
    5c68:	8b 8b       	std	Y+19, r24	; 0x13
    5c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c6e:	98 8b       	std	Y+16, r25	; 0x10
    5c70:	8f 87       	std	Y+15, r24	; 0x0f
    5c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c74:	98 89       	ldd	r25, Y+16	; 0x10
    5c76:	01 97       	sbiw	r24, 0x01	; 1
    5c78:	f1 f7       	brne	.-4      	; 0x5c76 <STEPPER_voidRotateACW+0x330>
    5c7a:	98 8b       	std	Y+16, r25	; 0x10
    5c7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    5c7e:	83 e0       	ldi	r24, 0x03	; 3
    5c80:	63 e0       	ldi	r22, 0x03	; 3
    5c82:	40 e0       	ldi	r20, 0x00	; 0
    5c84:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    5c88:	83 e0       	ldi	r24, 0x03	; 3
    5c8a:	62 e0       	ldi	r22, 0x02	; 2
    5c8c:	40 e0       	ldi	r20, 0x00	; 0
    5c8e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    5c92:	83 e0       	ldi	r24, 0x03	; 3
    5c94:	61 e0       	ldi	r22, 0x01	; 1
    5c96:	40 e0       	ldi	r20, 0x00	; 0
    5c98:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    5c9c:	83 e0       	ldi	r24, 0x03	; 3
    5c9e:	60 e0       	ldi	r22, 0x00	; 0
    5ca0:	41 e0       	ldi	r20, 0x01	; 1
    5ca2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DIO_voidSetPinValue>
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	a0 ea       	ldi	r26, 0xA0	; 160
    5cac:	b0 e4       	ldi	r27, 0x40	; 64
    5cae:	8b 87       	std	Y+11, r24	; 0x0b
    5cb0:	9c 87       	std	Y+12, r25	; 0x0c
    5cb2:	ad 87       	std	Y+13, r26	; 0x0d
    5cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	30 e0       	ldi	r19, 0x00	; 0
    5cc2:	4a ef       	ldi	r20, 0xFA	; 250
    5cc4:	54 e4       	ldi	r21, 0x44	; 68
    5cc6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	8f 83       	std	Y+7, r24	; 0x07
    5cd0:	98 87       	std	Y+8, r25	; 0x08
    5cd2:	a9 87       	std	Y+9, r26	; 0x09
    5cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    5cd8:	78 85       	ldd	r23, Y+8	; 0x08
    5cda:	89 85       	ldd	r24, Y+9	; 0x09
    5cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e8       	ldi	r20, 0x80	; 128
    5ce4:	5f e3       	ldi	r21, 0x3F	; 63
    5ce6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5cea:	88 23       	and	r24, r24
    5cec:	2c f4       	brge	.+10     	; 0x5cf8 <STEPPER_voidRotateACW+0x3b2>
		__ticks = 1;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	9e 83       	std	Y+6, r25	; 0x06
    5cf4:	8d 83       	std	Y+5, r24	; 0x05
    5cf6:	3f c0       	rjmp	.+126    	; 0x5d76 <STEPPER_voidRotateACW+0x430>
	else if (__tmp > 65535)
    5cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    5cfa:	78 85       	ldd	r23, Y+8	; 0x08
    5cfc:	89 85       	ldd	r24, Y+9	; 0x09
    5cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	3f ef       	ldi	r19, 0xFF	; 255
    5d04:	4f e7       	ldi	r20, 0x7F	; 127
    5d06:	57 e4       	ldi	r21, 0x47	; 71
    5d08:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5d0c:	18 16       	cp	r1, r24
    5d0e:	4c f5       	brge	.+82     	; 0x5d62 <STEPPER_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e2       	ldi	r20, 0x20	; 32
    5d1e:	51 e4       	ldi	r21, 0x41	; 65
    5d20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	bc 01       	movw	r22, r24
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	9e 83       	std	Y+6, r25	; 0x06
    5d36:	8d 83       	std	Y+5, r24	; 0x05
    5d38:	0f c0       	rjmp	.+30     	; 0x5d58 <STEPPER_voidRotateACW+0x412>
    5d3a:	88 ec       	ldi	r24, 0xC8	; 200
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	9c 83       	std	Y+4, r25	; 0x04
    5d40:	8b 83       	std	Y+3, r24	; 0x03
    5d42:	8b 81       	ldd	r24, Y+3	; 0x03
    5d44:	9c 81       	ldd	r25, Y+4	; 0x04
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	f1 f7       	brne	.-4      	; 0x5d46 <STEPPER_voidRotateACW+0x400>
    5d4a:	9c 83       	std	Y+4, r25	; 0x04
    5d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d50:	9e 81       	ldd	r25, Y+6	; 0x06
    5d52:	01 97       	sbiw	r24, 0x01	; 1
    5d54:	9e 83       	std	Y+6, r25	; 0x06
    5d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d58:	8d 81       	ldd	r24, Y+5	; 0x05
    5d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d5c:	00 97       	sbiw	r24, 0x00	; 0
    5d5e:	69 f7       	brne	.-38     	; 0x5d3a <STEPPER_voidRotateACW+0x3f4>
    5d60:	14 c0       	rjmp	.+40     	; 0x5d8a <STEPPER_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d62:	6f 81       	ldd	r22, Y+7	; 0x07
    5d64:	78 85       	ldd	r23, Y+8	; 0x08
    5d66:	89 85       	ldd	r24, Y+9	; 0x09
    5d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d6a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5d6e:	dc 01       	movw	r26, r24
    5d70:	cb 01       	movw	r24, r22
    5d72:	9e 83       	std	Y+6, r25	; 0x06
    5d74:	8d 83       	std	Y+5, r24	; 0x05
    5d76:	8d 81       	ldd	r24, Y+5	; 0x05
    5d78:	9e 81       	ldd	r25, Y+6	; 0x06
    5d7a:	9a 83       	std	Y+2, r25	; 0x02
    5d7c:	89 83       	std	Y+1, r24	; 0x01
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	9a 81       	ldd	r25, Y+2	; 0x02
    5d82:	01 97       	sbiw	r24, 0x01	; 1
    5d84:	f1 f7       	brne	.-4      	; 0x5d82 <STEPPER_voidRotateACW+0x43c>
    5d86:	9a 83       	std	Y+2, r25	; 0x02
    5d88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    5d8a:	e8 96       	adiw	r28, 0x38	; 56
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	f8 94       	cli
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	cd bf       	out	0x3d, r28	; 61
    5d96:	cf 91       	pop	r28
    5d98:	df 91       	pop	r29
    5d9a:	08 95       	ret

00005d9c <__vector_9>:


int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
    5d9c:	1f 92       	push	r1
    5d9e:	0f 92       	push	r0
    5da0:	0f b6       	in	r0, 0x3f	; 63
    5da2:	0f 92       	push	r0
    5da4:	11 24       	eor	r1, r1
    5da6:	8f 93       	push	r24
    5da8:	9f 93       	push	r25
    5daa:	df 93       	push	r29
    5dac:	cf 93       	push	r28
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
    5db2:	80 91 9c 01 	lds	r24, 0x019C
    5db6:	90 91 9d 01 	lds	r25, 0x019D
    5dba:	01 96       	adiw	r24, 0x01	; 1
    5dbc:	90 93 9d 01 	sts	0x019D, r25
    5dc0:	80 93 9c 01 	sts	0x019C, r24
}
    5dc4:	cf 91       	pop	r28
    5dc6:	df 91       	pop	r29
    5dc8:	9f 91       	pop	r25
    5dca:	8f 91       	pop	r24
    5dcc:	0f 90       	pop	r0
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	0f 90       	pop	r0
    5dd2:	1f 90       	pop	r1
    5dd4:	18 95       	reti

00005dd6 <main>:

int main(void)
{
    5dd6:	ef 92       	push	r14
    5dd8:	ff 92       	push	r15
    5dda:	0f 93       	push	r16
    5ddc:	1f 93       	push	r17
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
    5de6:	e8 97       	sbiw	r28, 0x38	; 56
    5de8:	0f b6       	in	r0, 0x3f	; 63
    5dea:	f8 94       	cli
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	0f be       	out	0x3f, r0	; 63
    5df0:	cd bf       	out	0x3d, r28	; 61
	char string[10];
	long count;
	double distance;

	DDRA = 0x01;		/* Make trigger pin as output */
    5df2:	ea e3       	ldi	r30, 0x3A	; 58
    5df4:	f0 e0       	ldi	r31, 0x00	; 0
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	80 83       	st	Z, r24
	DDRD =0x00;
    5dfa:	e1 e3       	ldi	r30, 0x31	; 49
    5dfc:	f0 e0       	ldi	r31, 0x00	; 0
    5dfe:	10 82       	st	Z, r1
	PORTD = 0xFF;		/* Turn on Pull-up */
    5e00:	e2 e3       	ldi	r30, 0x32	; 50
    5e02:	f0 e0       	ldi	r31, 0x00	; 0
    5e04:	8f ef       	ldi	r24, 0xFF	; 255
    5e06:	80 83       	st	Z, r24

	LCD_Init();
    5e08:	0e 94 18 28 	call	0x5030	; 0x5030 <LCD_Init>
	LCD_String_xy(0, 0, "Ultrasonic");
    5e0c:	20 e6       	ldi	r18, 0x60	; 96
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	60 e0       	ldi	r22, 0x00	; 0
    5e14:	a9 01       	movw	r20, r18
    5e16:	0e 94 6f 29 	call	0x52de	; 0x52de <LCD_String_xy>

	sei();			/* Enable global interrupt */
    5e1a:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
    5e1c:	e9 e5       	ldi	r30, 0x59	; 89
    5e1e:	f0 e0       	ldi	r31, 0x00	; 0
    5e20:	84 e0       	ldi	r24, 0x04	; 4
    5e22:	80 83       	st	Z, r24
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
    5e24:	ef e4       	ldi	r30, 0x4F	; 79
    5e26:	f0 e0       	ldi	r31, 0x00	; 0
    5e28:	10 82       	st	Z, r1

	while(1)
	{
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTA |= (1 << Trigger_pin);
    5e2a:	ab e3       	ldi	r26, 0x3B	; 59
    5e2c:	b0 e0       	ldi	r27, 0x00	; 0
    5e2e:	eb e3       	ldi	r30, 0x3B	; 59
    5e30:	f0 e0       	ldi	r31, 0x00	; 0
    5e32:	80 81       	ld	r24, Z
    5e34:	81 60       	ori	r24, 0x01	; 1
    5e36:	8c 93       	st	X, r24
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	a0 e2       	ldi	r26, 0x20	; 32
    5e3e:	b1 e4       	ldi	r27, 0x41	; 65
    5e40:	8b a3       	std	Y+35, r24	; 0x23
    5e42:	9c a3       	std	Y+36, r25	; 0x24
    5e44:	ad a3       	std	Y+37, r26	; 0x25
    5e46:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5e48:	6b a1       	ldd	r22, Y+35	; 0x23
    5e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    5e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    5e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    5e50:	2b ea       	ldi	r18, 0xAB	; 171
    5e52:	3a ea       	ldi	r19, 0xAA	; 170
    5e54:	4a e2       	ldi	r20, 0x2A	; 42
    5e56:	50 e4       	ldi	r21, 0x40	; 64
    5e58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5e5c:	dc 01       	movw	r26, r24
    5e5e:	cb 01       	movw	r24, r22
    5e60:	8f 8f       	std	Y+31, r24	; 0x1f
    5e62:	98 a3       	std	Y+32, r25	; 0x20
    5e64:	a9 a3       	std	Y+33, r26	; 0x21
    5e66:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5e68:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5e6a:	78 a1       	ldd	r23, Y+32	; 0x20
    5e6c:	89 a1       	ldd	r24, Y+33	; 0x21
    5e6e:	9a a1       	ldd	r25, Y+34	; 0x22
    5e70:	20 e0       	ldi	r18, 0x00	; 0
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	40 e8       	ldi	r20, 0x80	; 128
    5e76:	5f e3       	ldi	r21, 0x3F	; 63
    5e78:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5e7c:	88 23       	and	r24, r24
    5e7e:	1c f4       	brge	.+6      	; 0x5e86 <main+0xb0>
		__ticks = 1;
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	8e 8f       	std	Y+30, r24	; 0x1e
    5e84:	91 c0       	rjmp	.+290    	; 0x5fa8 <main+0x1d2>
	else if (__tmp > 255)
    5e86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5e88:	78 a1       	ldd	r23, Y+32	; 0x20
    5e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    5e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	4f e7       	ldi	r20, 0x7F	; 127
    5e94:	53 e4       	ldi	r21, 0x43	; 67
    5e96:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5e9a:	18 16       	cp	r1, r24
    5e9c:	0c f0       	brlt	.+2      	; 0x5ea0 <main+0xca>
    5e9e:	7b c0       	rjmp	.+246    	; 0x5f96 <main+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    5ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ea8:	20 e0       	ldi	r18, 0x00	; 0
    5eaa:	30 e0       	ldi	r19, 0x00	; 0
    5eac:	4a e7       	ldi	r20, 0x7A	; 122
    5eae:	54 e4       	ldi	r21, 0x44	; 68
    5eb0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    5eb4:	dc 01       	movw	r26, r24
    5eb6:	cb 01       	movw	r24, r22
    5eb8:	8a 8f       	std	Y+26, r24	; 0x1a
    5eba:	9b 8f       	std	Y+27, r25	; 0x1b
    5ebc:	ac 8f       	std	Y+28, r26	; 0x1c
    5ebe:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5ec2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5ec4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ec6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5ec8:	20 e0       	ldi	r18, 0x00	; 0
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	4a ef       	ldi	r20, 0xFA	; 250
    5ece:	54 e4       	ldi	r21, 0x44	; 68
    5ed0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	8e 8b       	std	Y+22, r24	; 0x16
    5eda:	9f 8b       	std	Y+23, r25	; 0x17
    5edc:	a8 8f       	std	Y+24, r26	; 0x18
    5ede:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5ee0:	6e 89       	ldd	r22, Y+22	; 0x16
    5ee2:	7f 89       	ldd	r23, Y+23	; 0x17
    5ee4:	88 8d       	ldd	r24, Y+24	; 0x18
    5ee6:	99 8d       	ldd	r25, Y+25	; 0x19
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	40 e8       	ldi	r20, 0x80	; 128
    5eee:	5f e3       	ldi	r21, 0x3F	; 63
    5ef0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5ef4:	88 23       	and	r24, r24
    5ef6:	2c f4       	brge	.+10     	; 0x5f02 <main+0x12c>
		__ticks = 1;
    5ef8:	81 e0       	ldi	r24, 0x01	; 1
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	9d 8b       	std	Y+21, r25	; 0x15
    5efe:	8c 8b       	std	Y+20, r24	; 0x14
    5f00:	3f c0       	rjmp	.+126    	; 0x5f80 <main+0x1aa>
	else if (__tmp > 65535)
    5f02:	6e 89       	ldd	r22, Y+22	; 0x16
    5f04:	7f 89       	ldd	r23, Y+23	; 0x17
    5f06:	88 8d       	ldd	r24, Y+24	; 0x18
    5f08:	99 8d       	ldd	r25, Y+25	; 0x19
    5f0a:	20 e0       	ldi	r18, 0x00	; 0
    5f0c:	3f ef       	ldi	r19, 0xFF	; 255
    5f0e:	4f e7       	ldi	r20, 0x7F	; 127
    5f10:	57 e4       	ldi	r21, 0x47	; 71
    5f12:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5f16:	18 16       	cp	r1, r24
    5f18:	4c f5       	brge	.+82     	; 0x5f6c <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5f1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5f1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5f22:	20 e0       	ldi	r18, 0x00	; 0
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	40 e2       	ldi	r20, 0x20	; 32
    5f28:	51 e4       	ldi	r21, 0x41	; 65
    5f2a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5f2e:	dc 01       	movw	r26, r24
    5f30:	cb 01       	movw	r24, r22
    5f32:	bc 01       	movw	r22, r24
    5f34:	cd 01       	movw	r24, r26
    5f36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	9d 8b       	std	Y+21, r25	; 0x15
    5f40:	8c 8b       	std	Y+20, r24	; 0x14
    5f42:	0f c0       	rjmp	.+30     	; 0x5f62 <main+0x18c>
    5f44:	88 ec       	ldi	r24, 0xC8	; 200
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	9b 8b       	std	Y+19, r25	; 0x13
    5f4a:	8a 8b       	std	Y+18, r24	; 0x12
    5f4c:	8a 89       	ldd	r24, Y+18	; 0x12
    5f4e:	9b 89       	ldd	r25, Y+19	; 0x13
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	f1 f7       	brne	.-4      	; 0x5f50 <main+0x17a>
    5f54:	9b 8b       	std	Y+19, r25	; 0x13
    5f56:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f58:	8c 89       	ldd	r24, Y+20	; 0x14
    5f5a:	9d 89       	ldd	r25, Y+21	; 0x15
    5f5c:	01 97       	sbiw	r24, 0x01	; 1
    5f5e:	9d 8b       	std	Y+21, r25	; 0x15
    5f60:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f62:	8c 89       	ldd	r24, Y+20	; 0x14
    5f64:	9d 89       	ldd	r25, Y+21	; 0x15
    5f66:	00 97       	sbiw	r24, 0x00	; 0
    5f68:	69 f7       	brne	.-38     	; 0x5f44 <main+0x16e>
    5f6a:	24 c0       	rjmp	.+72     	; 0x5fb4 <main+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f6c:	6e 89       	ldd	r22, Y+22	; 0x16
    5f6e:	7f 89       	ldd	r23, Y+23	; 0x17
    5f70:	88 8d       	ldd	r24, Y+24	; 0x18
    5f72:	99 8d       	ldd	r25, Y+25	; 0x19
    5f74:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5f78:	dc 01       	movw	r26, r24
    5f7a:	cb 01       	movw	r24, r22
    5f7c:	9d 8b       	std	Y+21, r25	; 0x15
    5f7e:	8c 8b       	std	Y+20, r24	; 0x14
    5f80:	8c 89       	ldd	r24, Y+20	; 0x14
    5f82:	9d 89       	ldd	r25, Y+21	; 0x15
    5f84:	99 8b       	std	Y+17, r25	; 0x11
    5f86:	88 8b       	std	Y+16, r24	; 0x10
    5f88:	88 89       	ldd	r24, Y+16	; 0x10
    5f8a:	99 89       	ldd	r25, Y+17	; 0x11
    5f8c:	01 97       	sbiw	r24, 0x01	; 1
    5f8e:	f1 f7       	brne	.-4      	; 0x5f8c <main+0x1b6>
    5f90:	99 8b       	std	Y+17, r25	; 0x11
    5f92:	88 8b       	std	Y+16, r24	; 0x10
    5f94:	0f c0       	rjmp	.+30     	; 0x5fb4 <main+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5f96:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5f98:	78 a1       	ldd	r23, Y+32	; 0x20
    5f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    5f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    5f9e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5fa2:	dc 01       	movw	r26, r24
    5fa4:	cb 01       	movw	r24, r22
    5fa6:	8e 8f       	std	Y+30, r24	; 0x1e
    5fa8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5faa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fae:	8a 95       	dec	r24
    5fb0:	f1 f7       	brne	.-4      	; 0x5fae <main+0x1d8>
    5fb2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));
    5fb4:	ab e3       	ldi	r26, 0x3B	; 59
    5fb6:	b0 e0       	ldi	r27, 0x00	; 0
    5fb8:	eb e3       	ldi	r30, 0x3B	; 59
    5fba:	f0 e0       	ldi	r31, 0x00	; 0
    5fbc:	80 81       	ld	r24, Z
    5fbe:	8e 7f       	andi	r24, 0xFE	; 254
    5fc0:	8c 93       	st	X, r24

		TCNT1 = 0;	/* Clear Timer counter */
    5fc2:	ec e4       	ldi	r30, 0x4C	; 76
    5fc4:	f0 e0       	ldi	r31, 0x00	; 0
    5fc6:	11 82       	std	Z+1, r1	; 0x01
    5fc8:	10 82       	st	Z, r1
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
    5fca:	ee e4       	ldi	r30, 0x4E	; 78
    5fcc:	f0 e0       	ldi	r31, 0x00	; 0
    5fce:	81 e4       	ldi	r24, 0x41	; 65
    5fd0:	80 83       	st	Z, r24
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
    5fd2:	e8 e5       	ldi	r30, 0x58	; 88
    5fd4:	f0 e0       	ldi	r31, 0x00	; 0
    5fd6:	80 e2       	ldi	r24, 0x20	; 32
    5fd8:	80 83       	st	Z, r24
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
    5fda:	e8 e5       	ldi	r30, 0x58	; 88
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	84 e0       	ldi	r24, 0x04	; 4
    5fe0:	80 83       	st	Z, r24

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
    5fe2:	e8 e5       	ldi	r30, 0x58	; 88
    5fe4:	f0 e0       	ldi	r31, 0x00	; 0
    5fe6:	80 81       	ld	r24, Z
    5fe8:	88 2f       	mov	r24, r24
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	80 72       	andi	r24, 0x20	; 32
    5fee:	90 70       	andi	r25, 0x00	; 0
    5ff0:	00 97       	sbiw	r24, 0x00	; 0
    5ff2:	b9 f3       	breq	.-18     	; 0x5fe2 <main+0x20c>
		TCNT1 = 0;	/* Clear Timer counter */
    5ff4:	ec e4       	ldi	r30, 0x4C	; 76
    5ff6:	f0 e0       	ldi	r31, 0x00	; 0
    5ff8:	11 82       	std	Z+1, r1	; 0x01
    5ffa:	10 82       	st	Z, r1
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
    5ffc:	ee e4       	ldi	r30, 0x4E	; 78
    5ffe:	f0 e0       	ldi	r31, 0x00	; 0
    6000:	81 e0       	ldi	r24, 0x01	; 1
    6002:	80 83       	st	Z, r24
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
    6004:	e8 e5       	ldi	r30, 0x58	; 88
    6006:	f0 e0       	ldi	r31, 0x00	; 0
    6008:	80 e2       	ldi	r24, 0x20	; 32
    600a:	80 83       	st	Z, r24
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
    600c:	e8 e5       	ldi	r30, 0x58	; 88
    600e:	f0 e0       	ldi	r31, 0x00	; 0
    6010:	84 e0       	ldi	r24, 0x04	; 4
    6012:	80 83       	st	Z, r24
		TimerOverflow = 0;/* Clear Timer overflow count */
    6014:	10 92 9d 01 	sts	0x019D, r1
    6018:	10 92 9c 01 	sts	0x019C, r1

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
    601c:	e8 e5       	ldi	r30, 0x58	; 88
    601e:	f0 e0       	ldi	r31, 0x00	; 0
    6020:	80 81       	ld	r24, Z
    6022:	88 2f       	mov	r24, r24
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	80 72       	andi	r24, 0x20	; 32
    6028:	90 70       	andi	r25, 0x00	; 0
    602a:	00 97       	sbiw	r24, 0x00	; 0
    602c:	b9 f3       	breq	.-18     	; 0x601c <main+0x246>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
    602e:	e6 e4       	ldi	r30, 0x46	; 70
    6030:	f0 e0       	ldi	r31, 0x00	; 0
    6032:	80 81       	ld	r24, Z
    6034:	91 81       	ldd	r25, Z+1	; 0x01
    6036:	7c 01       	movw	r14, r24
    6038:	00 e0       	ldi	r16, 0x00	; 0
    603a:	10 e0       	ldi	r17, 0x00	; 0
    603c:	80 91 9c 01 	lds	r24, 0x019C
    6040:	90 91 9d 01 	lds	r25, 0x019D
    6044:	aa 27       	eor	r26, r26
    6046:	97 fd       	sbrc	r25, 7
    6048:	a0 95       	com	r26
    604a:	ba 2f       	mov	r27, r26
    604c:	2f ef       	ldi	r18, 0xFF	; 255
    604e:	3f ef       	ldi	r19, 0xFF	; 255
    6050:	40 e0       	ldi	r20, 0x00	; 0
    6052:	50 e0       	ldi	r21, 0x00	; 0
    6054:	bc 01       	movw	r22, r24
    6056:	cd 01       	movw	r24, r26
    6058:	0e 94 ed 30 	call	0x61da	; 0x61da <__mulsi3>
    605c:	dc 01       	movw	r26, r24
    605e:	cb 01       	movw	r24, r22
    6060:	8e 0d       	add	r24, r14
    6062:	9f 1d       	adc	r25, r15
    6064:	a0 1f       	adc	r26, r16
    6066:	b1 1f       	adc	r27, r17
    6068:	8b a7       	std	Y+43, r24	; 0x2b
    606a:	9c a7       	std	Y+44, r25	; 0x2c
    606c:	ad a7       	std	Y+45, r26	; 0x2d
    606e:	be a7       	std	Y+46, r27	; 0x2e
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
    6070:	6b a5       	ldd	r22, Y+43	; 0x2b
    6072:	7c a5       	ldd	r23, Y+44	; 0x2c
    6074:	8d a5       	ldd	r24, Y+45	; 0x2d
    6076:	9e a5       	ldd	r25, Y+46	; 0x2e
    6078:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    607c:	dc 01       	movw	r26, r24
    607e:	cb 01       	movw	r24, r22
    6080:	bc 01       	movw	r22, r24
    6082:	cd 01       	movw	r24, r26
    6084:	29 e2       	ldi	r18, 0x29	; 41
    6086:	3c e3       	ldi	r19, 0x3C	; 60
    6088:	49 ee       	ldi	r20, 0xE9	; 233
    608a:	53 e4       	ldi	r21, 0x43	; 67
    608c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    6090:	dc 01       	movw	r26, r24
    6092:	cb 01       	movw	r24, r22
    6094:	8f a3       	std	Y+39, r24	; 0x27
    6096:	98 a7       	std	Y+40, r25	; 0x28
    6098:	a9 a7       	std	Y+41, r26	; 0x29
    609a:	ba a7       	std	Y+42, r27	; 0x2a

		dtostrf(distance, 2, 2, string);/* distance to string */
    609c:	8f a1       	ldd	r24, Y+39	; 0x27
    609e:	98 a5       	ldd	r25, Y+40	; 0x28
    60a0:	a9 a5       	ldd	r26, Y+41	; 0x29
    60a2:	ba a5       	ldd	r27, Y+42	; 0x2a
    60a4:	fe 01       	movw	r30, r28
    60a6:	bf 96       	adiw	r30, 0x2f	; 47
    60a8:	bc 01       	movw	r22, r24
    60aa:	cd 01       	movw	r24, r26
    60ac:	42 e0       	ldi	r20, 0x02	; 2
    60ae:	22 e0       	ldi	r18, 0x02	; 2
    60b0:	8f 01       	movw	r16, r30
    60b2:	0e 94 57 31 	call	0x62ae	; 0x62ae <dtostrf>
		strcat(string, " cm   ");	/* Concat unit i.e.cm */
    60b6:	8e 01       	movw	r16, r28
    60b8:	01 5d       	subi	r16, 0xD1	; 209
    60ba:	1f 4f       	sbci	r17, 0xFF	; 255
    60bc:	ce 01       	movw	r24, r28
    60be:	8f 96       	adiw	r24, 0x2f	; 47
    60c0:	0e 94 81 31 	call	0x6302	; 0x6302 <strlen>
    60c4:	80 0f       	add	r24, r16
    60c6:	91 1f       	adc	r25, r17
    60c8:	2b e6       	ldi	r18, 0x6B	; 107
    60ca:	30 e0       	ldi	r19, 0x00	; 0
    60cc:	b9 01       	movw	r22, r18
    60ce:	47 e0       	ldi	r20, 0x07	; 7
    60d0:	50 e0       	ldi	r21, 0x00	; 0
    60d2:	0e 94 78 31 	call	0x62f0	; 0x62f0 <memcpy>
		LCD_String_xy(1, 0, "Dist = ");
    60d6:	22 e7       	ldi	r18, 0x72	; 114
    60d8:	30 e0       	ldi	r19, 0x00	; 0
    60da:	81 e0       	ldi	r24, 0x01	; 1
    60dc:	60 e0       	ldi	r22, 0x00	; 0
    60de:	a9 01       	movw	r20, r18
    60e0:	0e 94 6f 29 	call	0x52de	; 0x52de <LCD_String_xy>
		LCD_String_xy(1, 7, string);	/* Print distance */
    60e4:	9e 01       	movw	r18, r28
    60e6:	21 5d       	subi	r18, 0xD1	; 209
    60e8:	3f 4f       	sbci	r19, 0xFF	; 255
    60ea:	81 e0       	ldi	r24, 0x01	; 1
    60ec:	67 e0       	ldi	r22, 0x07	; 7
    60ee:	a9 01       	movw	r20, r18
    60f0:	0e 94 6f 29 	call	0x52de	; 0x52de <LCD_String_xy>
    60f4:	80 e0       	ldi	r24, 0x00	; 0
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	a8 e4       	ldi	r26, 0x48	; 72
    60fa:	b3 e4       	ldi	r27, 0x43	; 67
    60fc:	8b 87       	std	Y+11, r24	; 0x0b
    60fe:	9c 87       	std	Y+12, r25	; 0x0c
    6100:	ad 87       	std	Y+13, r26	; 0x0d
    6102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6104:	6b 85       	ldd	r22, Y+11	; 0x0b
    6106:	7c 85       	ldd	r23, Y+12	; 0x0c
    6108:	8d 85       	ldd	r24, Y+13	; 0x0d
    610a:	9e 85       	ldd	r25, Y+14	; 0x0e
    610c:	20 e0       	ldi	r18, 0x00	; 0
    610e:	30 e0       	ldi	r19, 0x00	; 0
    6110:	4a ef       	ldi	r20, 0xFA	; 250
    6112:	54 e4       	ldi	r21, 0x44	; 68
    6114:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	8f 83       	std	Y+7, r24	; 0x07
    611e:	98 87       	std	Y+8, r25	; 0x08
    6120:	a9 87       	std	Y+9, r26	; 0x09
    6122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	20 e0       	ldi	r18, 0x00	; 0
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	40 e8       	ldi	r20, 0x80	; 128
    6132:	5f e3       	ldi	r21, 0x3F	; 63
    6134:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    6138:	88 23       	and	r24, r24
    613a:	2c f4       	brge	.+10     	; 0x6146 <main+0x370>
		__ticks = 1;
    613c:	81 e0       	ldi	r24, 0x01	; 1
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	9e 83       	std	Y+6, r25	; 0x06
    6142:	8d 83       	std	Y+5, r24	; 0x05
    6144:	3f c0       	rjmp	.+126    	; 0x61c4 <main+0x3ee>
	else if (__tmp > 65535)
    6146:	6f 81       	ldd	r22, Y+7	; 0x07
    6148:	78 85       	ldd	r23, Y+8	; 0x08
    614a:	89 85       	ldd	r24, Y+9	; 0x09
    614c:	9a 85       	ldd	r25, Y+10	; 0x0a
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	3f ef       	ldi	r19, 0xFF	; 255
    6152:	4f e7       	ldi	r20, 0x7F	; 127
    6154:	57 e4       	ldi	r21, 0x47	; 71
    6156:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    615a:	18 16       	cp	r1, r24
    615c:	4c f5       	brge	.+82     	; 0x61b0 <main+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    615e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6160:	7c 85       	ldd	r23, Y+12	; 0x0c
    6162:	8d 85       	ldd	r24, Y+13	; 0x0d
    6164:	9e 85       	ldd	r25, Y+14	; 0x0e
    6166:	20 e0       	ldi	r18, 0x00	; 0
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	40 e2       	ldi	r20, 0x20	; 32
    616c:	51 e4       	ldi	r21, 0x41	; 65
    616e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6172:	dc 01       	movw	r26, r24
    6174:	cb 01       	movw	r24, r22
    6176:	bc 01       	movw	r22, r24
    6178:	cd 01       	movw	r24, r26
    617a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    617e:	dc 01       	movw	r26, r24
    6180:	cb 01       	movw	r24, r22
    6182:	9e 83       	std	Y+6, r25	; 0x06
    6184:	8d 83       	std	Y+5, r24	; 0x05
    6186:	0f c0       	rjmp	.+30     	; 0x61a6 <main+0x3d0>
    6188:	88 ec       	ldi	r24, 0xC8	; 200
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	9c 83       	std	Y+4, r25	; 0x04
    618e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6190:	8b 81       	ldd	r24, Y+3	; 0x03
    6192:	9c 81       	ldd	r25, Y+4	; 0x04
    6194:	01 97       	sbiw	r24, 0x01	; 1
    6196:	f1 f7       	brne	.-4      	; 0x6194 <main+0x3be>
    6198:	9c 83       	std	Y+4, r25	; 0x04
    619a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    619c:	8d 81       	ldd	r24, Y+5	; 0x05
    619e:	9e 81       	ldd	r25, Y+6	; 0x06
    61a0:	01 97       	sbiw	r24, 0x01	; 1
    61a2:	9e 83       	std	Y+6, r25	; 0x06
    61a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a6:	8d 81       	ldd	r24, Y+5	; 0x05
    61a8:	9e 81       	ldd	r25, Y+6	; 0x06
    61aa:	00 97       	sbiw	r24, 0x00	; 0
    61ac:	69 f7       	brne	.-38     	; 0x6188 <main+0x3b2>
    61ae:	3d ce       	rjmp	.-902    	; 0x5e2a <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b0:	6f 81       	ldd	r22, Y+7	; 0x07
    61b2:	78 85       	ldd	r23, Y+8	; 0x08
    61b4:	89 85       	ldd	r24, Y+9	; 0x09
    61b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    61bc:	dc 01       	movw	r26, r24
    61be:	cb 01       	movw	r24, r22
    61c0:	9e 83       	std	Y+6, r25	; 0x06
    61c2:	8d 83       	std	Y+5, r24	; 0x05
    61c4:	8d 81       	ldd	r24, Y+5	; 0x05
    61c6:	9e 81       	ldd	r25, Y+6	; 0x06
    61c8:	9a 83       	std	Y+2, r25	; 0x02
    61ca:	89 83       	std	Y+1, r24	; 0x01
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	9a 81       	ldd	r25, Y+2	; 0x02
    61d0:	01 97       	sbiw	r24, 0x01	; 1
    61d2:	f1 f7       	brne	.-4      	; 0x61d0 <main+0x3fa>
    61d4:	9a 83       	std	Y+2, r25	; 0x02
    61d6:	89 83       	std	Y+1, r24	; 0x01
    61d8:	28 ce       	rjmp	.-944    	; 0x5e2a <main+0x54>

000061da <__mulsi3>:
    61da:	62 9f       	mul	r22, r18
    61dc:	d0 01       	movw	r26, r0
    61de:	73 9f       	mul	r23, r19
    61e0:	f0 01       	movw	r30, r0
    61e2:	82 9f       	mul	r24, r18
    61e4:	e0 0d       	add	r30, r0
    61e6:	f1 1d       	adc	r31, r1
    61e8:	64 9f       	mul	r22, r20
    61ea:	e0 0d       	add	r30, r0
    61ec:	f1 1d       	adc	r31, r1
    61ee:	92 9f       	mul	r25, r18
    61f0:	f0 0d       	add	r31, r0
    61f2:	83 9f       	mul	r24, r19
    61f4:	f0 0d       	add	r31, r0
    61f6:	74 9f       	mul	r23, r20
    61f8:	f0 0d       	add	r31, r0
    61fa:	65 9f       	mul	r22, r21
    61fc:	f0 0d       	add	r31, r0
    61fe:	99 27       	eor	r25, r25
    6200:	72 9f       	mul	r23, r18
    6202:	b0 0d       	add	r27, r0
    6204:	e1 1d       	adc	r30, r1
    6206:	f9 1f       	adc	r31, r25
    6208:	63 9f       	mul	r22, r19
    620a:	b0 0d       	add	r27, r0
    620c:	e1 1d       	adc	r30, r1
    620e:	f9 1f       	adc	r31, r25
    6210:	bd 01       	movw	r22, r26
    6212:	cf 01       	movw	r24, r30
    6214:	11 24       	eor	r1, r1
    6216:	08 95       	ret

00006218 <__udivmodhi4>:
    6218:	aa 1b       	sub	r26, r26
    621a:	bb 1b       	sub	r27, r27
    621c:	51 e1       	ldi	r21, 0x11	; 17
    621e:	07 c0       	rjmp	.+14     	; 0x622e <__udivmodhi4_ep>

00006220 <__udivmodhi4_loop>:
    6220:	aa 1f       	adc	r26, r26
    6222:	bb 1f       	adc	r27, r27
    6224:	a6 17       	cp	r26, r22
    6226:	b7 07       	cpc	r27, r23
    6228:	10 f0       	brcs	.+4      	; 0x622e <__udivmodhi4_ep>
    622a:	a6 1b       	sub	r26, r22
    622c:	b7 0b       	sbc	r27, r23

0000622e <__udivmodhi4_ep>:
    622e:	88 1f       	adc	r24, r24
    6230:	99 1f       	adc	r25, r25
    6232:	5a 95       	dec	r21
    6234:	a9 f7       	brne	.-22     	; 0x6220 <__udivmodhi4_loop>
    6236:	80 95       	com	r24
    6238:	90 95       	com	r25
    623a:	bc 01       	movw	r22, r24
    623c:	cd 01       	movw	r24, r26
    623e:	08 95       	ret

00006240 <__prologue_saves__>:
    6240:	2f 92       	push	r2
    6242:	3f 92       	push	r3
    6244:	4f 92       	push	r4
    6246:	5f 92       	push	r5
    6248:	6f 92       	push	r6
    624a:	7f 92       	push	r7
    624c:	8f 92       	push	r8
    624e:	9f 92       	push	r9
    6250:	af 92       	push	r10
    6252:	bf 92       	push	r11
    6254:	cf 92       	push	r12
    6256:	df 92       	push	r13
    6258:	ef 92       	push	r14
    625a:	ff 92       	push	r15
    625c:	0f 93       	push	r16
    625e:	1f 93       	push	r17
    6260:	cf 93       	push	r28
    6262:	df 93       	push	r29
    6264:	cd b7       	in	r28, 0x3d	; 61
    6266:	de b7       	in	r29, 0x3e	; 62
    6268:	ca 1b       	sub	r28, r26
    626a:	db 0b       	sbc	r29, r27
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	09 94       	ijmp

00006278 <__epilogue_restores__>:
    6278:	2a 88       	ldd	r2, Y+18	; 0x12
    627a:	39 88       	ldd	r3, Y+17	; 0x11
    627c:	48 88       	ldd	r4, Y+16	; 0x10
    627e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6280:	6e 84       	ldd	r6, Y+14	; 0x0e
    6282:	7d 84       	ldd	r7, Y+13	; 0x0d
    6284:	8c 84       	ldd	r8, Y+12	; 0x0c
    6286:	9b 84       	ldd	r9, Y+11	; 0x0b
    6288:	aa 84       	ldd	r10, Y+10	; 0x0a
    628a:	b9 84       	ldd	r11, Y+9	; 0x09
    628c:	c8 84       	ldd	r12, Y+8	; 0x08
    628e:	df 80       	ldd	r13, Y+7	; 0x07
    6290:	ee 80       	ldd	r14, Y+6	; 0x06
    6292:	fd 80       	ldd	r15, Y+5	; 0x05
    6294:	0c 81       	ldd	r16, Y+4	; 0x04
    6296:	1b 81       	ldd	r17, Y+3	; 0x03
    6298:	aa 81       	ldd	r26, Y+2	; 0x02
    629a:	b9 81       	ldd	r27, Y+1	; 0x01
    629c:	ce 0f       	add	r28, r30
    629e:	d1 1d       	adc	r29, r1
    62a0:	0f b6       	in	r0, 0x3f	; 63
    62a2:	f8 94       	cli
    62a4:	de bf       	out	0x3e, r29	; 62
    62a6:	0f be       	out	0x3f, r0	; 63
    62a8:	cd bf       	out	0x3d, r28	; 61
    62aa:	ed 01       	movw	r28, r26
    62ac:	08 95       	ret

000062ae <dtostrf>:
    62ae:	ef 92       	push	r14
    62b0:	ff 92       	push	r15
    62b2:	0f 93       	push	r16
    62b4:	1f 93       	push	r17
    62b6:	f2 2f       	mov	r31, r18
    62b8:	f0 2e       	mov	r15, r16
    62ba:	47 fd       	sbrc	r20, 7
    62bc:	02 c0       	rjmp	.+4      	; 0x62c2 <dtostrf+0x14>
    62be:	e4 e0       	ldi	r30, 0x04	; 4
    62c0:	01 c0       	rjmp	.+2      	; 0x62c4 <dtostrf+0x16>
    62c2:	e4 e1       	ldi	r30, 0x14	; 20
    62c4:	24 2f       	mov	r18, r20
    62c6:	33 27       	eor	r19, r19
    62c8:	27 fd       	sbrc	r18, 7
    62ca:	30 95       	com	r19
    62cc:	37 ff       	sbrs	r19, 7
    62ce:	03 c0       	rjmp	.+6      	; 0x62d6 <dtostrf+0x28>
    62d0:	30 95       	com	r19
    62d2:	21 95       	neg	r18
    62d4:	3f 4f       	sbci	r19, 0xFF	; 255
    62d6:	4f 2d       	mov	r20, r15
    62d8:	51 2f       	mov	r21, r17
    62da:	0f 2f       	mov	r16, r31
    62dc:	ee 2e       	mov	r14, r30
    62de:	0e 94 8a 31 	call	0x6314	; 0x6314 <dtoa_prf>
    62e2:	8f 2d       	mov	r24, r15
    62e4:	91 2f       	mov	r25, r17
    62e6:	1f 91       	pop	r17
    62e8:	0f 91       	pop	r16
    62ea:	ff 90       	pop	r15
    62ec:	ef 90       	pop	r14
    62ee:	08 95       	ret

000062f0 <memcpy>:
    62f0:	fb 01       	movw	r30, r22
    62f2:	dc 01       	movw	r26, r24
    62f4:	02 c0       	rjmp	.+4      	; 0x62fa <memcpy+0xa>
    62f6:	01 90       	ld	r0, Z+
    62f8:	0d 92       	st	X+, r0
    62fa:	41 50       	subi	r20, 0x01	; 1
    62fc:	50 40       	sbci	r21, 0x00	; 0
    62fe:	d8 f7       	brcc	.-10     	; 0x62f6 <memcpy+0x6>
    6300:	08 95       	ret

00006302 <strlen>:
    6302:	fc 01       	movw	r30, r24
    6304:	01 90       	ld	r0, Z+
    6306:	00 20       	and	r0, r0
    6308:	e9 f7       	brne	.-6      	; 0x6304 <strlen+0x2>
    630a:	80 95       	com	r24
    630c:	90 95       	com	r25
    630e:	8e 0f       	add	r24, r30
    6310:	9f 1f       	adc	r25, r31
    6312:	08 95       	ret

00006314 <dtoa_prf>:
    6314:	a9 e0       	ldi	r26, 0x09	; 9
    6316:	b0 e0       	ldi	r27, 0x00	; 0
    6318:	e0 e9       	ldi	r30, 0x90	; 144
    631a:	f1 e3       	ldi	r31, 0x31	; 49
    631c:	0c 94 24 31 	jmp	0x6248	; 0x6248 <__prologue_saves__+0x8>
    6320:	6a 01       	movw	r12, r20
    6322:	12 2f       	mov	r17, r18
    6324:	a0 2e       	mov	r10, r16
    6326:	be 2c       	mov	r11, r14
    6328:	2b e3       	ldi	r18, 0x3B	; 59
    632a:	20 17       	cp	r18, r16
    632c:	18 f4       	brcc	.+6      	; 0x6334 <dtoa_prf+0x20>
    632e:	2c e3       	ldi	r18, 0x3C	; 60
    6330:	92 2e       	mov	r9, r18
    6332:	02 c0       	rjmp	.+4      	; 0x6338 <dtoa_prf+0x24>
    6334:	90 2e       	mov	r9, r16
    6336:	93 94       	inc	r9
    6338:	ae 01       	movw	r20, r28
    633a:	4f 5f       	subi	r20, 0xFF	; 255
    633c:	5f 4f       	sbci	r21, 0xFF	; 255
    633e:	27 e0       	ldi	r18, 0x07	; 7
    6340:	09 2d       	mov	r16, r9
    6342:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <__ftoa_engine>
    6346:	bc 01       	movw	r22, r24
    6348:	89 81       	ldd	r24, Y+1	; 0x01
    634a:	e8 2e       	mov	r14, r24
    634c:	ff 24       	eor	r15, r15
    634e:	c7 01       	movw	r24, r14
    6350:	89 70       	andi	r24, 0x09	; 9
    6352:	90 70       	andi	r25, 0x00	; 0
    6354:	01 97       	sbiw	r24, 0x01	; 1
    6356:	11 f4       	brne	.+4      	; 0x635c <dtoa_prf+0x48>
    6358:	ad e2       	ldi	r26, 0x2D	; 45
    635a:	09 c0       	rjmp	.+18     	; 0x636e <dtoa_prf+0x5a>
    635c:	b1 fe       	sbrs	r11, 1
    635e:	02 c0       	rjmp	.+4      	; 0x6364 <dtoa_prf+0x50>
    6360:	ab e2       	ldi	r26, 0x2B	; 43
    6362:	05 c0       	rjmp	.+10     	; 0x636e <dtoa_prf+0x5a>
    6364:	b0 fc       	sbrc	r11, 0
    6366:	02 c0       	rjmp	.+4      	; 0x636c <dtoa_prf+0x58>
    6368:	a0 e0       	ldi	r26, 0x00	; 0
    636a:	01 c0       	rjmp	.+2      	; 0x636e <dtoa_prf+0x5a>
    636c:	a0 e2       	ldi	r26, 0x20	; 32
    636e:	e3 fe       	sbrs	r14, 3
    6370:	3b c0       	rjmp	.+118    	; 0x63e8 <dtoa_prf+0xd4>
    6372:	aa 23       	and	r26, r26
    6374:	11 f4       	brne	.+4      	; 0x637a <dtoa_prf+0x66>
    6376:	23 e0       	ldi	r18, 0x03	; 3
    6378:	01 c0       	rjmp	.+2      	; 0x637c <dtoa_prf+0x68>
    637a:	24 e0       	ldi	r18, 0x04	; 4
    637c:	21 17       	cp	r18, r17
    637e:	10 f0       	brcs	.+4      	; 0x6384 <dtoa_prf+0x70>
    6380:	20 e0       	ldi	r18, 0x00	; 0
    6382:	02 c0       	rjmp	.+4      	; 0x6388 <dtoa_prf+0x74>
    6384:	12 1b       	sub	r17, r18
    6386:	21 2f       	mov	r18, r17
    6388:	eb 2c       	mov	r14, r11
    638a:	b4 fe       	sbrs	r11, 4
    638c:	02 c0       	rjmp	.+4      	; 0x6392 <dtoa_prf+0x7e>
    638e:	32 2f       	mov	r19, r18
    6390:	0a c0       	rjmp	.+20     	; 0x63a6 <dtoa_prf+0x92>
    6392:	f6 01       	movw	r30, r12
    6394:	32 2f       	mov	r19, r18
    6396:	80 e2       	ldi	r24, 0x20	; 32
    6398:	02 c0       	rjmp	.+4      	; 0x639e <dtoa_prf+0x8a>
    639a:	81 93       	st	Z+, r24
    639c:	31 50       	subi	r19, 0x01	; 1
    639e:	33 23       	and	r19, r19
    63a0:	e1 f7       	brne	.-8      	; 0x639a <dtoa_prf+0x86>
    63a2:	c2 0e       	add	r12, r18
    63a4:	d1 1c       	adc	r13, r1
    63a6:	aa 23       	and	r26, r26
    63a8:	19 f0       	breq	.+6      	; 0x63b0 <dtoa_prf+0x9c>
    63aa:	f6 01       	movw	r30, r12
    63ac:	a1 93       	st	Z+, r26
    63ae:	6f 01       	movw	r12, r30
    63b0:	f6 01       	movw	r30, r12
    63b2:	31 96       	adiw	r30, 0x01	; 1
    63b4:	e2 fe       	sbrs	r14, 2
    63b6:	05 c0       	rjmp	.+10     	; 0x63c2 <dtoa_prf+0xae>
    63b8:	9e e4       	ldi	r25, 0x4E	; 78
    63ba:	d6 01       	movw	r26, r12
    63bc:	9c 93       	st	X, r25
    63be:	81 e4       	ldi	r24, 0x41	; 65
    63c0:	04 c0       	rjmp	.+8      	; 0x63ca <dtoa_prf+0xb6>
    63c2:	9e e6       	ldi	r25, 0x6E	; 110
    63c4:	d6 01       	movw	r26, r12
    63c6:	9c 93       	st	X, r25
    63c8:	81 e6       	ldi	r24, 0x61	; 97
    63ca:	11 96       	adiw	r26, 0x01	; 1
    63cc:	8c 93       	st	X, r24
    63ce:	91 83       	std	Z+1, r25	; 0x01
    63d0:	32 96       	adiw	r30, 0x02	; 2
    63d2:	df 01       	movw	r26, r30
    63d4:	83 2f       	mov	r24, r19
    63d6:	90 e2       	ldi	r25, 0x20	; 32
    63d8:	02 c0       	rjmp	.+4      	; 0x63de <dtoa_prf+0xca>
    63da:	9d 93       	st	X+, r25
    63dc:	81 50       	subi	r24, 0x01	; 1
    63de:	88 23       	and	r24, r24
    63e0:	e1 f7       	brne	.-8      	; 0x63da <dtoa_prf+0xc6>
    63e2:	e3 0f       	add	r30, r19
    63e4:	f1 1d       	adc	r31, r1
    63e6:	40 c0       	rjmp	.+128    	; 0x6468 <dtoa_prf+0x154>
    63e8:	e2 fe       	sbrs	r14, 2
    63ea:	42 c0       	rjmp	.+132    	; 0x6470 <dtoa_prf+0x15c>
    63ec:	aa 23       	and	r26, r26
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <dtoa_prf+0xe0>
    63f0:	23 e0       	ldi	r18, 0x03	; 3
    63f2:	01 c0       	rjmp	.+2      	; 0x63f6 <dtoa_prf+0xe2>
    63f4:	24 e0       	ldi	r18, 0x04	; 4
    63f6:	21 17       	cp	r18, r17
    63f8:	10 f0       	brcs	.+4      	; 0x63fe <dtoa_prf+0xea>
    63fa:	20 e0       	ldi	r18, 0x00	; 0
    63fc:	02 c0       	rjmp	.+4      	; 0x6402 <dtoa_prf+0xee>
    63fe:	12 1b       	sub	r17, r18
    6400:	21 2f       	mov	r18, r17
    6402:	eb 2c       	mov	r14, r11
    6404:	b4 fe       	sbrs	r11, 4
    6406:	02 c0       	rjmp	.+4      	; 0x640c <dtoa_prf+0xf8>
    6408:	92 2f       	mov	r25, r18
    640a:	0a c0       	rjmp	.+20     	; 0x6420 <dtoa_prf+0x10c>
    640c:	f6 01       	movw	r30, r12
    640e:	92 2f       	mov	r25, r18
    6410:	80 e2       	ldi	r24, 0x20	; 32
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <dtoa_prf+0x104>
    6414:	81 93       	st	Z+, r24
    6416:	91 50       	subi	r25, 0x01	; 1
    6418:	99 23       	and	r25, r25
    641a:	e1 f7       	brne	.-8      	; 0x6414 <dtoa_prf+0x100>
    641c:	c2 0e       	add	r12, r18
    641e:	d1 1c       	adc	r13, r1
    6420:	aa 23       	and	r26, r26
    6422:	19 f0       	breq	.+6      	; 0x642a <dtoa_prf+0x116>
    6424:	f6 01       	movw	r30, r12
    6426:	a1 93       	st	Z+, r26
    6428:	6f 01       	movw	r12, r30
    642a:	f6 01       	movw	r30, r12
    642c:	31 96       	adiw	r30, 0x01	; 1
    642e:	e2 fe       	sbrs	r14, 2
    6430:	08 c0       	rjmp	.+16     	; 0x6442 <dtoa_prf+0x12e>
    6432:	89 e4       	ldi	r24, 0x49	; 73
    6434:	d6 01       	movw	r26, r12
    6436:	8c 93       	st	X, r24
    6438:	8e e4       	ldi	r24, 0x4E	; 78
    643a:	11 96       	adiw	r26, 0x01	; 1
    643c:	8c 93       	st	X, r24
    643e:	86 e4       	ldi	r24, 0x46	; 70
    6440:	07 c0       	rjmp	.+14     	; 0x6450 <dtoa_prf+0x13c>
    6442:	89 e6       	ldi	r24, 0x69	; 105
    6444:	d6 01       	movw	r26, r12
    6446:	8c 93       	st	X, r24
    6448:	8e e6       	ldi	r24, 0x6E	; 110
    644a:	11 96       	adiw	r26, 0x01	; 1
    644c:	8c 93       	st	X, r24
    644e:	86 e6       	ldi	r24, 0x66	; 102
    6450:	81 83       	std	Z+1, r24	; 0x01
    6452:	32 96       	adiw	r30, 0x02	; 2
    6454:	df 01       	movw	r26, r30
    6456:	89 2f       	mov	r24, r25
    6458:	20 e2       	ldi	r18, 0x20	; 32
    645a:	02 c0       	rjmp	.+4      	; 0x6460 <dtoa_prf+0x14c>
    645c:	2d 93       	st	X+, r18
    645e:	81 50       	subi	r24, 0x01	; 1
    6460:	88 23       	and	r24, r24
    6462:	e1 f7       	brne	.-8      	; 0x645c <dtoa_prf+0x148>
    6464:	e9 0f       	add	r30, r25
    6466:	f1 1d       	adc	r31, r1
    6468:	10 82       	st	Z, r1
    646a:	2e ef       	ldi	r18, 0xFE	; 254
    646c:	3f ef       	ldi	r19, 0xFF	; 255
    646e:	af c0       	rjmp	.+350    	; 0x65ce <dtoa_prf+0x2ba>
    6470:	16 16       	cp	r1, r22
    6472:	17 06       	cpc	r1, r23
    6474:	1c f0       	brlt	.+6      	; 0x647c <dtoa_prf+0x168>
    6476:	41 e0       	ldi	r20, 0x01	; 1
    6478:	50 e0       	ldi	r21, 0x00	; 0
    647a:	03 c0       	rjmp	.+6      	; 0x6482 <dtoa_prf+0x16e>
    647c:	ab 01       	movw	r20, r22
    647e:	4f 5f       	subi	r20, 0xFF	; 255
    6480:	5f 4f       	sbci	r21, 0xFF	; 255
    6482:	aa 20       	and	r10, r10
    6484:	19 f4       	brne	.+6      	; 0x648c <dtoa_prf+0x178>
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	03 c0       	rjmp	.+6      	; 0x6492 <dtoa_prf+0x17e>
    648c:	8a 2d       	mov	r24, r10
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	01 96       	adiw	r24, 0x01	; 1
    6492:	20 e0       	ldi	r18, 0x00	; 0
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	aa 23       	and	r26, r26
    6498:	11 f0       	breq	.+4      	; 0x649e <dtoa_prf+0x18a>
    649a:	21 e0       	ldi	r18, 0x01	; 1
    649c:	30 e0       	ldi	r19, 0x00	; 0
    649e:	24 0f       	add	r18, r20
    64a0:	35 1f       	adc	r19, r21
    64a2:	28 0f       	add	r18, r24
    64a4:	39 1f       	adc	r19, r25
    64a6:	81 2f       	mov	r24, r17
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	28 17       	cp	r18, r24
    64ac:	39 07       	cpc	r19, r25
    64ae:	14 f0       	brlt	.+4      	; 0x64b4 <dtoa_prf+0x1a0>
    64b0:	20 e0       	ldi	r18, 0x00	; 0
    64b2:	02 c0       	rjmp	.+4      	; 0x64b8 <dtoa_prf+0x1a4>
    64b4:	12 1b       	sub	r17, r18
    64b6:	21 2f       	mov	r18, r17
    64b8:	4b 2d       	mov	r20, r11
    64ba:	50 e0       	ldi	r21, 0x00	; 0
    64bc:	ca 01       	movw	r24, r20
    64be:	80 71       	andi	r24, 0x10	; 16
    64c0:	90 70       	andi	r25, 0x00	; 0
    64c2:	b4 fc       	sbrc	r11, 4
    64c4:	0d c0       	rjmp	.+26     	; 0x64e0 <dtoa_prf+0x1cc>
    64c6:	b3 fc       	sbrc	r11, 3
    64c8:	0b c0       	rjmp	.+22     	; 0x64e0 <dtoa_prf+0x1cc>
    64ca:	f6 01       	movw	r30, r12
    64cc:	32 2f       	mov	r19, r18
    64ce:	40 e2       	ldi	r20, 0x20	; 32
    64d0:	02 c0       	rjmp	.+4      	; 0x64d6 <dtoa_prf+0x1c2>
    64d2:	41 93       	st	Z+, r20
    64d4:	31 50       	subi	r19, 0x01	; 1
    64d6:	33 23       	and	r19, r19
    64d8:	e1 f7       	brne	.-8      	; 0x64d2 <dtoa_prf+0x1be>
    64da:	c2 0e       	add	r12, r18
    64dc:	d1 1c       	adc	r13, r1
    64de:	01 c0       	rjmp	.+2      	; 0x64e2 <dtoa_prf+0x1ce>
    64e0:	32 2f       	mov	r19, r18
    64e2:	aa 23       	and	r26, r26
    64e4:	19 f0       	breq	.+6      	; 0x64ec <dtoa_prf+0x1d8>
    64e6:	f6 01       	movw	r30, r12
    64e8:	a1 93       	st	Z+, r26
    64ea:	6f 01       	movw	r12, r30
    64ec:	89 2b       	or	r24, r25
    64ee:	11 f0       	breq	.+4      	; 0x64f4 <dtoa_prf+0x1e0>
    64f0:	13 2f       	mov	r17, r19
    64f2:	0a c0       	rjmp	.+20     	; 0x6508 <dtoa_prf+0x1f4>
    64f4:	f6 01       	movw	r30, r12
    64f6:	13 2f       	mov	r17, r19
    64f8:	80 e3       	ldi	r24, 0x30	; 48
    64fa:	02 c0       	rjmp	.+4      	; 0x6500 <dtoa_prf+0x1ec>
    64fc:	81 93       	st	Z+, r24
    64fe:	11 50       	subi	r17, 0x01	; 1
    6500:	11 23       	and	r17, r17
    6502:	e1 f7       	brne	.-8      	; 0x64fc <dtoa_prf+0x1e8>
    6504:	c3 0e       	add	r12, r19
    6506:	d1 1c       	adc	r13, r1
    6508:	09 2d       	mov	r16, r9
    650a:	06 0f       	add	r16, r22
    650c:	ba 80       	ldd	r11, Y+2	; 0x02
    650e:	90 e1       	ldi	r25, 0x10	; 16
    6510:	89 2e       	mov	r8, r25
    6512:	91 2c       	mov	r9, r1
    6514:	8e 20       	and	r8, r14
    6516:	9f 20       	and	r9, r15
    6518:	e4 fe       	sbrs	r14, 4
    651a:	04 c0       	rjmp	.+8      	; 0x6524 <dtoa_prf+0x210>
    651c:	f1 e3       	ldi	r31, 0x31	; 49
    651e:	bf 16       	cp	r11, r31
    6520:	09 f4       	brne	.+2      	; 0x6524 <dtoa_prf+0x210>
    6522:	01 50       	subi	r16, 0x01	; 1
    6524:	10 16       	cp	r1, r16
    6526:	14 f0       	brlt	.+4      	; 0x652c <dtoa_prf+0x218>
    6528:	01 e0       	ldi	r16, 0x01	; 1
    652a:	03 c0       	rjmp	.+6      	; 0x6532 <dtoa_prf+0x21e>
    652c:	09 30       	cpi	r16, 0x09	; 9
    652e:	08 f0       	brcs	.+2      	; 0x6532 <dtoa_prf+0x21e>
    6530:	08 e0       	ldi	r16, 0x08	; 8
    6532:	9b 01       	movw	r18, r22
    6534:	77 ff       	sbrs	r23, 7
    6536:	02 c0       	rjmp	.+4      	; 0x653c <dtoa_prf+0x228>
    6538:	20 e0       	ldi	r18, 0x00	; 0
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	cb 01       	movw	r24, r22
    653e:	01 96       	adiw	r24, 0x01	; 1
    6540:	82 1b       	sub	r24, r18
    6542:	93 0b       	sbc	r25, r19
    6544:	fe 01       	movw	r30, r28
    6546:	31 96       	adiw	r30, 0x01	; 1
    6548:	e8 0f       	add	r30, r24
    654a:	f9 1f       	adc	r31, r25
    654c:	8e e2       	ldi	r24, 0x2E	; 46
    654e:	f8 2e       	mov	r15, r24
    6550:	3b 01       	movw	r6, r22
    6552:	60 1a       	sub	r6, r16
    6554:	71 08       	sbc	r7, r1
    6556:	8a 2d       	mov	r24, r10
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	44 27       	eor	r20, r20
    655c:	55 27       	eor	r21, r21
    655e:	48 1b       	sub	r20, r24
    6560:	59 0b       	sbc	r21, r25
    6562:	8f ef       	ldi	r24, 0xFF	; 255
    6564:	2f 3f       	cpi	r18, 0xFF	; 255
    6566:	38 07       	cpc	r19, r24
    6568:	19 f4       	brne	.+6      	; 0x6570 <dtoa_prf+0x25c>
    656a:	d6 01       	movw	r26, r12
    656c:	fd 92       	st	X+, r15
    656e:	6d 01       	movw	r12, r26
    6570:	62 17       	cp	r22, r18
    6572:	73 07       	cpc	r23, r19
    6574:	2c f0       	brlt	.+10     	; 0x6580 <dtoa_prf+0x26c>
    6576:	62 16       	cp	r6, r18
    6578:	73 06       	cpc	r7, r19
    657a:	14 f4       	brge	.+4      	; 0x6580 <dtoa_prf+0x26c>
    657c:	80 81       	ld	r24, Z
    657e:	01 c0       	rjmp	.+2      	; 0x6582 <dtoa_prf+0x26e>
    6580:	80 e3       	ldi	r24, 0x30	; 48
    6582:	21 50       	subi	r18, 0x01	; 1
    6584:	30 40       	sbci	r19, 0x00	; 0
    6586:	31 96       	adiw	r30, 0x01	; 1
    6588:	24 17       	cp	r18, r20
    658a:	35 07       	cpc	r19, r21
    658c:	24 f0       	brlt	.+8      	; 0x6596 <dtoa_prf+0x282>
    658e:	d6 01       	movw	r26, r12
    6590:	8d 93       	st	X+, r24
    6592:	6d 01       	movw	r12, r26
    6594:	e6 cf       	rjmp	.-52     	; 0x6562 <dtoa_prf+0x24e>
    6596:	26 17       	cp	r18, r22
    6598:	37 07       	cpc	r19, r23
    659a:	49 f4       	brne	.+18     	; 0x65ae <dtoa_prf+0x29a>
    659c:	b5 e3       	ldi	r27, 0x35	; 53
    659e:	bb 15       	cp	r27, r11
    65a0:	28 f0       	brcs	.+10     	; 0x65ac <dtoa_prf+0x298>
    65a2:	bb 16       	cp	r11, r27
    65a4:	21 f4       	brne	.+8      	; 0x65ae <dtoa_prf+0x29a>
    65a6:	81 14       	cp	r8, r1
    65a8:	91 04       	cpc	r9, r1
    65aa:	09 f4       	brne	.+2      	; 0x65ae <dtoa_prf+0x29a>
    65ac:	81 e3       	ldi	r24, 0x31	; 49
    65ae:	f6 01       	movw	r30, r12
    65b0:	81 93       	st	Z+, r24
    65b2:	d6 01       	movw	r26, r12
    65b4:	81 2f       	mov	r24, r17
    65b6:	90 e2       	ldi	r25, 0x20	; 32
    65b8:	02 c0       	rjmp	.+4      	; 0x65be <dtoa_prf+0x2aa>
    65ba:	9c 93       	st	X, r25
    65bc:	81 50       	subi	r24, 0x01	; 1
    65be:	11 96       	adiw	r26, 0x01	; 1
    65c0:	88 23       	and	r24, r24
    65c2:	d9 f7       	brne	.-10     	; 0x65ba <dtoa_prf+0x2a6>
    65c4:	e1 0f       	add	r30, r17
    65c6:	f1 1d       	adc	r31, r1
    65c8:	10 82       	st	Z, r1
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	c9 01       	movw	r24, r18
    65d0:	29 96       	adiw	r28, 0x09	; 9
    65d2:	ee e0       	ldi	r30, 0x0E	; 14
    65d4:	0c 94 40 31 	jmp	0x6280	; 0x6280 <__epilogue_restores__+0x8>

000065d8 <__ftoa_engine>:
    65d8:	28 30       	cpi	r18, 0x08	; 8
    65da:	08 f0       	brcs	.+2      	; 0x65de <__ftoa_engine+0x6>
    65dc:	27 e0       	ldi	r18, 0x07	; 7
    65de:	33 27       	eor	r19, r19
    65e0:	da 01       	movw	r26, r20
    65e2:	99 0f       	add	r25, r25
    65e4:	31 1d       	adc	r19, r1
    65e6:	87 fd       	sbrc	r24, 7
    65e8:	91 60       	ori	r25, 0x01	; 1
    65ea:	00 96       	adiw	r24, 0x00	; 0
    65ec:	61 05       	cpc	r22, r1
    65ee:	71 05       	cpc	r23, r1
    65f0:	39 f4       	brne	.+14     	; 0x6600 <__ftoa_engine+0x28>
    65f2:	32 60       	ori	r19, 0x02	; 2
    65f4:	2e 5f       	subi	r18, 0xFE	; 254
    65f6:	3d 93       	st	X+, r19
    65f8:	30 e3       	ldi	r19, 0x30	; 48
    65fa:	2a 95       	dec	r18
    65fc:	e1 f7       	brne	.-8      	; 0x65f6 <__ftoa_engine+0x1e>
    65fe:	08 95       	ret
    6600:	9f 3f       	cpi	r25, 0xFF	; 255
    6602:	30 f0       	brcs	.+12     	; 0x6610 <__ftoa_engine+0x38>
    6604:	80 38       	cpi	r24, 0x80	; 128
    6606:	71 05       	cpc	r23, r1
    6608:	61 05       	cpc	r22, r1
    660a:	09 f0       	breq	.+2      	; 0x660e <__ftoa_engine+0x36>
    660c:	3c 5f       	subi	r19, 0xFC	; 252
    660e:	3c 5f       	subi	r19, 0xFC	; 252
    6610:	3d 93       	st	X+, r19
    6612:	91 30       	cpi	r25, 0x01	; 1
    6614:	08 f0       	brcs	.+2      	; 0x6618 <__ftoa_engine+0x40>
    6616:	80 68       	ori	r24, 0x80	; 128
    6618:	91 1d       	adc	r25, r1
    661a:	df 93       	push	r29
    661c:	cf 93       	push	r28
    661e:	1f 93       	push	r17
    6620:	0f 93       	push	r16
    6622:	ff 92       	push	r15
    6624:	ef 92       	push	r14
    6626:	19 2f       	mov	r17, r25
    6628:	98 7f       	andi	r25, 0xF8	; 248
    662a:	96 95       	lsr	r25
    662c:	e9 2f       	mov	r30, r25
    662e:	96 95       	lsr	r25
    6630:	96 95       	lsr	r25
    6632:	e9 0f       	add	r30, r25
    6634:	ff 27       	eor	r31, r31
    6636:	e2 55       	subi	r30, 0x52	; 82
    6638:	ff 4f       	sbci	r31, 0xFF	; 255
    663a:	99 27       	eor	r25, r25
    663c:	33 27       	eor	r19, r19
    663e:	ee 24       	eor	r14, r14
    6640:	ff 24       	eor	r15, r15
    6642:	a7 01       	movw	r20, r14
    6644:	e7 01       	movw	r28, r14
    6646:	05 90       	lpm	r0, Z+
    6648:	08 94       	sec
    664a:	07 94       	ror	r0
    664c:	28 f4       	brcc	.+10     	; 0x6658 <__ftoa_engine+0x80>
    664e:	36 0f       	add	r19, r22
    6650:	e7 1e       	adc	r14, r23
    6652:	f8 1e       	adc	r15, r24
    6654:	49 1f       	adc	r20, r25
    6656:	51 1d       	adc	r21, r1
    6658:	66 0f       	add	r22, r22
    665a:	77 1f       	adc	r23, r23
    665c:	88 1f       	adc	r24, r24
    665e:	99 1f       	adc	r25, r25
    6660:	06 94       	lsr	r0
    6662:	a1 f7       	brne	.-24     	; 0x664c <__ftoa_engine+0x74>
    6664:	05 90       	lpm	r0, Z+
    6666:	07 94       	ror	r0
    6668:	28 f4       	brcc	.+10     	; 0x6674 <__ftoa_engine+0x9c>
    666a:	e7 0e       	add	r14, r23
    666c:	f8 1e       	adc	r15, r24
    666e:	49 1f       	adc	r20, r25
    6670:	56 1f       	adc	r21, r22
    6672:	c1 1d       	adc	r28, r1
    6674:	77 0f       	add	r23, r23
    6676:	88 1f       	adc	r24, r24
    6678:	99 1f       	adc	r25, r25
    667a:	66 1f       	adc	r22, r22
    667c:	06 94       	lsr	r0
    667e:	a1 f7       	brne	.-24     	; 0x6668 <__ftoa_engine+0x90>
    6680:	05 90       	lpm	r0, Z+
    6682:	07 94       	ror	r0
    6684:	28 f4       	brcc	.+10     	; 0x6690 <__ftoa_engine+0xb8>
    6686:	f8 0e       	add	r15, r24
    6688:	49 1f       	adc	r20, r25
    668a:	56 1f       	adc	r21, r22
    668c:	c7 1f       	adc	r28, r23
    668e:	d1 1d       	adc	r29, r1
    6690:	88 0f       	add	r24, r24
    6692:	99 1f       	adc	r25, r25
    6694:	66 1f       	adc	r22, r22
    6696:	77 1f       	adc	r23, r23
    6698:	06 94       	lsr	r0
    669a:	a1 f7       	brne	.-24     	; 0x6684 <__ftoa_engine+0xac>
    669c:	05 90       	lpm	r0, Z+
    669e:	07 94       	ror	r0
    66a0:	20 f4       	brcc	.+8      	; 0x66aa <__ftoa_engine+0xd2>
    66a2:	49 0f       	add	r20, r25
    66a4:	56 1f       	adc	r21, r22
    66a6:	c7 1f       	adc	r28, r23
    66a8:	d8 1f       	adc	r29, r24
    66aa:	99 0f       	add	r25, r25
    66ac:	66 1f       	adc	r22, r22
    66ae:	77 1f       	adc	r23, r23
    66b0:	88 1f       	adc	r24, r24
    66b2:	06 94       	lsr	r0
    66b4:	a9 f7       	brne	.-22     	; 0x66a0 <__ftoa_engine+0xc8>
    66b6:	84 91       	lpm	r24, Z+
    66b8:	10 95       	com	r17
    66ba:	17 70       	andi	r17, 0x07	; 7
    66bc:	41 f0       	breq	.+16     	; 0x66ce <__ftoa_engine+0xf6>
    66be:	d6 95       	lsr	r29
    66c0:	c7 95       	ror	r28
    66c2:	57 95       	ror	r21
    66c4:	47 95       	ror	r20
    66c6:	f7 94       	ror	r15
    66c8:	e7 94       	ror	r14
    66ca:	1a 95       	dec	r17
    66cc:	c1 f7       	brne	.-16     	; 0x66be <__ftoa_engine+0xe6>
    66ce:	e4 e5       	ldi	r30, 0x54	; 84
    66d0:	f0 e0       	ldi	r31, 0x00	; 0
    66d2:	68 94       	set
    66d4:	15 90       	lpm	r1, Z+
    66d6:	15 91       	lpm	r17, Z+
    66d8:	35 91       	lpm	r19, Z+
    66da:	65 91       	lpm	r22, Z+
    66dc:	95 91       	lpm	r25, Z+
    66de:	05 90       	lpm	r0, Z+
    66e0:	7f e2       	ldi	r23, 0x2F	; 47
    66e2:	73 95       	inc	r23
    66e4:	e1 18       	sub	r14, r1
    66e6:	f1 0a       	sbc	r15, r17
    66e8:	43 0b       	sbc	r20, r19
    66ea:	56 0b       	sbc	r21, r22
    66ec:	c9 0b       	sbc	r28, r25
    66ee:	d0 09       	sbc	r29, r0
    66f0:	c0 f7       	brcc	.-16     	; 0x66e2 <__ftoa_engine+0x10a>
    66f2:	e1 0c       	add	r14, r1
    66f4:	f1 1e       	adc	r15, r17
    66f6:	43 1f       	adc	r20, r19
    66f8:	56 1f       	adc	r21, r22
    66fa:	c9 1f       	adc	r28, r25
    66fc:	d0 1d       	adc	r29, r0
    66fe:	7e f4       	brtc	.+30     	; 0x671e <__ftoa_engine+0x146>
    6700:	70 33       	cpi	r23, 0x30	; 48
    6702:	11 f4       	brne	.+4      	; 0x6708 <__ftoa_engine+0x130>
    6704:	8a 95       	dec	r24
    6706:	e6 cf       	rjmp	.-52     	; 0x66d4 <__ftoa_engine+0xfc>
    6708:	e8 94       	clt
    670a:	01 50       	subi	r16, 0x01	; 1
    670c:	30 f0       	brcs	.+12     	; 0x671a <__ftoa_engine+0x142>
    670e:	08 0f       	add	r16, r24
    6710:	0a f4       	brpl	.+2      	; 0x6714 <__ftoa_engine+0x13c>
    6712:	00 27       	eor	r16, r16
    6714:	02 17       	cp	r16, r18
    6716:	08 f4       	brcc	.+2      	; 0x671a <__ftoa_engine+0x142>
    6718:	20 2f       	mov	r18, r16
    671a:	23 95       	inc	r18
    671c:	02 2f       	mov	r16, r18
    671e:	7a 33       	cpi	r23, 0x3A	; 58
    6720:	28 f0       	brcs	.+10     	; 0x672c <__ftoa_engine+0x154>
    6722:	79 e3       	ldi	r23, 0x39	; 57
    6724:	7d 93       	st	X+, r23
    6726:	2a 95       	dec	r18
    6728:	e9 f7       	brne	.-6      	; 0x6724 <__ftoa_engine+0x14c>
    672a:	10 c0       	rjmp	.+32     	; 0x674c <__ftoa_engine+0x174>
    672c:	7d 93       	st	X+, r23
    672e:	2a 95       	dec	r18
    6730:	89 f6       	brne	.-94     	; 0x66d4 <__ftoa_engine+0xfc>
    6732:	06 94       	lsr	r0
    6734:	97 95       	ror	r25
    6736:	67 95       	ror	r22
    6738:	37 95       	ror	r19
    673a:	17 95       	ror	r17
    673c:	17 94       	ror	r1
    673e:	e1 18       	sub	r14, r1
    6740:	f1 0a       	sbc	r15, r17
    6742:	43 0b       	sbc	r20, r19
    6744:	56 0b       	sbc	r21, r22
    6746:	c9 0b       	sbc	r28, r25
    6748:	d0 09       	sbc	r29, r0
    674a:	98 f0       	brcs	.+38     	; 0x6772 <__ftoa_engine+0x19a>
    674c:	23 95       	inc	r18
    674e:	7e 91       	ld	r23, -X
    6750:	73 95       	inc	r23
    6752:	7a 33       	cpi	r23, 0x3A	; 58
    6754:	08 f0       	brcs	.+2      	; 0x6758 <__ftoa_engine+0x180>
    6756:	70 e3       	ldi	r23, 0x30	; 48
    6758:	7c 93       	st	X, r23
    675a:	20 13       	cpse	r18, r16
    675c:	b8 f7       	brcc	.-18     	; 0x674c <__ftoa_engine+0x174>
    675e:	7e 91       	ld	r23, -X
    6760:	70 61       	ori	r23, 0x10	; 16
    6762:	7d 93       	st	X+, r23
    6764:	30 f0       	brcs	.+12     	; 0x6772 <__ftoa_engine+0x19a>
    6766:	83 95       	inc	r24
    6768:	71 e3       	ldi	r23, 0x31	; 49
    676a:	7d 93       	st	X+, r23
    676c:	70 e3       	ldi	r23, 0x30	; 48
    676e:	2a 95       	dec	r18
    6770:	e1 f7       	brne	.-8      	; 0x676a <__ftoa_engine+0x192>
    6772:	11 24       	eor	r1, r1
    6774:	ef 90       	pop	r14
    6776:	ff 90       	pop	r15
    6778:	0f 91       	pop	r16
    677a:	1f 91       	pop	r17
    677c:	cf 91       	pop	r28
    677e:	df 91       	pop	r29
    6780:	99 27       	eor	r25, r25
    6782:	87 fd       	sbrc	r24, 7
    6784:	90 95       	com	r25
    6786:	08 95       	ret

00006788 <_exit>:
    6788:	f8 94       	cli

0000678a <__stop_program>:
    678a:	ff cf       	rjmp	.-2      	; 0x678a <__stop_program>
