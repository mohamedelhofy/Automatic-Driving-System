
motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002262  000022f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800184  00800184  0000241a  2**0
                  ALLOC
  3 .stab         000040e0  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c3  00000000  00000000  000064fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00007c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00007dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00009ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000adb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000bf64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000c24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 10 	call	0x211e	; 0x211e <main>
      8a:	0c 94 2f 11 	jmp	0x225e	; 0x225e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UART_Receive_Byte>:
    UBRRH =0;
}

unsigned char UART_Receive_Byte(void)
{
	while (!(UCSRA & (1<<RXC)));
     d6e:	5f 9b       	sbis	0x0b, 7	; 11
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <UART_Receive_Byte>

	return UDR;
     d72:	8c b1       	in	r24, 0x0c	; 12
}
     d74:	08 95       	ret

00000d76 <UART_Send_Byte>:
}


void UART_Send_Byte(u8 data)
{
	while (GET_BIT(UCSRA,UDRE)==0);
     d76:	5d 9b       	sbis	0x0b, 5	; 11
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <UART_Send_Byte>
	UCSRA |= (1<<UDRE);
     d7a:	5d 9a       	sbi	0x0b, 5	; 11

	UDR=data;
     d7c:	8c b9       	out	0x0c, r24	; 12
	while (GET_BIT(UCSRA,TXC)==0)
     d7e:	8b b1       	in	r24, 0x0b	; 11
     d80:	82 95       	swap	r24
     d82:	86 95       	lsr	r24
     d84:	86 95       	lsr	r24
     d86:	83 70       	andi	r24, 0x03	; 3
     d88:	80 fd       	sbrc	r24, 0
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <UART_Send_Byte+0x1c>
	{
		UCSRA |= (1<<TXC);
     d8c:	5e 9a       	sbi	0x0b, 6	; 11
{
	while (GET_BIT(UCSRA,UDRE)==0);
	UCSRA |= (1<<UDRE);

	UDR=data;
	while (GET_BIT(UCSRA,TXC)==0)
     d8e:	5e 9b       	sbis	0x0b, 6	; 11
     d90:	fd cf       	rjmp	.-6      	; 0xd8c <UART_Send_Byte+0x16>
     d92:	08 95       	ret

00000d94 <UART_Init>:
//
//}

void UART_Init(void)
{
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_OUTPUT);
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE); // Enable RX, TX, RX interrupt
     da8:	88 e9       	ldi	r24, 0x98	; 152
     daa:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // 8-bit data
     dac:	86 e8       	ldi	r24, 0x86	; 134
     dae:	80 bd       	out	0x20, r24	; 32
    UBRRL = 51; // Baudrate 9600 @ 8MHz
     db0:	83 e3       	ldi	r24, 0x33	; 51
     db2:	89 b9       	out	0x09, r24	; 9
    UBRRH =0;
     db4:	10 bc       	out	0x20, r1	; 32
}
     db6:	08 95       	ret

00000db8 <UART_Init_Interrupt>:
	return UDR;
}

void UART_Init_Interrupt(void)
{
	UART_Init();
     db8:	0e 94 ca 06 	call	0xd94	; 0xd94 <UART_Init>

	UCSRB |= (1<<RXCIE)|(1<<TXCIE);
     dbc:	8a b1       	in	r24, 0x0a	; 10
     dbe:	80 6c       	ori	r24, 0xC0	; 192
     dc0:	8a b9       	out	0x0a, r24	; 10

	__asm__ __volatile__ ("sei" ::);
     dc2:	78 94       	sei
}
     dc4:	08 95       	ret

00000dc6 <ADC_voidInit>:
#include "../Library/BIT_MATH.h"
#include "ADC_Interface.h"
#include "ADC_Register.h"
void ADC_voidInit(void){
	// select voltage refernce
	CLR_BIT(ADMUX,ADMUX_REFS1);
     dc6:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX,ADMUX_REFS0);
     dc8:	3e 9a       	sbi	0x07, 6	; 7
	// select the right adjustment
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     dca:	3d 98       	cbi	0x07, 5	; 7
	// Prescaler Select
	SET_BIT(ADCSRA,ADSCRA_ADPS0);
     dcc:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,ADSCRA_ADPS1);
     dce:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADSCRA_ADPS2);
     dd0:	32 9a       	sbi	0x06, 2	; 6
	//  enables the ADC
	SET_BIT(ADCSRA,ADSCRA_ADEN);
     dd2:	37 9a       	sbi	0x06, 7	; 6
}
     dd4:	08 95       	ret

00000dd6 <ADC_u16GetDigitalValue>:
u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNb){
	ADMUX &= ADMUX_CHANNEL_NUM_MASK ;
     dd6:	97 b1       	in	r25, 0x07	; 7
     dd8:	90 77       	andi	r25, 0x70	; 112
     dda:	97 b9       	out	0x07, r25	; 7
	// select channel number
	ADMUX |= Copy_u8ChannelNb ;
     ddc:	97 b1       	in	r25, 0x07	; 7
     dde:	98 2b       	or	r25, r24
     de0:	97 b9       	out	0x07, r25	; 7
	// Start Conversion
	SET_BIT(ADCSRA,ADSCRA_ADSC);
     de2:	36 9a       	sbi	0x06, 6	; 6
	// polling on flag
	while(GET_BIT(ADCSRA,ADSCRA_ADIF) == 0);
     de4:	34 9b       	sbis	0x06, 4	; 6
     de6:	fe cf       	rjmp	.-4      	; 0xde4 <ADC_u16GetDigitalValue+0xe>
	SET_BIT(ADCSRA,ADSCRA_ADIF);
     de8:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
     dea:	24 b1       	in	r18, 0x04	; 4
     dec:	35 b1       	in	r19, 0x05	; 5

}
     dee:	c9 01       	movw	r24, r18
     df0:	08 95       	ret

00000df2 <DIO_voidSetPortDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{

	switch(u8PortId){
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	59 f0       	breq	.+22     	; 0xe0c <DIO_voidSetPortDirection+0x1a>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	28 f0       	brcs	.+10     	; 0xe04 <DIO_voidSetPortDirection+0x12>
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	49 f0       	breq	.+18     	; 0xe10 <DIO_voidSetPortDirection+0x1e>
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	19 f0       	breq	.+6      	; 0xe08 <DIO_voidSetPortDirection+0x16>
     e02:	08 95       	ret
		case DIO_u8_PORTA : DDRA= Direction; break;
     e04:	6a bb       	out	0x1a, r22	; 26
     e06:	08 95       	ret
		case DIO_u8_PORTB : DDRB= Direction; break;
		case DIO_u8_PORTC : DDRC= Direction; break;
		case DIO_u8_PORTD : DDRD= Direction; break;
     e08:	61 bb       	out	0x11, r22	; 17
     e0a:	08 95       	ret
void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{

	switch(u8PortId){
		case DIO_u8_PORTA : DDRA= Direction; break;
		case DIO_u8_PORTB : DDRB= Direction; break;
     e0c:	67 bb       	out	0x17, r22	; 23
     e0e:	08 95       	ret
		case DIO_u8_PORTC : DDRC= Direction; break;
     e10:	64 bb       	out	0x14, r22	; 20
     e12:	08 95       	ret

00000e14 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal){
		
	switch(u8PortId){
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	59 f0       	breq	.+22     	; 0xe2e <DIO_voidSetPortValue+0x1a>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	28 f0       	brcs	.+10     	; 0xe26 <DIO_voidSetPortValue+0x12>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	49 f0       	breq	.+18     	; 0xe32 <DIO_voidSetPortValue+0x1e>
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	19 f0       	breq	.+6      	; 0xe2a <DIO_voidSetPortValue+0x16>
     e24:	08 95       	ret
		case DIO_u8_PORTA :PORTA=u8PortVal;  break;
     e26:	6b bb       	out	0x1b, r22	; 27
     e28:	08 95       	ret
		case DIO_u8_PORTB :PORTB=u8PortVal; break;
		case DIO_u8_PORTC :PORTC=u8PortVal; break;
		case DIO_u8_PORTD :PORTD=u8PortVal;  break;
     e2a:	62 bb       	out	0x12, r22	; 18
     e2c:	08 95       	ret
}
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal){
		
	switch(u8PortId){
		case DIO_u8_PORTA :PORTA=u8PortVal;  break;
		case DIO_u8_PORTB :PORTB=u8PortVal; break;
     e2e:	68 bb       	out	0x18, r22	; 24
     e30:	08 95       	ret
		case DIO_u8_PORTC :PORTC=u8PortVal; break;
     e32:	65 bb       	out	0x15, r22	; 21
     e34:	08 95       	ret

00000e36 <DIO_u8GetPinValue>:
		case DIO_u8_PORTD :PORTD=u8PortVal;  break;
	}
}
u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
	u8 value = 0;
	switch(u8PortIdCopy){
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	d1 f0       	breq	.+52     	; 0xe6e <DIO_u8GetPinValue+0x38>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	30 f0       	brcs	.+12     	; 0xe4a <DIO_u8GetPinValue+0x14>
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	f9 f0       	breq	.+62     	; 0xe80 <DIO_u8GetPinValue+0x4a>
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	59 f0       	breq	.+22     	; 0xe5c <DIO_u8GetPinValue+0x26>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
		case DIO_u8_PORTA : value = GET_BIT(PINA , u8PinIdCopy); break;
     e4a:	89 b3       	in	r24, 0x19	; 25
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_u8GetPinValue+0x1e>
     e50:	95 95       	asr	r25
     e52:	87 95       	ror	r24
     e54:	6a 95       	dec	r22
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_u8GetPinValue+0x1a>
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	08 95       	ret
		case DIO_u8_PORTB : value = GET_BIT(PINB , u8PinIdCopy); break;
		case DIO_u8_PORTC : value = GET_BIT(PINC , u8PinIdCopy); break;
		case DIO_u8_PORTD : value = GET_BIT(PIND , u8PinIdCopy); break;
     e5c:	80 b3       	in	r24, 0x10	; 16
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_u8GetPinValue+0x30>
     e62:	95 95       	asr	r25
     e64:	87 95       	ror	r24
     e66:	6a 95       	dec	r22
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_u8GetPinValue+0x2c>
     e6a:	81 70       	andi	r24, 0x01	; 1
	}
	return value;
}
     e6c:	08 95       	ret
}
u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
	u8 value = 0;
	switch(u8PortIdCopy){
		case DIO_u8_PORTA : value = GET_BIT(PINA , u8PinIdCopy); break;
		case DIO_u8_PORTB : value = GET_BIT(PINB , u8PinIdCopy); break;
     e6e:	86 b3       	in	r24, 0x16	; 22
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_u8GetPinValue+0x42>
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	6a 95       	dec	r22
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_u8GetPinValue+0x3e>
     e7c:	81 70       	andi	r24, 0x01	; 1
     e7e:	08 95       	ret
		case DIO_u8_PORTC : value = GET_BIT(PINC , u8PinIdCopy); break;
     e80:	83 b3       	in	r24, 0x13	; 19
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_u8GetPinValue+0x54>
     e86:	95 95       	asr	r25
     e88:	87 95       	ror	r24
     e8a:	6a 95       	dec	r22
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_u8GetPinValue+0x50>
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	08 95       	ret

00000e92 <DIO_voidSetPinValue>:
	}
	return value;
}

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
     e92:	41 30       	cpi	r20, 0x01	; 1
     e94:	81 f0       	breq	.+32     	; 0xeb6 <DIO_voidSetPinValue+0x24>
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	49 f1       	breq	.+82     	; 0xeec <DIO_voidSetPinValue+0x5a>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	b8 f4       	brcc	.+46     	; 0xecc <DIO_voidSetPinValue+0x3a>
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
     e9e:	2b b3       	in	r18, 0x1b	; 27
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinValue+0x18>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	6a 95       	dec	r22
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinValue+0x14>
     eae:	80 95       	com	r24
     eb0:	82 23       	and	r24, r18
     eb2:	8b bb       	out	0x1b, r24	; 27
     eb4:	08 95       	ret
}

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <DIO_voidSetPinValue+0x2a>
     eba:	46 c0       	rjmp	.+140    	; 0xf48 <DIO_voidSetPinValue+0xb6>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	10 f1       	brcs	.+68     	; 0xf04 <DIO_voidSetPinValue+0x72>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	09 f4       	brne	.+2      	; 0xec6 <DIO_voidSetPinValue+0x34>
     ec4:	4c c0       	rjmp	.+152    	; 0xf5e <DIO_voidSetPinValue+0xcc>
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	a1 f1       	breq	.+104    	; 0xf32 <DIO_voidSetPinValue+0xa0>
     eca:	08 95       	ret
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	29 f1       	breq	.+74     	; 0xf1a <DIO_voidSetPinValue+0x88>
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	d9 f7       	brne	.-10     	; 0xeca <DIO_voidSetPinValue+0x38>
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : CLR_BIT(PORTD , u8PinIdCopy); break;
     ed4:	22 b3       	in	r18, 0x12	; 18
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_voidSetPinValue+0x4e>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	6a 95       	dec	r22
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_voidSetPinValue+0x4a>
     ee4:	80 95       	com	r24
     ee6:	82 23       	and	r24, r18
     ee8:	82 bb       	out	0x12, r24	; 18
     eea:	08 95       	ret
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
     eec:	28 b3       	in	r18, 0x18	; 24
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_voidSetPinValue+0x66>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	6a 95       	dec	r22
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_voidSetPinValue+0x62>
     efc:	80 95       	com	r24
     efe:	82 23       	and	r24, r18
     f00:	88 bb       	out	0x18, r24	; 24
     f02:	08 95       	ret

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
     f04:	2b b3       	in	r18, 0x1b	; 27
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_voidSetPinValue+0x7e>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	6a 95       	dec	r22
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_voidSetPinValue+0x7a>
     f14:	28 2b       	or	r18, r24
     f16:	2b bb       	out	0x1b, r18	; 27
     f18:	08 95       	ret
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
     f1a:	25 b3       	in	r18, 0x15	; 21
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_voidSetPinValue+0x94>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	6a 95       	dec	r22
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_voidSetPinValue+0x90>
     f2a:	80 95       	com	r24
     f2c:	82 23       	and	r24, r18
     f2e:	85 bb       	out	0x15, r24	; 21
     f30:	08 95       	ret
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
     f32:	22 b3       	in	r18, 0x12	; 18
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_voidSetPinValue+0xac>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	6a 95       	dec	r22
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_voidSetPinValue+0xa8>
     f42:	28 2b       	or	r18, r24
     f44:	22 bb       	out	0x12, r18	; 18
     f46:	08 95       	ret
void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
     f48:	28 b3       	in	r18, 0x18	; 24
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_voidSetPinValue+0xc2>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	6a 95       	dec	r22
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_voidSetPinValue+0xbe>
     f58:	28 2b       	or	r18, r24
     f5a:	28 bb       	out	0x18, r18	; 24
     f5c:	08 95       	ret
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
     f5e:	25 b3       	in	r18, 0x15	; 21
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_voidSetPinValue+0xd8>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	6a 95       	dec	r22
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_voidSetPinValue+0xd4>
     f6e:	28 2b       	or	r18, r24
     f70:	25 bb       	out	0x15, r18	; 21
     f72:	08 95       	ret

00000f74 <DIO_voidSetPinDirection>:

	}

}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
     f74:	41 30       	cpi	r20, 0x01	; 1
     f76:	81 f0       	breq	.+32     	; 0xf98 <DIO_voidSetPinDirection+0x24>
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	49 f1       	breq	.+82     	; 0xfce <DIO_voidSetPinDirection+0x5a>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	b8 f4       	brcc	.+46     	; 0xfae <DIO_voidSetPinDirection+0x3a>
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
     f80:	2a b3       	in	r18, 0x1a	; 26
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_voidSetPinDirection+0x18>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	6a 95       	dec	r22
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_voidSetPinDirection+0x14>
     f90:	80 95       	com	r24
     f92:	82 23       	and	r24, r18
     f94:	8a bb       	out	0x1a, r24	; 26
     f96:	08 95       	ret

}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO_voidSetPinDirection+0x2a>
     f9c:	46 c0       	rjmp	.+140    	; 0x102a <DIO_voidSetPinDirection+0xb6>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	10 f1       	brcs	.+68     	; 0xfe6 <DIO_voidSetPinDirection+0x72>
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <DIO_voidSetPinDirection+0x34>
     fa6:	4c c0       	rjmp	.+152    	; 0x1040 <DIO_voidSetPinDirection+0xcc>
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	a1 f1       	breq	.+104    	; 0x1014 <DIO_voidSetPinDirection+0xa0>
     fac:	08 95       	ret
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	29 f1       	breq	.+74     	; 0xffc <DIO_voidSetPinDirection+0x88>
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	d9 f7       	brne	.-10     	; 0xfac <DIO_voidSetPinDirection+0x38>
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : CLR_BIT(DDRD , u8PinIdCopy); break;
     fb6:	21 b3       	in	r18, 0x11	; 17
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinDirection+0x4e>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	6a 95       	dec	r22
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinDirection+0x4a>
     fc6:	80 95       	com	r24
     fc8:	82 23       	and	r24, r18
     fca:	81 bb       	out	0x11, r24	; 17
     fcc:	08 95       	ret
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
     fce:	27 b3       	in	r18, 0x17	; 23
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_voidSetPinDirection+0x66>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	6a 95       	dec	r22
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_voidSetPinDirection+0x62>
     fde:	80 95       	com	r24
     fe0:	82 23       	and	r24, r18
     fe2:	87 bb       	out	0x17, r24	; 23
     fe4:	08 95       	ret
}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
     fe6:	2a b3       	in	r18, 0x1a	; 26
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_voidSetPinDirection+0x7e>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	6a 95       	dec	r22
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_voidSetPinDirection+0x7a>
     ff6:	28 2b       	or	r18, r24
     ff8:	2a bb       	out	0x1a, r18	; 26
     ffa:	08 95       	ret
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(DDRC , u8PinIdCopy); break;
     ffc:	24 b3       	in	r18, 0x14	; 20
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_voidSetPinDirection+0x94>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	6a 95       	dec	r22
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_voidSetPinDirection+0x90>
    100c:	80 95       	com	r24
    100e:	82 23       	and	r24, r18
    1010:	84 bb       	out	0x14, r24	; 20
    1012:	08 95       	ret
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
    1014:	21 b3       	in	r18, 0x11	; 17
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinDirection+0xac>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	6a 95       	dec	r22
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinDirection+0xa8>
    1024:	28 2b       	or	r18, r24
    1026:	21 bb       	out	0x11, r18	; 17
    1028:	08 95       	ret
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
    102a:	27 b3       	in	r18, 0x17	; 23
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_voidSetPinDirection+0xc2>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	6a 95       	dec	r22
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_voidSetPinDirection+0xbe>
    103a:	28 2b       	or	r18, r24
    103c:	27 bb       	out	0x17, r18	; 23
    103e:	08 95       	ret
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
    1040:	24 b3       	in	r18, 0x14	; 20
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_voidSetPinDirection+0xd8>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	6a 95       	dec	r22
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_voidSetPinDirection+0xd4>
    1050:	28 2b       	or	r18, r24
    1052:	24 bb       	out	0x14, r18	; 20
    1054:	08 95       	ret

00001056 <EXT2_IN_Enable>:
    GICR |=1<<6;
    GICR |=1<<7;
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
}
void EXT2_IN_Enable(void){}
    1056:	08 95       	ret

00001058 <EXT1_IN_Enable>:
#include "GIE_interface.h"
#include "EXT_IN_Interface.h"
#include "EXT_IN_Register.h"
void EXT1_IN_Enable(void){
    // Enable global interrupts
	Global_Interrupt_Enable();
    1058:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>

    /*** INT0 Falling Edge ***/
    MCUCR |= (1 << 1);
    105c:	85 b7       	in	r24, 0x35	; 53
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1 << 0);
    1062:	85 b7       	in	r24, 0x35	; 53
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	85 bf       	out	0x35, r24	; 53
    SET_BIT(MCUCR, 3);   // ISC01 = 1
    1068:	85 b7       	in	r24, 0x35	; 53
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	85 bf       	out	0x35, r24	; 53
    CLR_BIT(MCUCR, 2);   // ISC00 = 0
    106e:	85 b7       	in	r24, 0x35	; 53
    1070:	8b 7f       	andi	r24, 0xFB	; 251
    1072:	85 bf       	out	0x35, r24	; 53
    GICR |=1<<6;
    1074:	8b b7       	in	r24, 0x3b	; 59
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	8b bf       	out	0x3b, r24	; 59
    GICR |=1<<7;
    107a:	8b b7       	in	r24, 0x3b	; 59
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	8b bf       	out	0x3b, r24	; 59
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	63 e0       	ldi	r22, 0x03	; 3
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	63 e0       	ldi	r22, 0x03	; 3
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
}
    1094:	08 95       	ret

00001096 <Global_Interrupt_Disable>:
#include "../Library/BIT_MATH.h"
#include "../Library/STD_TYPES.h"
#include "GIE_Register.h"
#include "GIE_Interface.h"
void Global_Interrupt_Disable(void){
	CLR_BIT(SREG,7);
    1096:	8f b7       	in	r24, 0x3f	; 63
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	8f bf       	out	0x3f, r24	; 63
}
    109c:	08 95       	ret

0000109e <Global_Interrupt_Enable>:
void Global_Interrupt_Enable(void){
	SET_BIT(SREG,7);
    109e:	8f b7       	in	r24, 0x3f	; 63
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	8f bf       	out	0x3f, r24	; 63
}
    10a4:	08 95       	ret

000010a6 <Timer0_voidSet_CompareMatch_Value>:
	OCR0=255;
	// Timer 0 counter
	SET_BIT(TIMSK,1);
}
void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
	OCR0 = u8_local_OCR_Value;
    10a6:	8c bf       	out	0x3c, r24	; 60
}
    10a8:	08 95       	ret

000010aa <Timer0_voidSetDuty>:
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
}

void Timer0_voidSetDuty(u8 duty)
{
    OCR0 = duty;   // 0 → 0% speed, 255 → 100% speed
    10aa:	8c bf       	out	0x3c, r24	; 60
}
    10ac:	08 95       	ret

000010ae <Timer0_voidInit_FastPWM>:
}

void Timer0_voidInit_FastPWM(void)
{
    // Fast PWM Mode
    SET_BIT(TCCR0, 6);
    10ae:	83 b7       	in	r24, 0x33	; 51
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 3);
    10b4:	83 b7       	in	r24, 0x33	; 51
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	83 bf       	out	0x33, r24	; 51

    // Non-Inverting Mode (Clear on compare match, set on TOP)
    CLR_BIT(TCCR0, 4);
    10ba:	83 b7       	in	r24, 0x33	; 51
    10bc:	8f 7e       	andi	r24, 0xEF	; 239
    10be:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 5);
    10c0:	83 b7       	in	r24, 0x33	; 51
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	83 bf       	out	0x33, r24	; 51

    // Prescaler = 8
    CLR_BIT(TCCR0, 0);
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 1);
    10cc:	83 b7       	in	r24, 0x33	; 51
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	83 bf       	out	0x33, r24	; 51
    CLR_BIT(TCCR0, 2);
    10d2:	83 b7       	in	r24, 0x33	; 51
    10d4:	8b 7f       	andi	r24, 0xFB	; 251
    10d6:	83 bf       	out	0x33, r24	; 51

    // Set OC0 (PB3) as output
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	63 e0       	ldi	r22, 0x03	; 3
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    10e2:	08 95       	ret

000010e4 <Timer0_Init_Phase_PWM>:
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
}
void Timer0_Init_Phase_PWM(void){
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
    10e4:	83 b7       	in	r24, 0x33	; 51
    10e6:	80 64       	ori	r24, 0x40	; 64
    10e8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
    10ea:	83 b7       	in	r24, 0x33	; 51
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    10f0:	83 b7       	in	r24, 0x33	; 51
    10f2:	8e 7f       	andi	r24, 0xFE	; 254
    10f4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
    10f6:	83 b7       	in	r24, 0x33	; 51
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    10fc:	83 b7       	in	r24, 0x33	; 51
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	83 bf       	out	0x33, r24	; 51
	// set and clear at top
	CLR_BIT(TCCR0,4);
    1102:	83 b7       	in	r24, 0x33	; 51
    1104:	8f 7e       	andi	r24, 0xEF	; 239
    1106:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,5);
    1108:	83 b7       	in	r24, 0x33	; 51
    110a:	80 62       	ori	r24, 0x20	; 32
    110c:	83 bf       	out	0x33, r24	; 51
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	63 e0       	ldi	r22, 0x03	; 3
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    1118:	08 95       	ret

0000111a <Timer0_Init_PWM>:
void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
	OCR0 = u8_local_OCR_Value;
}
void Timer0_Init_PWM(void){
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
    111a:	83 b7       	in	r24, 0x33	; 51
    111c:	80 64       	ori	r24, 0x40	; 64
    111e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
    1120:	83 b7       	in	r24, 0x33	; 51
    1122:	88 60       	ori	r24, 0x08	; 8
    1124:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    1126:	83 b7       	in	r24, 0x33	; 51
    1128:	8e 7f       	andi	r24, 0xFE	; 254
    112a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
    112c:	83 b7       	in	r24, 0x33	; 51
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    1132:	83 b7       	in	r24, 0x33	; 51
    1134:	8b 7f       	andi	r24, 0xFB	; 251
    1136:	83 bf       	out	0x33, r24	; 51
	// set and clear at top
	SET_BIT(TCCR0,4);
    1138:	83 b7       	in	r24, 0x33	; 51
    113a:	80 61       	ori	r24, 0x10	; 16
    113c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,5);
    113e:	83 b7       	in	r24, 0x33	; 51
    1140:	80 62       	ori	r24, 0x20	; 32
    1142:	83 bf       	out	0x33, r24	; 51
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	63 e0       	ldi	r22, 0x03	; 3
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    114e:	08 95       	ret

00001150 <Timer0_void_CTC>:
	CLR_BIT(TCCR0,2);
	// Timer 0 counter
	SET_BIT(TIMSK,0);
}
void Timer0_void_CTC(){
	Global_Interrupt_Enable();
    1150:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>
	//Waveform Generation Mode ctc
	CLR_BIT(TCCR0,6);
    1154:	83 b7       	in	r24, 0x33	; 51
    1156:	8f 7b       	andi	r24, 0xBF	; 191
    1158:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
    115a:	83 b7       	in	r24, 0x33	; 51
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    1160:	83 b7       	in	r24, 0x33	; 51
    1162:	8e 7f       	andi	r24, 0xFE	; 254
    1164:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
    1166:	83 b7       	in	r24, 0x33	; 51
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    116c:	83 b7       	in	r24, 0x33	; 51
    116e:	8b 7f       	andi	r24, 0xFB	; 251
    1170:	83 bf       	out	0x33, r24	; 51
	OCR0=255;
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	8c bf       	out	0x3c, r24	; 60
	// Timer 0 counter
	SET_BIT(TIMSK,1);
    1176:	89 b7       	in	r24, 0x39	; 57
    1178:	82 60       	ori	r24, 0x02	; 2
    117a:	89 bf       	out	0x39, r24	; 57
}
    117c:	08 95       	ret

0000117e <Timer0_void_init>:
#include "DIO_Interface.h"
#include "GIE_Interface.h"
#include "Timer0_Interface.h"
#include "Timer0_Register.h"
void Timer0_void_init(void){
	Global_Interrupt_Enable();
    117e:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>
	//Waveform Generation Mode Mode normal
	CLR_BIT(TCCR0,6);
    1182:	83 b7       	in	r24, 0x33	; 51
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,3);
    1188:	83 b7       	in	r24, 0x33	; 51
    118a:	87 7f       	andi	r24, 0xF7	; 247
    118c:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    118e:	83 b7       	in	r24, 0x33	; 51
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
    1194:	83 b7       	in	r24, 0x33	; 51
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    119a:	83 b7       	in	r24, 0x33	; 51
    119c:	8b 7f       	andi	r24, 0xFB	; 251
    119e:	83 bf       	out	0x33, r24	; 51
	// Timer 0 counter
	SET_BIT(TIMSK,0);
    11a0:	89 b7       	in	r24, 0x39	; 57
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	89 bf       	out	0x39, r24	; 57
}
    11a6:	08 95       	ret

000011a8 <Timer1_voidSetCompareMatchA>:
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_OUTPUT); // OC1B
}

void Timer1_voidSetCompareMatchA(u16 value)
{
    OCR1A = value;
    11a8:	9b bd       	out	0x2b, r25	; 43
    11aa:	8a bd       	out	0x2a, r24	; 42
}
    11ac:	08 95       	ret

000011ae <Timer1_voidSetCompareMatchB>:

void Timer1_voidSetCompareMatchB(u16 value)
{
    OCR1B = value;
    11ae:	99 bd       	out	0x29, r25	; 41
    11b0:	88 bd       	out	0x28, r24	; 40
}
    11b2:	08 95       	ret

000011b4 <Timer1_voidSetICR>:

void Timer1_voidSetICR(u16 value)
{
    ICR1 = value;
    11b4:	97 bd       	out	0x27, r25	; 39
    11b6:	86 bd       	out	0x26, r24	; 38
}
    11b8:	08 95       	ret

000011ba <Timer1_voidSetTCNT>:

void Timer1_voidSetTCNT(u16 value)
{
    TCNT1 = value;
    11ba:	9d bd       	out	0x2d, r25	; 45
    11bc:	8c bd       	out	0x2c, r24	; 44
}
    11be:	08 95       	ret

000011c0 <Timer1_voidSetDuty>:
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
}

void Timer1_voidSetDuty(u8 channel, u16 duty)
{
    if(channel == 0) // Channel A
    11c0:	88 23       	and	r24, r24
    11c2:	19 f0       	breq	.+6      	; 0x11ca <Timer1_voidSetDuty+0xa>
    {
        OCR1A = duty;
    }
    else if(channel == 1) // Channel B
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <Timer1_voidSetDuty+0x10>
    11c8:	08 95       	ret

void Timer1_voidSetDuty(u8 channel, u16 duty)
{
    if(channel == 0) // Channel A
    {
        OCR1A = duty;
    11ca:	7b bd       	out	0x2b, r23	; 43
    11cc:	6a bd       	out	0x2a, r22	; 42
    11ce:	08 95       	ret
    }
    else if(channel == 1) // Channel B
    {
        OCR1B = duty;
    11d0:	79 bd       	out	0x29, r23	; 41
    11d2:	68 bd       	out	0x28, r22	; 40
    11d4:	08 95       	ret

000011d6 <Timer1_voidInitPWM>:
    TCNT1 = value;
}
void Timer1_voidInitPWM(u16 top, u8 prescaler)
{
    // Fast PWM mode, TOP = ICR1
    SET_BIT(TCCR1A, 1);
    11d6:	2f b5       	in	r18, 0x2f	; 47
    11d8:	22 60       	ori	r18, 0x02	; 2
    11da:	2f bd       	out	0x2f, r18	; 47
    CLR_BIT(TCCR1A, 0);
    11dc:	2f b5       	in	r18, 0x2f	; 47
    11de:	2e 7f       	andi	r18, 0xFE	; 254
    11e0:	2f bd       	out	0x2f, r18	; 47
    SET_BIT(TCCR1B, 3);
    11e2:	2e b5       	in	r18, 0x2e	; 46
    11e4:	28 60       	ori	r18, 0x08	; 8
    11e6:	2e bd       	out	0x2e, r18	; 46
    SET_BIT(TCCR1B, 4);
    11e8:	2e b5       	in	r18, 0x2e	; 46
    11ea:	20 61       	ori	r18, 0x10	; 16
    11ec:	2e bd       	out	0x2e, r18	; 46

    // Non-inverting on Channel A (OC1A → PD5)
    CLR_BIT(TCCR1A, 6);
    11ee:	2f b5       	in	r18, 0x2f	; 47
    11f0:	2f 7b       	andi	r18, 0xBF	; 191
    11f2:	2f bd       	out	0x2f, r18	; 47
    SET_BIT(TCCR1A, 7);
    11f4:	2f b5       	in	r18, 0x2f	; 47
    11f6:	20 68       	ori	r18, 0x80	; 128
    11f8:	2f bd       	out	0x2f, r18	; 47

    // Set TOP value
    ICR1 = top;
    11fa:	97 bd       	out	0x27, r25	; 39
    11fc:	86 bd       	out	0x26, r24	; 38

    // Prescaler
    switch(prescaler)
    11fe:	68 30       	cpi	r22, 0x08	; 8
    1200:	41 f1       	breq	.+80     	; 0x1252 <Timer1_voidInitPWM+0x7c>
    1202:	60 34       	cpi	r22, 0x40	; 64
    1204:	b9 f0       	breq	.+46     	; 0x1234 <Timer1_voidInitPWM+0x5e>
    1206:	61 30       	cpi	r22, 0x01	; 1
    1208:	31 f0       	breq	.+12     	; 0x1216 <Timer1_voidInitPWM+0x40>
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	65 e0       	ldi	r22, 0x05	; 5
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    1214:	08 95       	ret
    ICR1 = top;

    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    1216:	8e b5       	in	r24, 0x2e	; 46
    1218:	81 60       	ori	r24, 0x01	; 1
    121a:	8e bd       	out	0x2e, r24	; 46
    121c:	8e b5       	in	r24, 0x2e	; 46
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	8e bd       	out	0x2e, r24	; 46
    1222:	8e b5       	in	r24, 0x2e	; 46
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8e bd       	out	0x2e, r24	; 46
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	65 e0       	ldi	r22, 0x05	; 5
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    1232:	08 95       	ret
    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 8:   CLR_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 64:  SET_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    1234:	8e b5       	in	r24, 0x2e	; 46
    1236:	81 60       	ori	r24, 0x01	; 1
    1238:	8e bd       	out	0x2e, r24	; 46
    123a:	8e b5       	in	r24, 0x2e	; 46
    123c:	82 60       	ori	r24, 0x02	; 2
    123e:	8e bd       	out	0x2e, r24	; 46
    1240:	8e b5       	in	r24, 0x2e	; 46
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	8e bd       	out	0x2e, r24	; 46
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	65 e0       	ldi	r22, 0x05	; 5
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    1250:	08 95       	ret

    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 8:   CLR_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    1252:	8e b5       	in	r24, 0x2e	; 46
    1254:	8e 7f       	andi	r24, 0xFE	; 254
    1256:	f0 cf       	rjmp	.-32     	; 0x1238 <Timer1_voidInitPWM+0x62>

00001258 <Timer1_voidInit_FastPWM_B>:
}

void Timer1_voidInit_FastPWM_B(void)
{
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    1258:	8f b5       	in	r24, 0x2f	; 47
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,0);
    125e:	8f b5       	in	r24, 0x2f	; 47
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1B,3);
    1264:	8e b5       	in	r24, 0x2e	; 46
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TCCR1B,4);
    126a:	8e b5       	in	r24, 0x2e	; 46
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	8e bd       	out	0x2e, r24	; 46

    /* Clear OC1B on compare match, set at TOP */
    SET_BIT(TCCR1A,5);
    1270:	8f b5       	in	r24, 0x2f	; 47
    1272:	80 62       	ori	r24, 0x20	; 32
    1274:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,4);
    1276:	8f b5       	in	r24, 0x2f	; 47
    1278:	8f 7e       	andi	r24, 0xEF	; 239
    127a:	8f bd       	out	0x2f, r24	; 47

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    127c:	8e b5       	in	r24, 0x2e	; 46
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	8e bd       	out	0x2e, r24	; 46

    /* OC1B pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_OUTPUT); // OC1B
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	64 e0       	ldi	r22, 0x04	; 4
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    128c:	08 95       	ret

0000128e <Timer1_voidInit_FastPWM_A>:
}

void Timer1_voidInit_FastPWM_A(void)
{
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    128e:	8f b5       	in	r24, 0x2f	; 47
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,0);
    1294:	8f b5       	in	r24, 0x2f	; 47
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1B,3);
    129a:	8e b5       	in	r24, 0x2e	; 46
    129c:	88 60       	ori	r24, 0x08	; 8
    129e:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TCCR1B,4);
    12a0:	8e b5       	in	r24, 0x2e	; 46
    12a2:	80 61       	ori	r24, 0x10	; 16
    12a4:	8e bd       	out	0x2e, r24	; 46

    /* Clear OC1A on compare match, set at TOP */
    SET_BIT(TCCR1A,7);
    12a6:	8f b5       	in	r24, 0x2f	; 47
    12a8:	80 68       	ori	r24, 0x80	; 128
    12aa:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,6);
    12ac:	8f b5       	in	r24, 0x2f	; 47
    12ae:	8f 7b       	andi	r24, 0xBF	; 191
    12b0:	8f bd       	out	0x2f, r24	; 47

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    12b2:	8e b5       	in	r24, 0x2e	; 46
    12b4:	82 60       	ori	r24, 0x02	; 2
    12b6:	8e bd       	out	0x2e, r24	; 46

    /* OC1A pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_OUTPUT); // OC1A
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	65 e0       	ldi	r22, 0x05	; 5
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    12c2:	08 95       	ret

000012c4 <Timer1_voidInit_CTC_B>:
    /* Enable OCR1A interrupt */
    SET_BIT(TIMSK,4);
}

void Timer1_voidInit_CTC_B(u16 compareValue)
{
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	8c 01       	movw	r16, r24
    Global_Interrupt_Enable();
    12ca:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>

    /* CTC mode with OCR1B */
    CLR_BIT(TCCR1A,0);
    12ce:	8f b5       	in	r24, 0x2f	; 47
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1A,1);
    12d4:	8f b5       	in	r24, 0x2f	; 47
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    12da:	8e b5       	in	r24, 0x2e	; 46
    12dc:	87 7f       	andi	r24, 0xF7	; 247
    12de:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    12e0:	8e b5       	in	r24, 0x2e	; 46
    12e2:	8f 7e       	andi	r24, 0xEF	; 239
    12e4:	8e bd       	out	0x2e, r24	; 46

    OCR1B = compareValue;
    12e6:	19 bd       	out	0x29, r17	; 41
    12e8:	08 bd       	out	0x28, r16	; 40

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    12ea:	8e b5       	in	r24, 0x2e	; 46
    12ec:	82 60       	ori	r24, 0x02	; 2
    12ee:	8e bd       	out	0x2e, r24	; 46

    /* Enable OCR1B interrupt */
    SET_BIT(TIMSK,3);
    12f0:	89 b7       	in	r24, 0x39	; 57
    12f2:	88 60       	ori	r24, 0x08	; 8
    12f4:	89 bf       	out	0x39, r24	; 57
}
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	08 95       	ret

000012fc <Timer1_voidInit_CTC_A>:
    /* Enable overflow interrupt */
    SET_BIT(TIMSK,2);
}

void Timer1_voidInit_CTC_A(u16 compareValue)
{
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	8c 01       	movw	r16, r24
    Global_Interrupt_Enable();
    1302:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>

    /* CTC mode with OCR1A */
    CLR_BIT(TCCR1A,0);
    1306:	8f b5       	in	r24, 0x2f	; 47
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1A,1);
    130c:	8f b5       	in	r24, 0x2f	; 47
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    1312:	8e b5       	in	r24, 0x2e	; 46
    1314:	87 7f       	andi	r24, 0xF7	; 247
    1316:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    1318:	8e b5       	in	r24, 0x2e	; 46
    131a:	8f 7e       	andi	r24, 0xEF	; 239
    131c:	8e bd       	out	0x2e, r24	; 46

    OCR1A = compareValue;
    131e:	1b bd       	out	0x2b, r17	; 43
    1320:	0a bd       	out	0x2a, r16	; 42

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    1322:	8e b5       	in	r24, 0x2e	; 46
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	8e bd       	out	0x2e, r24	; 46

    /* Enable OCR1A interrupt */
    SET_BIT(TIMSK,4);
    1328:	89 b7       	in	r24, 0x39	; 57
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	89 bf       	out	0x39, r24	; 57
}
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <Timer1_voidInit_Normal>:
#include "DIO_Interface.h"
#include "GIE_Interface.h"

void Timer1_voidInit_Normal(void)
{
    Global_Interrupt_Enable();
    1334:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>

    /* Normal mode */
    CLR_BIT(TCCR1A,0);
    1338:	8f b5       	in	r24, 0x2f	; 47
    133a:	8e 7f       	andi	r24, 0xFE	; 254
    133c:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,1);
    133e:	8f b5       	in	r24, 0x2f	; 47
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    1344:	8e b5       	in	r24, 0x2e	; 46
    1346:	87 7f       	andi	r24, 0xF7	; 247
    1348:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    134a:	8e b5       	in	r24, 0x2e	; 46
    134c:	8f 7e       	andi	r24, 0xEF	; 239
    134e:	8e bd       	out	0x2e, r24	; 46

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    1350:	8e b5       	in	r24, 0x2e	; 46
    1352:	82 60       	ori	r24, 0x02	; 2
    1354:	8e bd       	out	0x2e, r24	; 46

    /* Enable overflow interrupt */
    SET_BIT(TIMSK,2);
    1356:	89 b7       	in	r24, 0x39	; 57
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	89 bf       	out	0x39, r24	; 57
}
    135c:	08 95       	ret

0000135e <GET_Key_Number>:
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}

u8 GET_Key_Number(void){
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cc e7       	ldi	r28, 0x7C	; 124
    1368:	d1 e0       	ldi	r29, 0x01	; 1
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	10 e0       	ldi	r17, 0x00	; 0
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	68 81       	ld	r22, Y
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	60 91 78 01 	lds	r22, 0x0178
    137e:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    1382:	88 23       	and	r24, r24
    1384:	31 f1       	breq	.+76     	; 0x13d2 <GET_Key_Number+0x74>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	60 91 79 01 	lds	r22, 0x0179
    138c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    1390:	88 23       	and	r24, r24
    1392:	99 f1       	breq	.+102    	; 0x13fa <GET_Key_Number+0x9c>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	60 91 7a 01 	lds	r22, 0x017A
    139a:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    139e:	88 23       	and	r24, r24
    13a0:	81 f1       	breq	.+96     	; 0x1402 <GET_Key_Number+0xa4>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	60 91 7b 01 	lds	r22, 0x017B
    13a8:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    13ac:	88 23       	and	r24, r24
    13ae:	69 f1       	breq	.+90     	; 0x140a <GET_Key_Number+0xac>
				pressed_key = KPD_au8SwitchVal[j][i];
				return j;
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	69 91       	ld	r22, Y+
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    13ba:	0f 5f       	subi	r16, 0xFF	; 255
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
    13be:	04 30       	cpi	r16, 0x04	; 4
    13c0:	11 05       	cpc	r17, r1
    13c2:	a9 f6       	brne	.-86     	; 0x136e <GET_Key_Number+0x10>
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
	return NOT_Pressed;
}
    13c6:	89 2f       	mov	r24, r25
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret
u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
			if(DIO_u8_LOW == state){
    13d2:	e0 e0       	ldi	r30, 0x00	; 0
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
				pressed_key = KPD_au8SwitchVal[j][i];
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	e0 0f       	add	r30, r16
    13e2:	f1 1f       	adc	r31, r17
    13e4:	e8 59       	subi	r30, 0x98	; 152
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	80 81       	ld	r24, Z
    13ea:	80 93 80 01 	sts	0x0180, r24
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
	return NOT_Pressed;
}
    13ee:	89 2f       	mov	r24, r25
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret
u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
			if(DIO_u8_LOW == state){
    13fa:	e1 e0       	ldi	r30, 0x01	; 1
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	eb cf       	rjmp	.-42     	; 0x13d8 <GET_Key_Number+0x7a>
    1402:	e2 e0       	ldi	r30, 0x02	; 2
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	e7 cf       	rjmp	.-50     	; 0x13d8 <GET_Key_Number+0x7a>
    140a:	e3 e0       	ldi	r30, 0x03	; 3
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	e3 cf       	rjmp	.-58     	; 0x13d8 <GET_Key_Number+0x7a>

00001412 <KPD_setup>:
u8 KPD_au8SwitchVal[4][4] = KPD_Array;
u8 ROWS[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
	pressed_key = NOT_Pressed;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	80 93 80 01 	sts	0x0180, r24
    1420:	c8 e7       	ldi	r28, 0x78	; 120
    1422:	d1 e0       	ldi	r29, 0x01	; 1
    1424:	0c e7       	ldi	r16, 0x7C	; 124
    1426:	11 e0       	ldi	r17, 0x01	; 1
	for(u8 i = 0; i < 4 ; i++){
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	68 81       	ld	r22, Y
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	69 91       	ld	r22, Y+
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	f8 01       	movw	r30, r16
    1440:	60 81       	ld	r22, Z
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	f8 01       	movw	r30, r16
    144c:	61 91       	ld	r22, Z+
    144e:	8f 01       	movw	r16, r30
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
	pressed_key = NOT_Pressed;
	for(u8 i = 0; i < 4 ; i++){
    1456:	f1 e0       	ldi	r31, 0x01	; 1
    1458:	cc 37       	cpi	r28, 0x7C	; 124
    145a:	df 07       	cpc	r29, r31
    145c:	29 f7       	brne	.-54     	; 0x1428 <KPD_setup+0x16>
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <GET_Pressed_Time>:
			return NOT_Pressed;
		}
	}

}
u32 GET_Pressed_Time(void){
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
	KPD_setup();
    1478:	0e 94 09 0a 	call	0x1412	; 0x1412 <KPD_setup>
	u8 col = GET_Key_Number();
    147c:	0e 94 af 09 	call	0x135e	; 0x135e <GET_Key_Number>
    1480:	c8 2e       	mov	r12, r24
    1482:	dd 24       	eor	r13, r13
    1484:	ee 24       	eor	r14, r14
    1486:	ff 24       	eor	r15, r15
    1488:	87 01       	movw	r16, r14
    148a:	88 e7       	ldi	r24, 0x78	; 120
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	c8 0e       	add	r12, r24
    1490:	d9 1e       	adc	r13, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1492:	c8 ec       	ldi	r28, 0xC8	; 200
    1494:	d0 e0       	ldi	r29, 0x00	; 0
	u32 press_time = 0;
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	d6 01       	movw	r26, r12
    149a:	6c 91       	ld	r22, X
    149c:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
    14a0:	88 23       	and	r24, r24
    14a2:	b9 f4       	brne	.+46     	; 0x14d2 <GET_Pressed_Time+0x6a>
    14a4:	20 e1       	ldi	r18, 0x10	; 16
    14a6:	37 e2       	ldi	r19, 0x27	; 39
    14a8:	ce 01       	movw	r24, r28
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <GET_Pressed_Time+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <GET_Pressed_Time+0x40>
		_delay_ms(1000);
		press_time+=1000;
    14b4:	88 ee       	ldi	r24, 0xE8	; 232
    14b6:	93 e0       	ldi	r25, 0x03	; 3
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 0e       	add	r14, r24
    14be:	f9 1e       	adc	r15, r25
    14c0:	0a 1f       	adc	r16, r26
    14c2:	1b 1f       	adc	r17, r27
}
u32 GET_Pressed_Time(void){
	KPD_setup();
	u8 col = GET_Key_Number();
	u32 press_time = 0;
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	d6 01       	movw	r26, r12
    14c8:	6c 91       	ld	r22, X
    14ca:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
    14ce:	88 23       	and	r24, r24
    14d0:	49 f3       	breq	.-46     	; 0x14a4 <GET_Pressed_Time+0x3c>
		_delay_ms(1000);
		press_time+=1000;
	}
    return press_time;
}
    14d2:	b7 01       	movw	r22, r14
    14d4:	c8 01       	movw	r24, r16
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	08 95       	ret

000014e8 <GET_Pressed_Key>:
	}
	return NOT_Pressed;
}
//---------------------------------------------------------------
u8 GET_Pressed_Key(void){
	KPD_setup();
    14e8:	0e 94 09 0a 	call	0x1412	; 0x1412 <KPD_setup>
    GET_Key_Number();
    14ec:	0e 94 af 09 	call	0x135e	; 0x135e <GET_Key_Number>
	if(last_pressed_key == pressed_key){
    14f0:	90 91 81 01 	lds	r25, 0x0181
    14f4:	80 91 80 01 	lds	r24, 0x0180
    14f8:	98 17       	cp	r25, r24
    14fa:	31 f0       	breq	.+12     	; 0x1508 <GET_Pressed_Key+0x20>
		return NOT_Pressed;
	}else{
		if(last_pressed_key == NOT_Pressed){
    14fc:	9f 3f       	cpi	r25, 0xFF	; 255
    14fe:	31 f0       	breq	.+12     	; 0x150c <GET_Pressed_Key+0x24>
			last_pressed_key = pressed_key;
			return pressed_key;
		}else {
			last_pressed_key = pressed_key;
    1500:	80 93 81 01 	sts	0x0181, r24
    1504:	8f ef       	ldi	r24, 0xFF	; 255
			return NOT_Pressed;
		}
	}

}
    1506:	08 95       	ret
}
//---------------------------------------------------------------
u8 GET_Pressed_Key(void){
	KPD_setup();
    GET_Key_Number();
	if(last_pressed_key == pressed_key){
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	08 95       	ret
		return NOT_Pressed;
	}else{
		if(last_pressed_key == NOT_Pressed){
			last_pressed_key = pressed_key;
    150c:	80 93 81 01 	sts	0x0181, r24
    1510:	08 95       	ret

00001512 <L298_voidMove>:

void L298_voidMove(u8 Copy_u8Direction)
{
//	u16 duty_motorA = (Copy_u8SpeedPercent * 255) / 100;      // Timer0
//	u16 duty_motorB = (Copy_u8SpeedPercent * 19999) / 100;    // Timer1
    switch(Copy_u8Direction)
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	09 f4       	brne	.+2      	; 0x1518 <L298_voidMove+0x6>
    1516:	4b c0       	rjmp	.+150    	; 0x15ae <L298_voidMove+0x9c>
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	30 f0       	brcs	.+12     	; 0x1528 <L298_voidMove+0x16>
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	09 f4       	brne	.+2      	; 0x1522 <L298_voidMove+0x10>
    1520:	4a c0       	rjmp	.+148    	; 0x15b6 <L298_voidMove+0xa4>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	79 f1       	breq	.+94     	; 0x1584 <L298_voidMove+0x72>
    1526:	08 95       	ret
    1528:	88 23       	and	r24, r24
    152a:	a9 f4       	brne	.+42     	; 0x1556 <L298_voidMove+0x44>
    {
        case MOVE_FORWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	41 e0       	ldi	r20, 0x01	; 1
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    1532:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	65 e0       	ldi	r22, 0x05	; 5
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	66 e0       	ldi	r22, 0x06	; 6
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	67 e0       	ldi	r22, 0x07	; 7
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1554:	08 95       	ret

void L298_voidMove(u8 Copy_u8Direction)
{
//	u16 duty_motorA = (Copy_u8SpeedPercent * 255) / 100;      // Timer0
//	u16 duty_motorB = (Copy_u8SpeedPercent * 19999) / 100;    // Timer1
    switch(Copy_u8Direction)
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	31 f7       	brne	.-52     	; 0x1526 <L298_voidMove+0x14>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);

            break;

        case MOVE_BACKWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_HIGH);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	65 e0       	ldi	r22, 0x05	; 5
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	66 e0       	ldi	r22, 0x06	; 6
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_HIGH);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	67 e0       	ldi	r22, 0x07	; 7
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1582:	08 95       	ret
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
              break;

        case MOVE_STOP:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	64 e0       	ldi	r22, 0x04	; 4
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	65 e0       	ldi	r22, 0x05	; 5
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	67 e0       	ldi	r22, 0x07	; 7
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    15ac:	08 95       	ret
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	64 e0       	ldi	r22, 0x04	; 4
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	be cf       	rjmp	.-132    	; 0x1532 <L298_voidMove+0x20>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_HIGH);
             break;

        case MOVE_RIGHT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	64 e0       	ldi	r22, 0x04	; 4
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	65 e0       	ldi	r22, 0x05	; 5
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	66 e0       	ldi	r22, 0x06	; 6
    15ce:	40 e0       	ldi	r20, 0x00	; 0
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    15d0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	67 e0       	ldi	r22, 0x07	; 7
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    15de:	08 95       	ret

000015e0 <L298_voidInit>:


void L298_voidInit(void)
{
    // Outputs
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN1, DIO_u8_OUTPUT);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	64 e0       	ldi	r22, 0x04	; 4
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN2, DIO_u8_OUTPUT);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	65 e0       	ldi	r22, 0x05	; 5
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN3, DIO_u8_OUTPUT);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	66 e0       	ldi	r22, 0x06	; 6
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN4, DIO_u8_OUTPUT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	67 e0       	ldi	r22, 0x07	; 7
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
//    DIO_voidSetPinDirection(DIO_u8_PORTB, ENA, DIO_u8_OUTPUT);
//    DIO_voidSetPinDirection(DIO_u8_PORTB, ENB, DIO_u8_OUTPUT);
//    Timer0_voidInit_FastPWM();                          // ENA → Motor A
//	Timer1_voidInitPWM(19999, TIMER1_PRESCALER_8);      // ENB → Motor B

}
    1608:	08 95       	ret

0000160a <LCD_Command>:
}

void LCD_Command( unsigned char cmnd )
{

	PORTC &= ~ (1<<RS);		/* RS=0, command reg. */
    160a:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~ (1<<1);     /*RW -> 0 Writing */
    160c:	a9 98       	cbi	0x15, 1	; 21
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    160e:	98 b3       	in	r25, 0x18	; 24
    1610:	28 2f       	mov	r18, r24
    1612:	20 7f       	andi	r18, 0xF0	; 240
    1614:	9f 70       	andi	r25, 0x0F	; 15
    1616:	29 2b       	or	r18, r25
    1618:	28 bb       	out	0x18, r18	; 24

	PORTC |= (1<<EN);		/* Enable pulse */
    161a:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    161c:	22 e0       	ldi	r18, 0x02	; 2
    161e:	92 2f       	mov	r25, r18
    1620:	9a 95       	dec	r25
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_Command+0x16>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    1624:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1626:	e0 e9       	ldi	r30, 0x90	; 144
    1628:	f1 e0       	ldi	r31, 0x01	; 1
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCD_Command+0x20>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    162e:	98 b3       	in	r25, 0x18	; 24
    1630:	82 95       	swap	r24
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	9f 70       	andi	r25, 0x0F	; 15
    1636:	98 2b       	or	r25, r24
    1638:	98 bb       	out	0x18, r25	; 24
	PORTC |= (1<<EN);
    163a:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    163c:	2a 95       	dec	r18
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_Command+0x32>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    1640:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1642:	80 ea       	ldi	r24, 0xA0	; 160
    1644:	9f e0       	ldi	r25, 0x0F	; 15
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_Command+0x3c>
	_delay_ms(2);
}
    164a:	08 95       	ret

0000164c <LCD_Char>:

void LCD_Char( unsigned char data )
{

	PORTC |= (1<<RS);		/* RS=1, data reg. */
    164c:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &=~ (1<<1);
    164e:	a9 98       	cbi	0x15, 1	; 21
	///0X1111
	///make to store only first 4 bits
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1650:	98 b3       	in	r25, 0x18	; 24
    1652:	28 2f       	mov	r18, r24
    1654:	20 7f       	andi	r18, 0xF0	; 240
    1656:	9f 70       	andi	r25, 0x0F	; 15
    1658:	29 2b       	or	r18, r25
    165a:	28 bb       	out	0x18, r18	; 24

	PORTC|= (1<<EN);
    165c:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    165e:	22 e0       	ldi	r18, 0x02	; 2
    1660:	92 2f       	mov	r25, r18
    1662:	9a 95       	dec	r25
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_Char+0x16>

	_delay_us(1
	);
	PORTC &= ~ (1<<EN);
    1666:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1668:	e0 e9       	ldi	r30, 0x90	; 144
    166a:	f1 e0       	ldi	r31, 0x01	; 1
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_Char+0x20>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    1670:	98 b3       	in	r25, 0x18	; 24
    1672:	82 95       	swap	r24
    1674:	80 7f       	andi	r24, 0xF0	; 240
    1676:	9f 70       	andi	r25, 0x0F	; 15
    1678:	98 2b       	or	r25, r24
    167a:	98 bb       	out	0x18, r25	; 24
	PORTC |= (1<<EN);
    167c:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167e:	2a 95       	dec	r18
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_Char+0x32>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    1682:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1684:	80 ea       	ldi	r24, 0xA0	; 160
    1686:	9f e0       	ldi	r25, 0x0F	; 15
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_Char+0x3c>
	_delay_ms(2);
}
    168c:	08 95       	ret

0000168e <LCD_vidWriteNumber_4bits>:
        LCD_vidWriteCharctr(buffer[i]);
    }
}

void LCD_vidWriteNumber_4bits(u16 Copy_u16Number)
{
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	2a 97       	sbiw	r28, 0x0a	; 10
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	9c 01       	movw	r18, r24
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	81 f1       	breq	.+96     	; 0x170e <LCD_vidWriteNumber_4bits+0x80>
    {
        LCD_Char('0');
        return;
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	7e 01       	movw	r14, r28
    16b2:	08 94       	sec
    16b4:	e1 1c       	adc	r14, r1
    16b6:	f1 1c       	adc	r15, r1
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    16b8:	f7 01       	movw	r30, r14
    16ba:	e1 0f       	add	r30, r17
    16bc:	f1 1d       	adc	r31, r1
    16be:	c9 01       	movw	r24, r18
    16c0:	6a e0       	ldi	r22, 0x0A	; 10
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodhi4>
    16c8:	80 5d       	subi	r24, 0xD0	; 208
    16ca:	80 83       	st	Z, r24
        Copy_u16Number /= 10;
    16cc:	c9 01       	movw	r24, r18
    16ce:	6a e0       	ldi	r22, 0x0A	; 10
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodhi4>
    16d6:	9b 01       	movw	r18, r22
        i++;
    16d8:	1f 5f       	subi	r17, 0xFF	; 255
    {
        LCD_Char('0');
        return;
    }

    while (Copy_u16Number > 0)
    16da:	61 15       	cp	r22, r1
    16dc:	71 05       	cpc	r23, r1
    16de:	61 f7       	brne	.-40     	; 0x16b8 <LCD_vidWriteNumber_4bits+0x2a>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    16e0:	11 23       	and	r17, r17
    16e2:	49 f0       	breq	.+18     	; 0x16f6 <LCD_vidWriteNumber_4bits+0x68>
    {
        i--;
    16e4:	11 50       	subi	r17, 0x01	; 1
        LCD_Char(buffer[i]);
    16e6:	f7 01       	movw	r30, r14
    16e8:	e1 0f       	add	r30, r17
    16ea:	f1 1d       	adc	r31, r1
    16ec:	80 81       	ld	r24, Z
    16ee:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_Char>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    16f2:	11 23       	and	r17, r17
    16f4:	b9 f7       	brne	.-18     	; 0x16e4 <LCD_vidWriteNumber_4bits+0x56>
    {
        i--;
        LCD_Char(buffer[i]);
    }
}
    16f6:	2a 96       	adiw	r28, 0x0a	; 10
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	1f 91       	pop	r17
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	08 95       	ret
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    {
        LCD_Char('0');
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_Char>
    1714:	f0 cf       	rjmp	.-32     	; 0x16f6 <LCD_vidWriteNumber_4bits+0x68>

00001716 <LCD_String>:
	_delay_ms(2);

}

void LCD_String (char *str)		/* Send string to LCD function */
{
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	fc 01       	movw	r30, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	39 f0       	breq	.+14     	; 0x1730 <LCD_String+0x1a>
    1722:	ef 01       	movw	r28, r30
	{
		LCD_Char (str[i]);
    1724:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	21 96       	adiw	r28, 0x01	; 1
    172c:	88 23       	and	r24, r24
    172e:	d1 f7       	brne	.-12     	; 0x1724 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
    173c:	88 23       	and	r24, r24
    173e:	41 f4       	brne	.+16     	; 0x1750 <LCD_String_xy+0x1a>
    1740:	60 31       	cpi	r22, 0x10	; 16
    1742:	a8 f0       	brcs	.+42     	; 0x176e <LCD_String_xy+0x38>
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
    1744:	ce 01       	movw	r24, r28
    1746:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_String>
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	c1 f7       	brne	.-16     	; 0x1744 <LCD_String_xy+0xe>
    1754:	60 31       	cpi	r22, 0x10	; 16
    1756:	b0 f7       	brcc	.-20     	; 0x1744 <LCD_String_xy+0xe>
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1758:	6f 70       	andi	r22, 0x0F	; 15
    175a:	86 2f       	mov	r24, r22
    175c:	80 6c       	ori	r24, 0xC0	; 192
    175e:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    1762:	ce 01       	movw	r24, r28
    1764:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_String>
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    176e:	6f 70       	andi	r22, 0x0F	; 15
    1770:	86 2f       	mov	r24, r22
    1772:	80 68       	ori	r24, 0x80	; 128
    1774:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	else if (row == 1 && pos<16)
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
    1778:	ce 01       	movw	r24, r28
    177a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_String>
}
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
    178a:	80 ea       	ldi	r24, 0xA0	; 160
    178c:	9f e0       	ldi	r25, 0x0F	; 15
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_Clear+0xa>
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
}
    1798:	08 95       	ret

0000179a <LCD_Init>:
}

void LCD_Init (void)			/* LCD Initialize function */
{

	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT); // RS
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT); // RW
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT); // E
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_u8_PORTB, 4, DIO_u8_OUTPUT); // D4
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	64 e0       	ldi	r22, 0x04	; 4
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 5, DIO_u8_OUTPUT); // D5
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	65 e0       	ldi	r22, 0x05	; 5
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 6, DIO_u8_OUTPUT); // D6
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	66 e0       	ldi	r22, 0x06	; 6
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 7, DIO_u8_OUTPUT); // D7
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	67 e0       	ldi	r22, 0x07	; 7
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    17e0:	24 ef       	ldi	r18, 0xF4	; 244
    17e2:	31 e0       	ldi	r19, 0x01	; 1
    17e4:	48 ec       	ldi	r20, 0xC8	; 200
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	ca 01       	movw	r24, r20
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_Init+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	21 50       	subi	r18, 0x01	; 1
    17f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	d1 f7       	brne	.-12     	; 0x17e8 <LCD_Init+0x4e>

	_delay_ms(50);

	LCD_Command(0x33);
    17f4:	83 e3       	ldi	r24, 0x33	; 51
    17f6:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x32);
    17fa:	82 e3       	ldi	r24, 0x32	; 50
    17fc:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x28);
    1800:	88 e2       	ldi	r24, 0x28	; 40
    1802:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x0C);
    1806:	8c e0       	ldi	r24, 0x0C	; 12
    1808:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x06);
    180c:	86 e0       	ldi	r24, 0x06	; 6
    180e:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x01);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
    1818:	80 ea       	ldi	r24, 0xA0	; 160
    181a:	9f e0       	ldi	r25, 0x0F	; 15
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_Init+0x82>
	_delay_ms(2);

}
    1820:	08 95       	ret

00001822 <LCD_vidInit_4bits>:



void LCD_vidInit_4bits(void)
{
	DIO_voidSetPortDirection(DIO_u8_PORTD,0XFF);
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	6f ef       	ldi	r22, 0xFF	; 255
    1826:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,0,DIO_u8_OUTPUT);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,1,DIO_u8_OUTPUT);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,2,DIO_u8_OUTPUT);
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    1848:	20 e9       	ldi	r18, 0x90	; 144
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	48 ec       	ldi	r20, 0xC8	; 200
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	ca 01       	movw	r24, r20
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_vidInit_4bits+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	21 50       	subi	r18, 0x01	; 1
    1858:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	d1 f7       	brne	.-12     	; 0x1850 <LCD_vidInit_4bits+0x2e>
	_delay_ms(40);
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    1862:	88 e2       	ldi	r24, 0x28	; 40
    1864:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    1868:	8c e0       	ldi	r24, 0x0C	; 12
    186a:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    186e:	86 e0       	ldi	r24, 0x06	; 6
    1870:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_Command>
    187a:	80 ea       	ldi	r24, 0xA0	; 160
    187c:	9f e0       	ldi	r25, 0x0F	; 15
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_vidInit_4bits+0x5c>
	_delay_ms(2);


}
    1882:	08 95       	ret

00001884 <LCD_vidSendCommand_4_Bits>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);

}
void LCD_vidSendCommand_4_Bits(uint8_t u8CmdCpy) {
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	f8 2e       	mov	r15, r24


	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8_LOW);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8_LOW);
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>

	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy & 0xF0); /* sending upper nibble */
    18a2:	88 b3       	in	r24, 0x18	; 24
    18a4:	9f 2d       	mov	r25, r15
    18a6:	90 7f       	andi	r25, 0xF0	; 240
    18a8:	8f 70       	andi	r24, 0x0F	; 15
    18aa:	98 2b       	or	r25, r24
    18ac:	98 bb       	out	0x18, r25	; 24

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18b8:	22 e0       	ldi	r18, 0x02	; 2
    18ba:	e2 2e       	mov	r14, r18
    18bc:	8e 2d       	mov	r24, r14
    18be:	8a 95       	dec	r24
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_vidSendCommand_4_Bits+0x3a>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	62 e0       	ldi	r22, 0x02	; 2
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18cc:	08 ec       	ldi	r16, 0xC8	; 200
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	c8 01       	movw	r24, r16
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_vidSendCommand_4_Bits+0x4e>
	_delay_us(100);



	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy << 4);
    18d6:	88 b3       	in	r24, 0x18	; 24
    18d8:	f2 94       	swap	r15
    18da:	90 ef       	ldi	r25, 0xF0	; 240
    18dc:	f9 22       	and	r15, r25
    18de:	8f 70       	andi	r24, 0x0F	; 15
    18e0:	8f 29       	or	r24, r15
    18e2:	88 bb       	out	0x18, r24	; 24
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ee:	ea 94       	dec	r14
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_vidSendCommand_4_Bits+0x6a>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	62 e0       	ldi	r22, 0x02	; 2
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18fc:	c8 01       	movw	r24, r16
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_vidSendCommand_4_Bits+0x7a>
	_delay_us(100);

}
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	08 95       	ret

0000190c <LCD_vidWriteCharctr_4bits>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
	_delay_us(50);
}


void LCD_vidWriteCharctr_4bits(uint8_t u8DataCpy) {
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	08 2f       	mov	r16, r24


	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy >> 4) & 0x0F) << 4);
    1928:	60 2f       	mov	r22, r16
    192a:	60 7f       	andi	r22, 0xF0	; 240
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_voidSetPortValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	f4 2e       	mov	r15, r20
    1936:	8f 2d       	mov	r24, r15
    1938:	8a 95       	dec	r24
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_vidWriteCharctr_4bits+0x2c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1946:	8f 2d       	mov	r24, r15
    1948:	8a 95       	dec	r24
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_vidWriteCharctr_4bits+0x3c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_vidWriteCharctr_4bits+0x4e>
	_delay_us(100);

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy & 0x0F) << 4));
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	02 95       	swap	r16
    1962:	12 95       	swap	r17
    1964:	10 7f       	andi	r17, 0xF0	; 240
    1966:	10 27       	eor	r17, r16
    1968:	00 7f       	andi	r16, 0xF0	; 240
    196a:	10 27       	eor	r17, r16
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	60 2f       	mov	r22, r16
    1970:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_voidSetPortValue>
	//	_delay_us(1);

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197e:	fa 94       	dec	r15
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_vidWriteCharctr_4bits+0x72>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    198c:	80 ea       	ldi	r24, 0xA0	; 160
    198e:	9f e0       	ldi	r25, 0x0F	; 15
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_vidWriteCharctr_4bits+0x84>
	_delay_ms(2);
}
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	08 95       	ret

0000199c <LCD_vidWriteCharctr>:
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
	_delay_us(100);

}
void LCD_vidWriteCharctr(u8 u8DataCpy){
    199c:	1f 93       	push	r17
    199e:	18 2f       	mov	r17, r24
	///8 Bits (D0->D7)////

	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortValue(LCD_DATA_PORT,u8DataCpy);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	61 2f       	mov	r22, r17
    19b8:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_voidSetPortValue>
	//EnaLCD_vidWriteCharctrble
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	8a 95       	dec	r24
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_vidWriteCharctr+0x2c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    19d6:	85 e8       	ldi	r24, 0x85	; 133
    19d8:	8a 95       	dec	r24
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_vidWriteCharctr+0x3c>
	_delay_us(50);
}
    19dc:	1f 91       	pop	r17
    19de:	08 95       	ret

000019e0 <LCD_vidWriteNumber_8bits>:
	_delay_ms(2);


}
void LCD_vidWriteNumber_8bits(u16 Copy_u16Number)
{
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	1f 93       	push	r17
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2a 97       	sbiw	r28, 0x0a	; 10
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	9c 01       	movw	r18, r24
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	81 f1       	breq	.+96     	; 0x1a60 <LCD_vidWriteNumber_8bits+0x80>
    {
    	LCD_vidWriteCharctr('0');
        return;
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	7e 01       	movw	r14, r28
    1a04:	08 94       	sec
    1a06:	e1 1c       	adc	r14, r1
    1a08:	f1 1c       	adc	r15, r1
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	e1 0f       	add	r30, r17
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	c9 01       	movw	r24, r18
    1a12:	6a e0       	ldi	r22, 0x0A	; 10
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodhi4>
    1a1a:	80 5d       	subi	r24, 0xD0	; 208
    1a1c:	80 83       	st	Z, r24
        Copy_u16Number /= 10;
    1a1e:	c9 01       	movw	r24, r18
    1a20:	6a e0       	ldi	r22, 0x0A	; 10
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodhi4>
    1a28:	9b 01       	movw	r18, r22
        i++;
    1a2a:	1f 5f       	subi	r17, 0xFF	; 255
    {
    	LCD_vidWriteCharctr('0');
        return;
    }

    while (Copy_u16Number > 0)
    1a2c:	61 15       	cp	r22, r1
    1a2e:	71 05       	cpc	r23, r1
    1a30:	61 f7       	brne	.-40     	; 0x1a0a <LCD_vidWriteNumber_8bits+0x2a>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    1a32:	11 23       	and	r17, r17
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <LCD_vidWriteNumber_8bits+0x68>
    {
        i--;
    1a36:	11 50       	subi	r17, 0x01	; 1
        LCD_vidWriteCharctr(buffer[i]);
    1a38:	f7 01       	movw	r30, r14
    1a3a:	e1 0f       	add	r30, r17
    1a3c:	f1 1d       	adc	r31, r1
    1a3e:	80 81       	ld	r24, Z
    1a40:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_vidWriteCharctr>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    1a44:	11 23       	and	r17, r17
    1a46:	b9 f7       	brne	.-18     	; 0x1a36 <LCD_vidWriteNumber_8bits+0x56>
    {
        i--;
        LCD_vidWriteCharctr(buffer[i]);
    }
}
    1a48:	2a 96       	adiw	r28, 0x0a	; 10
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	1f 91       	pop	r17
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	08 95       	ret
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    {
    	LCD_vidWriteCharctr('0');
    1a60:	80 e3       	ldi	r24, 0x30	; 48
    1a62:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_vidWriteCharctr>
    1a66:	f0 cf       	rjmp	.-32     	; 0x1a48 <LCD_vidWriteNumber_8bits+0x68>

00001a68 <LCD_vidSendCommand>:
}




void LCD_vidSendCommand(u8 u8CmdCpy){
    1a68:	1f 93       	push	r17
    1a6a:	18 2f       	mov	r17, r24
	///8 Bits (D0->D7)////
	///RS -> 0 for command////
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_OUTPUT);
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_LOW);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xff);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	6f ef       	ldi	r22, 0xFF	; 255
    1a8e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(LCD_DATA_PORT,u8CmdCpy);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	61 2f       	mov	r22, r17
    1a96:	0e 94 0a 07 	call	0xe14	; 0xe14 <DIO_voidSetPortValue>

	//Enable
	DIO_voidSetPortDirection(LCD_CONTROL_PORT,0xff);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	6f ef       	ldi	r22, 0xFF	; 255
    1a9e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidSetPortDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aac:	80 ea       	ldi	r24, 0xA0	; 160
    1aae:	9f e0       	ldi	r25, 0x0F	; 15
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_vidSendCommand+0x48>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>

}
    1abe:	1f 91       	pop	r17
    1ac0:	08 95       	ret

00001ac2 <LCD_vidGotoxy>:
}

void LCD_vidGotoxy(u8 X, u8 Y)
{
	// Validate coordinates
	if (X < 16 && Y < 2)
    1ac2:	80 31       	cpi	r24, 0x10	; 16
    1ac4:	10 f4       	brcc	.+4      	; 0x1aca <LCD_vidGotoxy+0x8>
    1ac6:	62 30       	cpi	r22, 0x02	; 2
    1ac8:	08 f0       	brcs	.+2      	; 0x1acc <LCD_vidGotoxy+0xa>
    1aca:	08 95       	ret
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 0x80 + X : 0xC0 + X;
    1acc:	66 23       	and	r22, r22
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <LCD_vidGotoxy+0x16>
    1ad0:	80 58       	subi	r24, 0x80	; 128
		LCD_vidSendCommand(address);
    1ad2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1ad6:	08 95       	ret
{
	// Validate coordinates
	if (X < 16 && Y < 2)
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 0x80 + X : 0xC0 + X;
    1ad8:	80 54       	subi	r24, 0x40	; 64
    1ada:	fb cf       	rjmp	.-10     	; 0x1ad2 <LCD_vidGotoxy+0x10>

00001adc <LCD_vidSendCommand_>:
	_delay_us(50);
	LCD_vidSendCommand(0x0C); // Display on
	_delay_us(50); }


void LCD_vidSendCommand_(u8 u8Cmd) {
    1adc:	1f 93       	push	r17
    1ade:	18 2f       	mov	r17, r24
	LCD_vidSendCommand(u8Cmd >> 4);
    1ae0:	82 95       	swap	r24
    1ae2:	8f 70       	andi	r24, 0x0F	; 15
    1ae4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
	LCD_vidSendCommand(u8Cmd & 0x0F);
    1ae8:	81 2f       	mov	r24, r17
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>


}
    1af0:	1f 91       	pop	r17
    1af2:	08 95       	ret

00001af4 <LCD_vidInit_8bits>:

#include "LCD_Config.h"
#include "LCD_Interfac.h"


void LCD_vidInit_8bits(void) {
    1af4:	1f 93       	push	r17
	DIO_voidSetPortDirection(DIO_u8_PORTB, 0xFF);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	6f ef       	ldi	r22, 0xFF	; 255
    1afa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT);
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	// RS
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT);
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	// RW
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    1b1c:	20 e9       	ldi	r18, 0x90	; 144
    1b1e:	31 e0       	ldi	r19, 0x01	; 1
    1b20:	48 ec       	ldi	r20, 0xC8	; 200
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	ca 01       	movw	r24, r20
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_vidInit_8bits+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	21 50       	subi	r18, 0x01	; 1
    1b2c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	d1 f7       	brne	.-12     	; 0x1b24 <LCD_vidInit_8bits+0x30>
	// EN
	// 2. Power-on delay (critical!)
	_delay_ms(40); // Extended delay for safet
	// 3. Triple initialization sequence
	LCD_vidSendCommand(0x30);
    1b30:	80 e3       	ldi	r24, 0x30	; 48
    1b32:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	9e e4       	ldi	r25, 0x4E	; 78
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_vidInit_8bits+0x46>
	_delay_ms(10);
	// Extended delay
	LCD_vidSendCommand(0x30);
    1b3e:	80 e3       	ldi	r24, 0x30	; 48
    1b40:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1b44:	80 ed       	ldi	r24, 0xD0	; 208
    1b46:	97 e0       	ldi	r25, 0x07	; 7
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_vidInit_8bits+0x54>
	_delay_ms(1);
	LCD_vidSendCommand(0x30);
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1b52:	8c e2       	ldi	r24, 0x2C	; 44
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_vidInit_8bits+0x62>
	_delay_us(150);
	// 4. Final configuration
	LCD_vidSendCommand(0x38);
    1b5a:	88 e3       	ldi	r24, 0x38	; 56
    1b5c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b60:	15 e8       	ldi	r17, 0x85	; 133
    1b62:	81 2f       	mov	r24, r17
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_vidInit_8bits+0x70>
	// 8-bit, 2-line, 5x8 font
	_delay_us(50);
	LCD_vidSendCommand(0x08);
    1b68:	88 e0       	ldi	r24, 0x08	; 8
    1b6a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1b6e:	81 2f       	mov	r24, r17
    1b70:	8a 95       	dec	r24
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_vidInit_8bits+0x7c>
	// Display off
	_delay_us(50);
	LCD_vidSendCommand(0x01);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7a:	80 e7       	ldi	r24, 0x70	; 112
    1b7c:	97 e1       	ldi	r25, 0x17	; 23
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_vidInit_8bits+0x8a>
	// Clear display
	_delay_ms(3); // Longer clear delay
	LCD_vidSendCommand(0x06); // Entry mode set
    1b82:	86 e0       	ldi	r24, 0x06	; 6
    1b84:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b88:	81 2f       	mov	r24, r17
    1b8a:	8a 95       	dec	r24
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_vidInit_8bits+0x96>
	_delay_us(50);
	LCD_vidSendCommand(0x0C); // Display on
    1b8e:	8c e0       	ldi	r24, 0x0C	; 12
    1b90:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_vidSendCommand>
    1b94:	1a 95       	dec	r17
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_vidInit_8bits+0xa0>
	_delay_us(50); }
    1b98:	1f 91       	pop	r17
    1b9a:	08 95       	ret

00001b9c <SERVO_voidInit>:
#include "Servo_Interface.h"

void SERVO_voidInit(void)
{
    // OC1A = PD5 كـ output
    SERVO_DDR |= (1 << SERVO_PIN);
    1b9c:	8d 9a       	sbi	0x11, 5	; 17

    // Timer1 Fast PWM Mode 14 (ICR1 = TOP), Prescaler = 8
    TCCR1A = (1 << COM1A1) | (1 << WGM11);
    1b9e:	82 e8       	ldi	r24, 0x82	; 130
    1ba0:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    1ba2:	8a e1       	ldi	r24, 0x1A	; 26
    1ba4:	8e bd       	out	0x2e, r24	; 46

    // Set TOP value = 20ms
    ICR1 = SERVO_TOP;
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	9e e4       	ldi	r25, 0x4E	; 78
    1baa:	97 bd       	out	0x27, r25	; 39
    1bac:	86 bd       	out	0x26, r24	; 38
}
    1bae:	08 95       	ret

00001bb0 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    // تحويل الزاوية (0–180) ل pulse width (1000–2000 µs)
    u16 pulse = SERVO_MIN_PULSE + ((u32)Copy_u16Angle * (SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / 180;
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	20 ed       	ldi	r18, 0xD0	; 208
    1bba:	37 e0       	ldi	r19, 0x07	; 7
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	0e 94 a3 10 	call	0x2146	; 0x2146 <__mulsi3>
    1bc4:	24 eb       	ldi	r18, 0xB4	; 180
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__udivmodsi4>
    1bd0:	2c 50       	subi	r18, 0x0C	; 12
    1bd2:	3e 4f       	sbci	r19, 0xFE	; 254

    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	24 3f       	cpi	r18, 0xF4	; 244
    1bd8:	38 07       	cpc	r19, r24
    1bda:	28 f4       	brcc	.+10     	; 0x1be6 <SERVO_voidSetAngle+0x36>
    1bdc:	24 ef       	ldi	r18, 0xF4	; 244
    1bde:	31 e0       	ldi	r19, 0x01	; 1
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;

    OCR1A = pulse;  // خرج على OC1A
    1be0:	3b bd       	out	0x2b, r19	; 43
    1be2:	2a bd       	out	0x2a, r18	; 42
}
    1be4:	08 95       	ret
{
    // تحويل الزاوية (0–180) ل pulse width (1000–2000 µs)
    u16 pulse = SERVO_MIN_PULSE + ((u32)Copy_u16Angle * (SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / 180;

    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;
    1be6:	89 e0       	ldi	r24, 0x09	; 9
    1be8:	25 3c       	cpi	r18, 0xC5	; 197
    1bea:	38 07       	cpc	r19, r24
    1bec:	c8 f3       	brcs	.-14     	; 0x1be0 <SERVO_voidSetAngle+0x30>
    1bee:	24 ec       	ldi	r18, 0xC4	; 196
    1bf0:	39 e0       	ldi	r19, 0x09	; 9

    OCR1A = pulse;  // خرج على OC1A
    1bf2:	3b bd       	out	0x2b, r19	; 43
    1bf4:	2a bd       	out	0x2a, r18	; 42
}
    1bf6:	08 95       	ret

00001bf8 <SWCH_GetVal>:
    }
}

u8 SWCH_GetVal()
{
    return (DIO_u8GetPinValue(SWCH_PORT, SWCH_PIN));
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
}
    1c00:	08 95       	ret

00001c02 <SWCH_init>:
#include "../MCAL/DIO_Register.h"
#include "SWCH_Config.h"
#include "SWCH_Interface.h"
void SWCH_init(u8 ARG_u8InputState)
{
    switch(ARG_u8InputState)
    1c02:	88 23       	and	r24, r24
    1c04:	59 f4       	brne	.+22     	; 0x1c1c <SWCH_init+0x1a>
    {
        case SWCH_INPUT_PULLUP:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
            DIO_voidSetPinValue(SWCH_PORT, SWCH_PIN, 1);
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1c1a:	08 95       	ret
#include "../MCAL/DIO_Register.h"
#include "SWCH_Config.h"
#include "SWCH_Interface.h"
void SWCH_init(u8 ARG_u8InputState)
{
    switch(ARG_u8InputState)
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <SWCH_init+0x20>
    1c20:	08 95       	ret
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
            DIO_voidSetPinValue(SWCH_PORT, SWCH_PIN, 1);
            break;

        case SWCH_INPUT_FLOATING:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
    1c2c:	08 95       	ret

00001c2e <STEPPER_voidRotateACW>:
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
	_delay_ms(5);
}
void STEPPER_voidRotateACW(void){
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	63 e0       	ldi	r22, 0x03	; 3
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c5a:	00 e1       	ldi	r16, 0x10	; 16
    1c5c:	17 e2       	ldi	r17, 0x27	; 39
    1c5e:	c8 01       	movw	r24, r16
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <STEPPER_voidRotateACW+0x32>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	63 e0       	ldi	r22, 0x03	; 3
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <STEPPER_voidRotateACW+0x60>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	63 e0       	ldi	r22, 0x03	; 3
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	62 e0       	ldi	r22, 0x02	; 2
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1cba:	c8 01       	movw	r24, r16
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <STEPPER_voidRotateACW+0x8e>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1ce8:	c8 01       	movw	r24, r16
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <STEPPER_voidRotateACW+0xbc>
	_delay_ms(5);
}
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	08 95       	ret

00001cf4 <STEPPER_voidRotateCW>:
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_OUTPUT);
}
void STEPPER_voidRotateCW(void){
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1d20:	00 e1       	ldi	r16, 0x10	; 16
    1d22:	17 e2       	ldi	r17, 0x27	; 39
    1d24:	c8 01       	movw	r24, r16
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <STEPPER_voidRotateCW+0x32>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	62 e0       	ldi	r22, 0x02	; 2
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	63 e0       	ldi	r22, 0x03	; 3
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1d52:	c8 01       	movw	r24, r16
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <STEPPER_voidRotateCW+0x60>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	62 e0       	ldi	r22, 0x02	; 2
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	63 e0       	ldi	r22, 0x03	; 3
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1d80:	c8 01       	movw	r24, r16
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <STEPPER_voidRotateCW+0x8e>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	63 e0       	ldi	r22, 0x03	; 3
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    1dae:	c8 01       	movw	r24, r16
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <STEPPER_voidRotateCW+0xbc>
	_delay_ms(5);
}
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	08 95       	ret

00001dba <STEPPER_voidInit>:
#include "Stepper_interface.h"
#include "Stepper_config.h"
#include "util/delay.h"

void STEPPER_voidInit(void){
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_OUTPUT);
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_OUTPUT);
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_OUTPUT);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	62 e0       	ldi	r22, 0x02	; 2
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_OUTPUT);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	63 e0       	ldi	r22, 0x03	; 3
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>
}
    1de2:	08 95       	ret

00001de4 <__vector_11>:
static volatile u16 end_time = 0;
static volatile u8 capture_done = 0;

/* ---------------- ISR ---------------- */
ISR(TIMER0_OVF_vect)
{
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    Timer0Overflow++;
    1df6:	80 91 ba 01 	lds	r24, 0x01BA
    1dfa:	90 91 bb 01 	lds	r25, 0x01BB
    1dfe:	a0 91 bc 01 	lds	r26, 0x01BC
    1e02:	b0 91 bd 01 	lds	r27, 0x01BD
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	b1 1d       	adc	r27, r1
    1e0c:	80 93 ba 01 	sts	0x01BA, r24
    1e10:	90 93 bb 01 	sts	0x01BB, r25
    1e14:	a0 93 bc 01 	sts	0x01BC, r26
    1e18:	b0 93 bd 01 	sts	0x01BD, r27
}
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <Ultrasonic_GetDistance>:
f32 Ultrasonic_GetDistance(void)
{
    f32 distance = 0;

    // Send 10us pulse
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_HIGH);
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e38:	8a e1       	ldi	r24, 0x1A	; 26
    1e3a:	8a 95       	dec	r24
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <Ultrasonic_GetDistance+0xc>
    _delay_us(10);
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_LOW);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_voidSetPinValue>

    capture_done = 0;
    1e48:	10 92 b7 01 	sts	0x01B7, r1

    // انتظر لحد ما يحصل قياس
    while (!capture_done);
    1e4c:	80 91 b7 01 	lds	r24, 0x01B7
    1e50:	88 23       	and	r24, r24
    1e52:	e1 f3       	breq	.-8      	; 0x1e4c <Ultrasonic_GetDistance+0x1e>

    // كل tick = 4us → time_us = end_time * 4
    // distance_cm = time_us / 58
    distance = ((f32)end_time * 4.0f) / 58.0f;
    1e54:	60 91 b8 01 	lds	r22, 0x01B8
    1e58:	70 91 b9 01 	lds	r23, 0x01B9
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	50 e4       	ldi	r21, 0x40	; 64
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	48 e6       	ldi	r20, 0x68	; 104
    1e76:	52 e4       	ldi	r21, 0x42	; 66
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>

    return distance;
}
    1e7c:	08 95       	ret

00001e7e <Ultrasonic_Init>:

/* ---------------- Init ---------------- */
void Ultrasonic_Init(void)
{
    /* Trigger pin output */
    DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_OUTPUT);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>

    /* Echo pin as input */
    DIO_voidSetPinDirection(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, DIO_u8_INPUT);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinDirection>

    /* Timer0 Normal mode, prescaler = 64 (tick = 4us) */
    TCCR0 = (1 << CS01) | (1 << CS00); // clk/64
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	83 bf       	out	0x33, r24	; 51
    TIMSK |= (1 << TOIE0);             // enable overflow interrupt
    1e96:	89 b7       	in	r24, 0x39	; 57
    1e98:	81 60       	ori	r24, 0x01	; 1
    1e9a:	89 bf       	out	0x39, r24	; 57

    /* Enable INT0 on any logical change */
    MCUCR |= (1 << ISC00);
    1e9c:	85 b7       	in	r24, 0x35	; 53
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1 << ISC01);
    1ea2:	85 b7       	in	r24, 0x35	; 53
    1ea4:	8d 7f       	andi	r24, 0xFD	; 253
    1ea6:	85 bf       	out	0x35, r24	; 53

    GICR |= (1 << INT0);
    1ea8:	8b b7       	in	r24, 0x3b	; 59
    1eaa:	80 64       	ori	r24, 0x40	; 64
    1eac:	8b bf       	out	0x3b, r24	; 59

    /* Enable global interrupts */
    Global_Interrupt_Enable();
    1eae:	0e 94 4f 08 	call	0x109e	; 0x109e <Global_Interrupt_Enable>
}
    1eb2:	08 95       	ret

00001eb4 <__vector_1>:
    Timer0Overflow++;
}

/* INT0 ISR for Echo pin */
ISR(INT0_vect)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
    if (DIO_u8GetPinValue(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN))
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	0e 94 1b 07 	call	0xe36	; 0xe36 <DIO_u8GetPinValue>
    1ede:	88 23       	and	r24, r24
    1ee0:	41 f5       	brne	.+80     	; 0x1f32 <__vector_1+0x7e>
        start_time = 0;
    }
    else
    {
        // Falling edge → stop timing
        end_time = (u16)TCNT0 + (Timer0Overflow * 256UL);
    1ee2:	82 b7       	in	r24, 0x32	; 50
    1ee4:	20 91 ba 01 	lds	r18, 0x01BA
    1ee8:	30 91 bb 01 	lds	r19, 0x01BB
    1eec:	40 91 bc 01 	lds	r20, 0x01BC
    1ef0:	50 91 bd 01 	lds	r21, 0x01BD
    1ef4:	54 2f       	mov	r21, r20
    1ef6:	43 2f       	mov	r20, r19
    1ef8:	32 2f       	mov	r19, r18
    1efa:	22 27       	eor	r18, r18
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	82 0f       	add	r24, r18
    1f00:	93 1f       	adc	r25, r19
    1f02:	90 93 b9 01 	sts	0x01B9, r25
    1f06:	80 93 b8 01 	sts	0x01B8, r24
        capture_done = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	80 93 b7 01 	sts	0x01B7, r24
    }
}
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti
ISR(INT0_vect)
{
    if (DIO_u8GetPinValue(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN))
    {
        // Rising edge → start timing
        TCNT0 = 0;
    1f32:	12 be       	out	0x32, r1	; 50
        Timer0Overflow = 0;
    1f34:	10 92 ba 01 	sts	0x01BA, r1
    1f38:	10 92 bb 01 	sts	0x01BB, r1
    1f3c:	10 92 bc 01 	sts	0x01BC, r1
    1f40:	10 92 bd 01 	sts	0x01BD, r1
        start_time = 0;
    1f44:	10 92 bf 01 	sts	0x01BF, r1
    1f48:	10 92 be 01 	sts	0x01BE, r1
    1f4c:	e1 cf       	rjmp	.-62     	; 0x1f10 <__vector_1+0x5c>

00001f4e <__vector_13>:
    }
}

// --------- ISR for UART RX ---------
ISR(USART_RXC_vect)
{
    1f4e:	1f 92       	push	r1
    1f50:	0f 92       	push	r0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	0f 92       	push	r0
    1f56:	11 24       	eor	r1, r1
    1f58:	2f 93       	push	r18
    1f5a:	3f 93       	push	r19
    1f5c:	4f 93       	push	r20
    1f5e:	5f 93       	push	r21
    1f60:	6f 93       	push	r22
    1f62:	7f 93       	push	r23
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	af 93       	push	r26
    1f6a:	bf 93       	push	r27
    1f6c:	ef 93       	push	r30
    1f6e:	ff 93       	push	r31
	PORTA ^= (1 << PA7);
    1f70:	8b b3       	in	r24, 0x1b	; 27
    1f72:	80 58       	subi	r24, 0x80	; 128
    1f74:	8b bb       	out	0x1b, r24	; 27
    unsigned char read = UDR;
    1f76:	8c b1       	in	r24, 0x0c	; 12

    switch (read)
    1f78:	8c 34       	cpi	r24, 0x4C	; 76
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <__vector_13+0x30>
    1f7c:	42 c0       	rjmp	.+132    	; 0x2002 <__vector_13+0xb4>
    1f7e:	8d 34       	cpi	r24, 0x4D	; 77
    1f80:	c8 f0       	brcs	.+50     	; 0x1fb4 <__vector_13+0x66>
    1f82:	82 35       	cpi	r24, 0x52	; 82
    1f84:	71 f1       	breq	.+92     	; 0x1fe2 <__vector_13+0x94>
    1f86:	83 35       	cpi	r24, 0x53	; 83
    1f88:	31 f1       	breq	.+76     	; 0x1fd6 <__vector_13+0x88>
    1f8a:	8d 34       	cpi	r24, 0x4D	; 77
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <__vector_13+0x44>
    {
        case 'A': mode = 1; break;  // Auto Mode
        case 'M': mode = 0; break;  // Manual Mode
    1f8e:	10 92 82 01 	sts	0x0182, r1
        case 'B': if (mode == 0) L298_voidMove(MOVE_BACKWARD); break;
        case 'R': if (mode == 0) L298_voidMove(MOVE_RIGHT);    break;
        case 'L': if (mode == 0) L298_voidMove(MOVE_LEFT);     break;
        case 'S': if (mode == 0) L298_voidMove(MOVE_STOP);     break;
    }
}
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	7f 91       	pop	r23
    1fa0:	6f 91       	pop	r22
    1fa2:	5f 91       	pop	r21
    1fa4:	4f 91       	pop	r20
    1fa6:	3f 91       	pop	r19
    1fa8:	2f 91       	pop	r18
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti
ISR(USART_RXC_vect)
{
	PORTA ^= (1 << PA7);
    unsigned char read = UDR;

    switch (read)
    1fb4:	82 34       	cpi	r24, 0x42	; 66
    1fb6:	e9 f0       	breq	.+58     	; 0x1ff2 <__vector_13+0xa4>
    1fb8:	86 34       	cpi	r24, 0x46	; 70
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <__vector_13+0x7a>
    1fbc:	81 34       	cpi	r24, 0x41	; 65
    1fbe:	49 f7       	brne	.-46     	; 0x1f92 <__vector_13+0x44>
    {
        case 'A': mode = 1; break;  // Auto Mode
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 82 01 	sts	0x0182, r24
    1fc6:	e5 cf       	rjmp	.-54     	; 0x1f92 <__vector_13+0x44>
        case 'M': mode = 0; break;  // Manual Mode

        // Manual control commands
        case 'F': if (mode == 0) L298_voidMove(MOVE_FORWARD);  break;
    1fc8:	80 91 82 01 	lds	r24, 0x0182
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f7       	brne	.-62     	; 0x1f92 <__vector_13+0x44>
        case 'B': if (mode == 0) L298_voidMove(MOVE_BACKWARD); break;
        case 'R': if (mode == 0) L298_voidMove(MOVE_RIGHT);    break;
        case 'L': if (mode == 0) L298_voidMove(MOVE_LEFT);     break;
        case 'S': if (mode == 0) L298_voidMove(MOVE_STOP);     break;
    1fd0:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    1fd4:	de cf       	rjmp	.-68     	; 0x1f92 <__vector_13+0x44>
    1fd6:	80 91 82 01 	lds	r24, 0x0182
    1fda:	88 23       	and	r24, r24
    1fdc:	d1 f6       	brne	.-76     	; 0x1f92 <__vector_13+0x44>
    1fde:	84 e0       	ldi	r24, 0x04	; 4
    1fe0:	f7 cf       	rjmp	.-18     	; 0x1fd0 <__vector_13+0x82>
        case 'M': mode = 0; break;  // Manual Mode

        // Manual control commands
        case 'F': if (mode == 0) L298_voidMove(MOVE_FORWARD);  break;
        case 'B': if (mode == 0) L298_voidMove(MOVE_BACKWARD); break;
        case 'R': if (mode == 0) L298_voidMove(MOVE_RIGHT);    break;
    1fe2:	80 91 82 01 	lds	r24, 0x0182
    1fe6:	88 23       	and	r24, r24
    1fe8:	a1 f6       	brne	.-88     	; 0x1f92 <__vector_13+0x44>
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    1ff0:	d0 cf       	rjmp	.-96     	; 0x1f92 <__vector_13+0x44>
        case 'A': mode = 1; break;  // Auto Mode
        case 'M': mode = 0; break;  // Manual Mode

        // Manual control commands
        case 'F': if (mode == 0) L298_voidMove(MOVE_FORWARD);  break;
        case 'B': if (mode == 0) L298_voidMove(MOVE_BACKWARD); break;
    1ff2:	80 91 82 01 	lds	r24, 0x0182
    1ff6:	88 23       	and	r24, r24
    1ff8:	61 f6       	brne	.-104    	; 0x1f92 <__vector_13+0x44>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    2000:	c8 cf       	rjmp	.-112    	; 0x1f92 <__vector_13+0x44>
        case 'R': if (mode == 0) L298_voidMove(MOVE_RIGHT);    break;
        case 'L': if (mode == 0) L298_voidMove(MOVE_LEFT);     break;
    2002:	80 91 82 01 	lds	r24, 0x0182
    2006:	88 23       	and	r24, r24
    2008:	21 f6       	brne	.-120    	; 0x1f92 <__vector_13+0x44>
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    2010:	c0 cf       	rjmp	.-128    	; 0x1f92 <__vector_13+0x44>

00002012 <Auto_Mode>:
// --------- GLOBAL VARIABLES ---------
volatile u8 mode = 1; // 1 = Auto (default), 0 = Manual
//
//// --------- FUNCTIONS ---------
void Auto_Mode(void)
{
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    u16 distance, leftDist, rightDist;

    distance = Ultrasonic_GetDistance();
    201a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Ultrasonic_GetDistance>
    201e:	20 ed       	ldi	r18, 0xD0	; 208
    2020:	37 e0       	ldi	r19, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2022:	48 ec       	ldi	r20, 0xC8	; 200
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	fa 01       	movw	r30, r20
    2028:	31 97       	sbiw	r30, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <Auto_Mode+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	21 50       	subi	r18, 0x01	; 1
    202e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	d1 f7       	brne	.-12     	; 0x2026 <Auto_Mode+0x14>
    _delay_ms(200);
    if (distance > 20 && distance < 200)
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	65 51       	subi	r22, 0x15	; 21
    2038:	70 40       	sbci	r23, 0x00	; 0
    203a:	63 3b       	cpi	r22, 0xB3	; 179
    203c:	71 05       	cpc	r23, r1
    203e:	08 f4       	brcc	.+2      	; 0x2042 <Auto_Mode+0x30>
    2040:	58 c0       	rjmp	.+176    	; 0x20f2 <Auto_Mode+0xe0>
    {
        L298_voidMove(MOVE_FORWARD);
    }
    else
    {
        L298_voidMove(MOVE_STOP);
    2042:	84 e0       	ldi	r24, 0x04	; 4
    2044:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>

        // يمين
        SERVO_voidSetAngle(0);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SERVO_voidSetAngle>
    2050:	20 e4       	ldi	r18, 0x40	; 64
    2052:	3f e1       	ldi	r19, 0x1F	; 31
    2054:	48 ec       	ldi	r20, 0xC8	; 200
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	ca 01       	movw	r24, r20
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <Auto_Mode+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	21 50       	subi	r18, 0x01	; 1
    2060:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	d1 f7       	brne	.-12     	; 0x2058 <Auto_Mode+0x46>
        _delay_ms(800);
        rightDist = Ultrasonic_GetDistance();
    2064:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Ultrasonic_GetDistance>
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	8b 01       	movw	r16, r22

        // شمال
        SERVO_voidSetAngle(180);
    206e:	84 eb       	ldi	r24, 0xB4	; 180
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SERVO_voidSetAngle>
    2076:	20 e4       	ldi	r18, 0x40	; 64
    2078:	3f e1       	ldi	r19, 0x1F	; 31
    207a:	48 ec       	ldi	r20, 0xC8	; 200
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	ca 01       	movw	r24, r20
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <Auto_Mode+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	21 50       	subi	r18, 0x01	; 1
    2086:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	d1 f7       	brne	.-12     	; 0x207e <Auto_Mode+0x6c>
        _delay_ms(800);
        leftDist = Ultrasonic_GetDistance();
    208a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Ultrasonic_GetDistance>
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	eb 01       	movw	r28, r22

        // رجع للمنتصف
        SERVO_voidSetAngle(90);
    2094:	8a e5       	ldi	r24, 0x5A	; 90
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SERVO_voidSetAngle>

        if (rightDist > leftDist && rightDist > 30)
    209c:	c0 17       	cp	r28, r16
    209e:	d1 07       	cpc	r29, r17
    20a0:	b8 f0       	brcs	.+46     	; 0x20d0 <Auto_Mode+0xbe>
        {
            L298_voidMove(MOVE_RIGHT);
            _delay_ms(400);
        }
        else if (leftDist >= rightDist && leftDist > 30)
    20a2:	6f 97       	sbiw	r28, 0x1f	; 31
    20a4:	70 f5       	brcc	.+92     	; 0x2102 <Auto_Mode+0xf0>
            L298_voidMove(MOVE_LEFT);
            _delay_ms(400);
        }
        else
        {
            L298_voidMove(MOVE_BACKWARD);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    20ac:	28 e8       	ldi	r18, 0x88	; 136
    20ae:	33 e1       	ldi	r19, 0x13	; 19
    20b0:	48 ec       	ldi	r20, 0xC8	; 200
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	ca 01       	movw	r24, r20
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <Auto_Mode+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	d1 f7       	brne	.-12     	; 0x20b4 <Auto_Mode+0xa2>
            _delay_ms(500);
        }

        L298_voidMove(MOVE_STOP);
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    }
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	08 95       	ret
        leftDist = Ultrasonic_GetDistance();

        // رجع للمنتصف
        SERVO_voidSetAngle(90);

        if (rightDist > leftDist && rightDist > 30)
    20d0:	0f 31       	cpi	r16, 0x1F	; 31
    20d2:	11 05       	cpc	r17, r1
    20d4:	40 f3       	brcs	.-48     	; 0x20a6 <Auto_Mode+0x94>
        {
            L298_voidMove(MOVE_RIGHT);
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    20dc:	20 ea       	ldi	r18, 0xA0	; 160
    20de:	3f e0       	ldi	r19, 0x0F	; 15
    20e0:	48 ec       	ldi	r20, 0xC8	; 200
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	ca 01       	movw	r24, r20
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <Auto_Mode+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	21 50       	subi	r18, 0x01	; 1
    20ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	d1 f7       	brne	.-12     	; 0x20e4 <Auto_Mode+0xd2>
    20f0:	e7 cf       	rjmp	.-50     	; 0x20c0 <Auto_Mode+0xae>

    distance = Ultrasonic_GetDistance();
    _delay_ms(200);
    if (distance > 20 && distance < 200)
    {
        L298_voidMove(MOVE_FORWARD);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
            _delay_ms(500);
        }

        L298_voidMove(MOVE_STOP);
    }
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret
            L298_voidMove(MOVE_RIGHT);
            _delay_ms(400);
        }
        else if (leftDist >= rightDist && leftDist > 30)
        {
            L298_voidMove(MOVE_LEFT);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	0e 94 89 0a 	call	0x1512	; 0x1512 <L298_voidMove>
    2108:	20 ea       	ldi	r18, 0xA0	; 160
    210a:	3f e0       	ldi	r19, 0x0F	; 15
    210c:	48 ec       	ldi	r20, 0xC8	; 200
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	ca 01       	movw	r24, r20
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <Auto_Mode+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	21 50       	subi	r18, 0x01	; 1
    2118:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	d1 f7       	brne	.-12     	; 0x2110 <Auto_Mode+0xfe>
    211c:	d1 cf       	rjmp	.-94     	; 0x20c0 <Auto_Mode+0xae>

0000211e <main>:
}

// --------- MAIN ---------
int main(void)
{
	DIO_voidSetPortDirection(DIO_u8_PORTC,255);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	6f ef       	ldi	r22, 0xFF	; 255
    2122:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidSetPortDirection>
	// Init
    L298_voidInit();
    2126:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <L298_voidInit>
    SERVO_voidInit();
    212a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <SERVO_voidInit>
    Ultrasonic_Init();
    212e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Ultrasonic_Init>
    UART_Init();
    2132:	0e 94 ca 06 	call	0xd94	; 0xd94 <UART_Init>

    // Enable global interrupt
    sei();
    2136:	78 94       	sei
    {


//		/* Handle LED output */

        if (mode == 1) // Auto Mode
    2138:	80 91 82 01 	lds	r24, 0x0182
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	e1 f7       	brne	.-8      	; 0x2138 <main+0x1a>
        {
            Auto_Mode();
    2140:	0e 94 09 10 	call	0x2012	; 0x2012 <Auto_Mode>
    2144:	f9 cf       	rjmp	.-14     	; 0x2138 <main+0x1a>

00002146 <__mulsi3>:
    2146:	62 9f       	mul	r22, r18
    2148:	d0 01       	movw	r26, r0
    214a:	73 9f       	mul	r23, r19
    214c:	f0 01       	movw	r30, r0
    214e:	82 9f       	mul	r24, r18
    2150:	e0 0d       	add	r30, r0
    2152:	f1 1d       	adc	r31, r1
    2154:	64 9f       	mul	r22, r20
    2156:	e0 0d       	add	r30, r0
    2158:	f1 1d       	adc	r31, r1
    215a:	92 9f       	mul	r25, r18
    215c:	f0 0d       	add	r31, r0
    215e:	83 9f       	mul	r24, r19
    2160:	f0 0d       	add	r31, r0
    2162:	74 9f       	mul	r23, r20
    2164:	f0 0d       	add	r31, r0
    2166:	65 9f       	mul	r22, r21
    2168:	f0 0d       	add	r31, r0
    216a:	99 27       	eor	r25, r25
    216c:	72 9f       	mul	r23, r18
    216e:	b0 0d       	add	r27, r0
    2170:	e1 1d       	adc	r30, r1
    2172:	f9 1f       	adc	r31, r25
    2174:	63 9f       	mul	r22, r19
    2176:	b0 0d       	add	r27, r0
    2178:	e1 1d       	adc	r30, r1
    217a:	f9 1f       	adc	r31, r25
    217c:	bd 01       	movw	r22, r26
    217e:	cf 01       	movw	r24, r30
    2180:	11 24       	eor	r1, r1
    2182:	08 95       	ret

00002184 <__udivmodhi4>:
    2184:	aa 1b       	sub	r26, r26
    2186:	bb 1b       	sub	r27, r27
    2188:	51 e1       	ldi	r21, 0x11	; 17
    218a:	07 c0       	rjmp	.+14     	; 0x219a <__udivmodhi4_ep>

0000218c <__udivmodhi4_loop>:
    218c:	aa 1f       	adc	r26, r26
    218e:	bb 1f       	adc	r27, r27
    2190:	a6 17       	cp	r26, r22
    2192:	b7 07       	cpc	r27, r23
    2194:	10 f0       	brcs	.+4      	; 0x219a <__udivmodhi4_ep>
    2196:	a6 1b       	sub	r26, r22
    2198:	b7 0b       	sbc	r27, r23

0000219a <__udivmodhi4_ep>:
    219a:	88 1f       	adc	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	5a 95       	dec	r21
    21a0:	a9 f7       	brne	.-22     	; 0x218c <__udivmodhi4_loop>
    21a2:	80 95       	com	r24
    21a4:	90 95       	com	r25
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	08 95       	ret

000021ac <__udivmodsi4>:
    21ac:	a1 e2       	ldi	r26, 0x21	; 33
    21ae:	1a 2e       	mov	r1, r26
    21b0:	aa 1b       	sub	r26, r26
    21b2:	bb 1b       	sub	r27, r27
    21b4:	fd 01       	movw	r30, r26
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <__udivmodsi4_ep>

000021b8 <__udivmodsi4_loop>:
    21b8:	aa 1f       	adc	r26, r26
    21ba:	bb 1f       	adc	r27, r27
    21bc:	ee 1f       	adc	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	a2 17       	cp	r26, r18
    21c2:	b3 07       	cpc	r27, r19
    21c4:	e4 07       	cpc	r30, r20
    21c6:	f5 07       	cpc	r31, r21
    21c8:	20 f0       	brcs	.+8      	; 0x21d2 <__udivmodsi4_ep>
    21ca:	a2 1b       	sub	r26, r18
    21cc:	b3 0b       	sbc	r27, r19
    21ce:	e4 0b       	sbc	r30, r20
    21d0:	f5 0b       	sbc	r31, r21

000021d2 <__udivmodsi4_ep>:
    21d2:	66 1f       	adc	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	1a 94       	dec	r1
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <__udivmodsi4_loop>
    21de:	60 95       	com	r22
    21e0:	70 95       	com	r23
    21e2:	80 95       	com	r24
    21e4:	90 95       	com	r25
    21e6:	9b 01       	movw	r18, r22
    21e8:	ac 01       	movw	r20, r24
    21ea:	bd 01       	movw	r22, r26
    21ec:	cf 01       	movw	r24, r30
    21ee:	08 95       	ret

000021f0 <__prologue_saves__>:
    21f0:	2f 92       	push	r2
    21f2:	3f 92       	push	r3
    21f4:	4f 92       	push	r4
    21f6:	5f 92       	push	r5
    21f8:	6f 92       	push	r6
    21fa:	7f 92       	push	r7
    21fc:	8f 92       	push	r8
    21fe:	9f 92       	push	r9
    2200:	af 92       	push	r10
    2202:	bf 92       	push	r11
    2204:	cf 92       	push	r12
    2206:	df 92       	push	r13
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	ca 1b       	sub	r28, r26
    221a:	db 0b       	sbc	r29, r27
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	09 94       	ijmp

00002228 <__epilogue_restores__>:
    2228:	2a 88       	ldd	r2, Y+18	; 0x12
    222a:	39 88       	ldd	r3, Y+17	; 0x11
    222c:	48 88       	ldd	r4, Y+16	; 0x10
    222e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2230:	6e 84       	ldd	r6, Y+14	; 0x0e
    2232:	7d 84       	ldd	r7, Y+13	; 0x0d
    2234:	8c 84       	ldd	r8, Y+12	; 0x0c
    2236:	9b 84       	ldd	r9, Y+11	; 0x0b
    2238:	aa 84       	ldd	r10, Y+10	; 0x0a
    223a:	b9 84       	ldd	r11, Y+9	; 0x09
    223c:	c8 84       	ldd	r12, Y+8	; 0x08
    223e:	df 80       	ldd	r13, Y+7	; 0x07
    2240:	ee 80       	ldd	r14, Y+6	; 0x06
    2242:	fd 80       	ldd	r15, Y+5	; 0x05
    2244:	0c 81       	ldd	r16, Y+4	; 0x04
    2246:	1b 81       	ldd	r17, Y+3	; 0x03
    2248:	aa 81       	ldd	r26, Y+2	; 0x02
    224a:	b9 81       	ldd	r27, Y+1	; 0x01
    224c:	ce 0f       	add	r28, r30
    224e:	d1 1d       	adc	r29, r1
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	ed 01       	movw	r28, r26
    225c:	08 95       	ret

0000225e <_exit>:
    225e:	f8 94       	cli

00002260 <__stop_program>:
    2260:	ff cf       	rjmp	.-2      	; 0x2260 <__stop_program>
