
ESP32andAVR2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003046  000030da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080016a  0080016a  000031e4  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001461  00000000  00000000  000065b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c70c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <main>
      8a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
u8 UART_Frame[50]={0};



void UART_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(UBRRH,URSEL);

	UBRRH =0;
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
	UBRRL=51;
     e3c:	e9 e2       	ldi	r30, 0x29	; 41
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	83 e3       	ldi	r24, 0x33	; 51
     e42:	80 83       	st	Z, r24

	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);  //RX INPUT
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_OUTPUT); //TX INPUT
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     e58:	e0 e4       	ldi	r30, 0x40	; 64
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	86 e8       	ldi	r24, 0x86	; 134
     e5e:	80 83       	st	Z, r24
//	CLR_BIT(UCSRC,UPM1);
//	CLR_BIT(UCSRC,USBS);
//	SET_BIT(UCSRC,UCSZ0);
//	SET_BIT(UCSRC,UCSZ1);

	UCSRB = (1<<RXEN) | (1<<TXEN);
     e60:	ea e2       	ldi	r30, 0x2A	; 42
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	80 83       	st	Z, r24


}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <UART_Receive_Byte>:


unsigned char UART_Receive_Byte(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1<<RXC)));
     e76:	eb e2       	ldi	r30, 0x2B	; 43
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	dc f7       	brge	.-10     	; 0xe76 <UART_Receive_Byte+0x8>

	return UDR;
     e80:	ec e2       	ldi	r30, 0x2C	; 44
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
}
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <UART_Init_Interrupt>:

void UART_Init_Interrupt(void)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	UART_Init();
     e94:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>

	UCSRB |= (1<<RXCIE)|(1<<TXCIE);
     e98:	aa e2       	ldi	r26, 0x2A	; 42
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e2       	ldi	r30, 0x2A	; 42
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 6c       	ori	r24, 0xC0	; 192
     ea4:	8c 93       	st	X, r24

	__asm__ __volatile__ ("sei" ::);
     ea6:	78 94       	sei
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <UART_Send_Byte>:


void UART_Send_Byte(u8 data)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UDRE)==0);
     eba:	eb e2       	ldi	r30, 0x2B	; 43
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 95       	swap	r24
     ec2:	86 95       	lsr	r24
     ec4:	87 70       	andi	r24, 0x07	; 7
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	81 70       	andi	r24, 0x01	; 1
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	a1 f3       	breq	.-24     	; 0xeba <UART_Send_Byte+0xc>
	UCSRA |= (1<<UDRE);
     ed2:	ab e2       	ldi	r26, 0x2B	; 43
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e2       	ldi	r30, 0x2B	; 43
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	8c 93       	st	X, r24

	UDR=data;
     ee0:	ec e2       	ldi	r30, 0x2C	; 44
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	80 83       	st	Z, r24
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <UART_Send_Byte+0x4a>
	while (GET_BIT(UCSRA,TXC)==0)
	{
		UCSRA |= (1<<TXC);
     eea:	ab e2       	ldi	r26, 0x2B	; 43
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e2       	ldi	r30, 0x2B	; 43
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	8c 93       	st	X, r24
{
	while (GET_BIT(UCSRA,UDRE)==0);
	UCSRA |= (1<<UDRE);

	UDR=data;
	while (GET_BIT(UCSRA,TXC)==0)
     ef8:	eb e2       	ldi	r30, 0x2B	; 43
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	82 95       	swap	r24
     f00:	86 95       	lsr	r24
     f02:	86 95       	lsr	r24
     f04:	83 70       	andi	r24, 0x03	; 3
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	81 70       	andi	r24, 0x01	; 1
     f0c:	90 70       	andi	r25, 0x00	; 0
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	61 f3       	breq	.-40     	; 0xeea <UART_Send_Byte+0x3c>
	{
		UCSRA |= (1<<TXC);
	}
}
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <Timer1_voidInit_Normal>:
#include "Timer1_Register.h"
#include "../DIO_Interface.h"
#include "../Global_Interrupt_Enable/GIE_Interface.h"

void Timer1_voidInit_Normal(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
    Global_Interrupt_Enable();
     f22:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>

    /* Normal mode */
    CLR_BIT(TCCR1A,0);
     f26:	af e4       	ldi	r26, 0x4F	; 79
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ef e4       	ldi	r30, 0x4F	; 79
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8e 7f       	andi	r24, 0xFE	; 254
     f32:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,1);
     f34:	af e4       	ldi	r26, 0x4F	; 79
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e4       	ldi	r30, 0x4F	; 79
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,3);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,4);
     f50:	ae e4       	ldi	r26, 0x4E	; 78
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e4       	ldi	r30, 0x4E	; 78
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8f 7e       	andi	r24, 0xEF	; 239
     f5c:	8c 93       	st	X, r24

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8c 93       	st	X, r24

    /* Enable overflow interrupt */
    SET_BIT(TIMSK,2);
     f6c:	a9 e5       	ldi	r26, 0x59	; 89
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e9 e5       	ldi	r30, 0x59	; 89
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	84 60       	ori	r24, 0x04	; 4
     f78:	8c 93       	st	X, r24
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <Timer1_voidInit_CTC_A>:

void Timer1_voidInit_CTC_A(u16 compareValue)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <Timer1_voidInit_CTC_A+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
    Global_Interrupt_Enable();
     f8e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>

    /* CTC mode with OCR1A */
    CLR_BIT(TCCR1A,0);
     f92:	af e4       	ldi	r26, 0x4F	; 79
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ef e4       	ldi	r30, 0x4F	; 79
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,1);
     fa0:	af e4       	ldi	r26, 0x4F	; 79
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ef e4       	ldi	r30, 0x4F	; 79
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	82 60       	ori	r24, 0x02	; 2
     fac:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,3);
     fae:	ae e4       	ldi	r26, 0x4E	; 78
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ee e4       	ldi	r30, 0x4E	; 78
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,4);
     fbc:	ae e4       	ldi	r26, 0x4E	; 78
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ee e4       	ldi	r30, 0x4E	; 78
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7e       	andi	r24, 0xEF	; 239
     fc8:	8c 93       	st	X, r24

    OCR1A = compareValue;
     fca:	ea e4       	ldi	r30, 0x4A	; 74
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
     fd6:	ae e4       	ldi	r26, 0x4E	; 78
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ee e4       	ldi	r30, 0x4E	; 78
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	8c 93       	st	X, r24

    /* Enable OCR1A interrupt */
    SET_BIT(TIMSK,4);
     fe4:	a9 e5       	ldi	r26, 0x59	; 89
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e9 e5       	ldi	r30, 0x59	; 89
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	8c 93       	st	X, r24
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <Timer1_voidInit_CTC_B>:

void Timer1_voidInit_CTC_B(u16 compareValue)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <Timer1_voidInit_CTC_B+0x6>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
    Global_Interrupt_Enable();
    100a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>

    /* CTC mode with OCR1B */
    CLR_BIT(TCCR1A,0);
    100e:	af e4       	ldi	r26, 0x4F	; 79
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ef e4       	ldi	r30, 0x4F	; 79
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,1);
    101c:	af e4       	ldi	r26, 0x4F	; 79
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ef e4       	ldi	r30, 0x4F	; 79
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,3);
    102a:	ae e4       	ldi	r26, 0x4E	; 78
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ee e4       	ldi	r30, 0x4E	; 78
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,4);
    1038:	ae e4       	ldi	r26, 0x4E	; 78
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ee e4       	ldi	r30, 0x4E	; 78
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 7e       	andi	r24, 0xEF	; 239
    1044:	8c 93       	st	X, r24

    OCR1B = compareValue;
    1046:	e8 e4       	ldi	r30, 0x48	; 72
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	8c 93       	st	X, r24

    /* Enable OCR1B interrupt */
    SET_BIT(TIMSK,3);
    1060:	a9 e5       	ldi	r26, 0x59	; 89
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e9 e5       	ldi	r30, 0x59	; 89
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	8c 93       	st	X, r24
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <Timer1_voidInit_FastPWM_A>:

void Timer1_voidInit_FastPWM_A(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    1080:	af e4       	ldi	r26, 0x4F	; 79
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ef e4       	ldi	r30, 0x4F	; 79
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,0);
    108e:	af e4       	ldi	r26, 0x4F	; 79
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8e 7f       	andi	r24, 0xFE	; 254
    109a:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,3);
    109c:	ae e4       	ldi	r26, 0x4E	; 78
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ee e4       	ldi	r30, 0x4E	; 78
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,4);
    10aa:	ae e4       	ldi	r26, 0x4E	; 78
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ee e4       	ldi	r30, 0x4E	; 78
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	8c 93       	st	X, r24

    /* Clear OC1A on compare match, set at TOP */
    SET_BIT(TCCR1A,7);
    10b8:	af e4       	ldi	r26, 0x4F	; 79
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ef e4       	ldi	r30, 0x4F	; 79
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,6);
    10c6:	af e4       	ldi	r26, 0x4F	; 79
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ef e4       	ldi	r30, 0x4F	; 79
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8f 7b       	andi	r24, 0xBF	; 191
    10d2:	8c 93       	st	X, r24

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    10d4:	ae e4       	ldi	r26, 0x4E	; 78
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ee e4       	ldi	r30, 0x4E	; 78
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	8c 93       	st	X, r24

    /* OC1A pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_OUTPUT); // OC1A
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	65 e0       	ldi	r22, 0x05	; 5
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <Timer1_voidInit_FastPWM_B>:

void Timer1_voidInit_FastPWM_B(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    10fa:	af e4       	ldi	r26, 0x4F	; 79
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ef e4       	ldi	r30, 0x4F	; 79
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	82 60       	ori	r24, 0x02	; 2
    1106:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,0);
    1108:	af e4       	ldi	r26, 0x4F	; 79
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ef e4       	ldi	r30, 0x4F	; 79
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,3);
    1116:	ae e4       	ldi	r26, 0x4E	; 78
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ee e4       	ldi	r30, 0x4E	; 78
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,4);
    1124:	ae e4       	ldi	r26, 0x4E	; 78
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ee e4       	ldi	r30, 0x4E	; 78
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	8c 93       	st	X, r24

    /* Clear OC1B on compare match, set at TOP */
    SET_BIT(TCCR1A,5);
    1132:	af e4       	ldi	r26, 0x4F	; 79
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e4       	ldi	r30, 0x4F	; 79
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,4);
    1140:	af e4       	ldi	r26, 0x4F	; 79
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ef e4       	ldi	r30, 0x4F	; 79
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 7e       	andi	r24, 0xEF	; 239
    114c:	8c 93       	st	X, r24

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    114e:	ae e4       	ldi	r26, 0x4E	; 78
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ee e4       	ldi	r30, 0x4E	; 78
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	82 60       	ori	r24, 0x02	; 2
    115a:	8c 93       	st	X, r24

    /* OC1B pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_OUTPUT); // OC1B
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	64 e0       	ldi	r22, 0x04	; 4
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <Timer1_voidSetCompareMatchA>:

void Timer1_voidSetCompareMatchA(u16 value)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <Timer1_voidSetCompareMatchA+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = value;
    117a:	ea e4       	ldi	r30, 0x4A	; 74
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	80 83       	st	Z, r24
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <Timer1_voidSetCompareMatchB>:

void Timer1_voidSetCompareMatchB(u16 value)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <Timer1_voidSetCompareMatchB+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = value;
    119e:	e8 e4       	ldi	r30, 0x48	; 72
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <Timer1_voidSetICR>:

void Timer1_voidSetICR(u16 value)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <Timer1_voidSetICR+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    11c2:	e6 e4       	ldi	r30, 0x46	; 70
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <Timer1_voidSetTCNT>:

void Timer1_voidSetTCNT(u16 value)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <Timer1_voidSetTCNT+0x6>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = value;
    11e6:	ec e4       	ldi	r30, 0x4C	; 76
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer1_voidInitPWM>:
void Timer1_voidInitPWM(u16 top, u8 prescaler)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <Timer1_voidInitPWM+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <Timer1_voidInitPWM+0x8>
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	6b 83       	std	Y+3, r22	; 0x03
    // Fast PWM mode, TOP = ICR1
    SET_BIT(TCCR1A, 1);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, 0);
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 3);
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, 4);
    123a:	ae e4       	ldi	r26, 0x4E	; 78
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ee e4       	ldi	r30, 0x4E	; 78
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	8c 93       	st	X, r24

    // Non-inverting on Channel A (OC1A → PD5)
    CLR_BIT(TCCR1A, 6);
    1248:	af e4       	ldi	r26, 0x4F	; 79
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ef e4       	ldi	r30, 0x4F	; 79
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	8f 7b       	andi	r24, 0xBF	; 191
    1254:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, 7);
    1256:	af e4       	ldi	r26, 0x4F	; 79
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ef e4       	ldi	r30, 0x4F	; 79
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 68       	ori	r24, 0x80	; 128
    1262:	8c 93       	st	X, r24

    // Set TOP value
    ICR1 = top;
    1264:	e6 e4       	ldi	r30, 0x46	; 70
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24

    // Prescaler
    switch(prescaler)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	88 30       	cpi	r24, 0x08	; 8
    1280:	91 05       	cpc	r25, r1
    1282:	09 f1       	breq	.+66     	; 0x12c6 <Timer1_voidInitPWM+0xca>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	20 34       	cpi	r18, 0x40	; 64
    128a:	31 05       	cpc	r19, r1
    128c:	91 f1       	breq	.+100    	; 0x12f2 <Timer1_voidInitPWM+0xf6>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	09 f0       	breq	.+2      	; 0x129a <Timer1_voidInitPWM+0x9e>
    1298:	41 c0       	rjmp	.+130    	; 0x131c <Timer1_voidInitPWM+0x120>
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	81 60       	ori	r24, 0x01	; 1
    12a6:	8c 93       	st	X, r24
    12a8:	ae e4       	ldi	r26, 0x4E	; 78
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ee e4       	ldi	r30, 0x4E	; 78
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8d 7f       	andi	r24, 0xFD	; 253
    12b4:	8c 93       	st	X, r24
    12b6:	ae e4       	ldi	r26, 0x4E	; 78
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ee e4       	ldi	r30, 0x4E	; 78
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8b 7f       	andi	r24, 0xFB	; 251
    12c2:	8c 93       	st	X, r24
    12c4:	2b c0       	rjmp	.+86     	; 0x131c <Timer1_voidInitPWM+0x120>
        case 8:   CLR_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    12c6:	ae e4       	ldi	r26, 0x4E	; 78
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ee e4       	ldi	r30, 0x4E	; 78
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
    12d4:	ae e4       	ldi	r26, 0x4E	; 78
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ee e4       	ldi	r30, 0x4E	; 78
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	8c 93       	st	X, r24
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8b 7f       	andi	r24, 0xFB	; 251
    12ee:	8c 93       	st	X, r24
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <Timer1_voidInitPWM+0x120>
        case 64:  SET_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    12f2:	ae e4       	ldi	r26, 0x4E	; 78
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ee e4       	ldi	r30, 0x4E	; 78
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	8c 93       	st	X, r24
    1300:	ae e4       	ldi	r26, 0x4E	; 78
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ee e4       	ldi	r30, 0x4E	; 78
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
    130e:	ae e4       	ldi	r26, 0x4E	; 78
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ee e4       	ldi	r30, 0x4E	; 78
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8b 7f       	andi	r24, 0xFB	; 251
    131a:	8c 93       	st	X, r24
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	65 e0       	ldi	r22, 0x05	; 5
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <Timer1_voidSetDuty>:

void Timer1_voidSetDuty(u8 channel, u16 duty)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <Timer1_voidSetDuty+0x6>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	7b 83       	std	Y+3, r23	; 0x03
    1346:	6a 83       	std	Y+2, r22	; 0x02
    if(channel == 0) // Channel A
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	88 23       	and	r24, r24
    134c:	39 f4       	brne	.+14     	; 0x135c <Timer1_voidSetDuty+0x26>
    {
        OCR1A = duty;
    134e:	ea e4       	ldi	r30, 0x4A	; 74
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	09 c0       	rjmp	.+18     	; 0x136e <Timer1_voidSetDuty+0x38>
    }
    else if(channel == 1) // Channel B
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	31 f4       	brne	.+12     	; 0x136e <Timer1_voidSetDuty+0x38>
    {
        OCR1B = duty;
    1362:	e8 e4       	ldi	r30, 0x48	; 72
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    }
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <Timer0_void_init>:
#include "../DIO_Interface.h"
#include "../Global_Interrupt_Enable/GIE_Interface.h"
#include "Timer0_Interface.h"
#include "Timer0_Register.h"

void Timer0_void_init(void){
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	Global_Interrupt_Enable();
    1382:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>
	//Waveform Generation Mode Mode normal
	CLR_BIT(TCCR0,6);
    1386:	a3 e5       	ldi	r26, 0x53	; 83
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e3 e5       	ldi	r30, 0x53	; 83
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 7b       	andi	r24, 0xBF	; 191
    1392:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
    1394:	a3 e5       	ldi	r26, 0x53	; 83
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e3 e5       	ldi	r30, 0x53	; 83
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	87 7f       	andi	r24, 0xF7	; 247
    13a0:	8c 93       	st	X, r24
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    13a2:	a3 e5       	ldi	r26, 0x53	; 83
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e3 e5       	ldi	r30, 0x53	; 83
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8e 7f       	andi	r24, 0xFE	; 254
    13ae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    13b0:	a3 e5       	ldi	r26, 0x53	; 83
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e3 e5       	ldi	r30, 0x53	; 83
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    13be:	a3 e5       	ldi	r26, 0x53	; 83
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e3 e5       	ldi	r30, 0x53	; 83
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8b 7f       	andi	r24, 0xFB	; 251
    13ca:	8c 93       	st	X, r24
	// Timer 0 counter
	SET_BIT(TIMSK,0);
    13cc:	a9 e5       	ldi	r26, 0x59	; 89
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 e5       	ldi	r30, 0x59	; 89
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <Timer0_void_CTC>:
void Timer0_void_CTC(){
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	Global_Interrupt_Enable();
    13e8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>
	//Waveform Generation Mode ctc
	CLR_BIT(TCCR0,6);
    13ec:	a3 e5       	ldi	r26, 0x53	; 83
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e3 e5       	ldi	r30, 0x53	; 83
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    1408:	a3 e5       	ldi	r26, 0x53	; 83
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e3 e5       	ldi	r30, 0x53	; 83
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    1416:	a3 e5       	ldi	r26, 0x53	; 83
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e3 e5       	ldi	r30, 0x53	; 83
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	82 60       	ori	r24, 0x02	; 2
    1422:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    1424:	a3 e5       	ldi	r26, 0x53	; 83
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e3 e5       	ldi	r30, 0x53	; 83
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8b 7f       	andi	r24, 0xFB	; 251
    1430:	8c 93       	st	X, r24
	OCR0=255;
    1432:	ec e5       	ldi	r30, 0x5C	; 92
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	80 83       	st	Z, r24
	// Timer 0 counter
	SET_BIT(TIMSK,1);
    143a:	a9 e5       	ldi	r26, 0x59	; 89
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e9 e5       	ldi	r30, 0x59	; 89
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	8c 93       	st	X, r24
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <Timer0_voidSet_CompareMatch_Value>:
void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8_local_OCR_Value;
    145a:	ec e5       	ldi	r30, 0x5C	; 92
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	80 83       	st	Z, r24
}
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer0_Init_PWM>:
void Timer0_Init_PWM(void){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 64       	ori	r24, 0x40	; 64
    147e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	88 60       	ori	r24, 0x08	; 8
    148c:	8c 93       	st	X, r24
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    148e:	a3 e5       	ldi	r26, 0x53	; 83
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e3 e5       	ldi	r30, 0x53	; 83
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    149c:	a3 e5       	ldi	r26, 0x53	; 83
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e3 e5       	ldi	r30, 0x53	; 83
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    14aa:	a3 e5       	ldi	r26, 0x53	; 83
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e3 e5       	ldi	r30, 0x53	; 83
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	8c 93       	st	X, r24
	// set and clear at top
	SET_BIT(TCCR0,4);
    14b8:	a3 e5       	ldi	r26, 0x53	; 83
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e3 e5       	ldi	r30, 0x53	; 83
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 61       	ori	r24, 0x10	; 16
    14c4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    14c6:	a3 e5       	ldi	r26, 0x53	; 83
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 62       	ori	r24, 0x20	; 32
    14d2:	8c 93       	st	X, r24
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	63 e0       	ldi	r22, 0x03	; 3
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <Timer0_Init_Phase_PWM>:
void Timer0_Init_Phase_PWM(void){
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
    14ec:	a3 e5       	ldi	r26, 0x53	; 83
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e3 e5       	ldi	r30, 0x53	; 83
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    14fa:	a3 e5       	ldi	r26, 0x53	; 83
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e5       	ldi	r30, 0x53	; 83
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	8c 93       	st	X, r24
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
    1508:	a3 e5       	ldi	r26, 0x53	; 83
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e5       	ldi	r30, 0x53	; 83
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8e 7f       	andi	r24, 0xFE	; 254
    1514:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    1516:	a3 e5       	ldi	r26, 0x53	; 83
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e3 e5       	ldi	r30, 0x53	; 83
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	82 60       	ori	r24, 0x02	; 2
    1522:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    1524:	a3 e5       	ldi	r26, 0x53	; 83
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e3 e5       	ldi	r30, 0x53	; 83
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8b 7f       	andi	r24, 0xFB	; 251
    1530:	8c 93       	st	X, r24
	// set and clear at top
	CLR_BIT(TCCR0,4);
    1532:	a3 e5       	ldi	r26, 0x53	; 83
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e3 e5       	ldi	r30, 0x53	; 83
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7e       	andi	r24, 0xEF	; 239
    153e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1540:	a3 e5       	ldi	r26, 0x53	; 83
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e3 e5       	ldi	r30, 0x53	; 83
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	8c 93       	st	X, r24
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	63 e0       	ldi	r22, 0x03	; 3
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <Timer0_voidInit_FastPWM>:

void Timer0_voidInit_FastPWM(void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    // Fast PWM Mode
    SET_BIT(TCCR0, 6);
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 64       	ori	r24, 0x40	; 64
    1572:	8c 93       	st	X, r24
    SET_BIT(TCCR0, 3);
    1574:	a3 e5       	ldi	r26, 0x53	; 83
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e3 e5       	ldi	r30, 0x53	; 83
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	8c 93       	st	X, r24

    // Non-Inverting Mode (Clear on compare match, set on TOP)
    CLR_BIT(TCCR0, 4);
    1582:	a3 e5       	ldi	r26, 0x53	; 83
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e3 e5       	ldi	r30, 0x53	; 83
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7e       	andi	r24, 0xEF	; 239
    158e:	8c 93       	st	X, r24
    SET_BIT(TCCR0, 5);
    1590:	a3 e5       	ldi	r26, 0x53	; 83
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e3 e5       	ldi	r30, 0x53	; 83
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	8c 93       	st	X, r24

    // Prescaler = 8
    CLR_BIT(TCCR0, 0);
    159e:	a3 e5       	ldi	r26, 0x53	; 83
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e3 e5       	ldi	r30, 0x53	; 83
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8e 7f       	andi	r24, 0xFE	; 254
    15aa:	8c 93       	st	X, r24
    SET_BIT(TCCR0, 1);
    15ac:	a3 e5       	ldi	r26, 0x53	; 83
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e3 e5       	ldi	r30, 0x53	; 83
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	82 60       	ori	r24, 0x02	; 2
    15b8:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, 2);
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8b 7f       	andi	r24, 0xFB	; 251
    15c6:	8c 93       	st	X, r24

    // Set OC0 (PB3) as output
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	63 e0       	ldi	r22, 0x03	; 3
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Timer0_voidSetDuty>:

void Timer0_voidSetDuty(u8 duty)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = duty;   // 0 → 0% speed, 255 → 100% speed
    15e4:	ec e5       	ldi	r30, 0x5C	; 92
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	80 83       	st	Z, r24
}
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <SPI_Master_Init_>:
#include "SPI_Interface.h"
#include "SPI_Register.h"


void SPI_Master_Init_(void)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_OUTPUT);		//MOSI
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	65 e0       	ldi	r22, 0x05	; 5
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN7,DIO_u8_OUTPUT);		//CLCK
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	67 e0       	ldi	r22, 0x07	; 7
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN4,DIO_u8_OUTPUT);		//SS
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	64 e0       	ldi	r22, 0x04	; 4
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN6,DIO_u8_INPUT);			//MISO
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	66 e0       	ldi	r22, 0x06	; 6
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); //SPR0=> FLAG /
    1624:	ed e2       	ldi	r30, 0x2D	; 45
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	81 e5       	ldi	r24, 0x51	; 81
    162a:	80 83       	st	Z, r24

}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <SPI_Master_Init_Interrupt>:




void SPI_Master_Init_Interrupt(void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62



}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <SPI_Slave_Init_>:




void SPI_Slave_Init_(void)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62

}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <SPI_Slave_Init_Interrupt>:



void SPI_Slave_Init_Interrupt(void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62

}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <SPI_Send_Receive_Data>:




u8 SPI_Send_Receive_Data(u8 data)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	0f 92       	push	r0
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data ;
    1668:	ef e2       	ldi	r30, 0x2F	; 47
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	80 83       	st	Z, r24

	while (GET_BIT(SPSR,SPIF)==0);
    1670:	ee e2       	ldi	r30, 0x2E	; 46
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	88 23       	and	r24, r24
    1678:	dc f7       	brge	.-10     	; 0x1670 <SPI_Send_Receive_Data+0x14>
	SET_BIT(SPSR,SPIF);
    167a:	ae e2       	ldi	r26, 0x2E	; 46
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e2       	ldi	r30, 0x2E	; 46
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	8c 93       	st	X, r24
	return SPDR;
    1688:	ef e2       	ldi	r30, 0x2F	; 47
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z

}
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <Global_Interrupt_Enable>:
#include "GIE_Interface.h"
#include "GIE_Register.h"


void Global_Interrupt_Enable(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, 7);
    169e:	af e5       	ldi	r26, 0x5F	; 95
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ef e5       	ldi	r30, 0x5F	; 95
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 68       	ori	r24, 0x80	; 128
    16aa:	8c 93       	st	X, r24

}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    16ba:	af e5       	ldi	r26, 0x5F	; 95
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e5       	ldi	r30, 0x5F	; 95
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	8c 93       	st	X, r24
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <EXT1_IN_Enable>:
#include"../DIO_Register.h"
#include "../Global_Interrupt_Enable/GIE_Interface.h"
#include "EXT_IN_Interface.h"
#include "EXT_IN_Register.h"

void EXT1_IN_Enable(void){
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    // Enable global interrupts
	Global_Interrupt_Enable();
    16d6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>

    /*** INT0 Falling Edge ***/
    MCUCR |= (1 << 1);
    16da:	a5 e5       	ldi	r26, 0x55	; 85
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e5       	ldi	r30, 0x55	; 85
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	82 60       	ori	r24, 0x02	; 2
    16e6:	8c 93       	st	X, r24
    MCUCR &= ~(1 << 0);
    16e8:	a5 e5       	ldi	r26, 0x55	; 85
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e5       	ldi	r30, 0x55	; 85
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8e 7f       	andi	r24, 0xFE	; 254
    16f4:	8c 93       	st	X, r24
    SET_BIT(MCUCR, 3);   // ISC01 = 1
    16f6:	a5 e5       	ldi	r26, 0x55	; 85
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e5       	ldi	r30, 0x55	; 85
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	88 60       	ori	r24, 0x08	; 8
    1702:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, 2);   // ISC00 = 0
    1704:	a5 e5       	ldi	r26, 0x55	; 85
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e5       	ldi	r30, 0x55	; 85
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	8c 93       	st	X, r24
    GICR |=1<<6;
    1712:	ab e5       	ldi	r26, 0x5B	; 91
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	eb e5       	ldi	r30, 0x5B	; 91
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 64       	ori	r24, 0x40	; 64
    171e:	8c 93       	st	X, r24
    GICR |=1<<7;
    1720:	ab e5       	ldi	r26, 0x5B	; 91
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e5       	ldi	r30, 0x5B	; 91
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 68       	ori	r24, 0x80	; 128
    172c:	8c 93       	st	X, r24
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	63 e0       	ldi	r22, 0x03	; 3
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	63 e0       	ldi	r22, 0x03	; 3
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <EXT2_IN_Enable>:
void EXT2_IN_Enable(void){}
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <ADC_voidInit>:




void ADC_voidInit 		(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(ADMUX , ADMUX_REFS1);	//AVCC & AREF external to 5v Mode
    175e:	a7 e2       	ldi	r26, 0x27	; 39
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e7 e2       	ldi	r30, 0x27	; 39
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	8c 93       	st	X, r24
	SET_BIT(ADMUX , ADMUX_REFS0);	//AVCC & AREF external to 5v Mode
    176c:	a7 e2       	ldi	r26, 0x27	; 39
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e2       	ldi	r30, 0x27	; 39
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 64       	ori	r24, 0x40	; 64
    1778:	8c 93       	st	X, r24

	CLR_BIT(ADMUX , ADMUX_ADLAR); //16-BIT MODE
    177a:	a7 e2       	ldi	r26, 0x27	; 39
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e7 e2       	ldi	r30, 0x27	; 39
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	8c 93       	st	X, r24

	SET_BIT(ADCSRA , ADCSRA_ADPS0);  //h2sm 3la 128
    1788:	a6 e2       	ldi	r26, 0x26	; 38
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e6 e2       	ldi	r30, 0x26	; 38
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	81 60       	ori	r24, 0x01	; 1
    1794:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);  //h2sm 3la 128
    1796:	a6 e2       	ldi	r26, 0x26	; 38
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e6 e2       	ldi	r30, 0x26	; 38
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	82 60       	ori	r24, 0x02	; 2
    17a2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS2);  //h2sm 3la 128
    17a4:	a6 e2       	ldi	r26, 0x26	; 38
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e6 e2       	ldi	r30, 0x26	; 38
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	8c 93       	st	X, r24


	SET_BIT(ADCSRA , ADCSRA_ADEN);
    17b2:	a6 e2       	ldi	r26, 0x26	; 38
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e6 e2       	ldi	r30, 0x26	; 38
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	80 68       	ori	r24, 0x80	; 128
    17be:	8c 93       	st	X, r24



}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <ADC_u16GetDigitalValue>:



u16 ADC_u16GetDigitalValue (u8 Copy_u8ChanelNb)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= (ADMUX_CHANNEL_NUM_MASK);
    17d2:	a7 e2       	ldi	r26, 0x27	; 39
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e7 e2       	ldi	r30, 0x27	; 39
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 7e       	andi	r24, 0xE0	; 224
    17de:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChanelNb ;
    17e0:	a7 e2       	ldi	r26, 0x27	; 39
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e7 e2       	ldi	r30, 0x27	; 39
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	90 81       	ld	r25, Z
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	89 2b       	or	r24, r25
    17ee:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADCSRA_ADSC);
    17f0:	a6 e2       	ldi	r26, 0x26	; 38
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e6 e2       	ldi	r30, 0x26	; 38
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    17fe:	e6 e2       	ldi	r30, 0x26	; 38
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	82 95       	swap	r24
    1806:	8f 70       	andi	r24, 0x0F	; 15
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	90 70       	andi	r25, 0x00	; 0
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	a9 f3       	breq	.-22     	; 0x17fe <ADC_u16GetDigitalValue+0x38>

	SET_BIT(ADCSRA,ADCSRA_ADIF);		//H5LEHA B 0 AKNY 3MLT CLEAR bs howa 3ashan interrupt f lma b3ml set akny b3ml clear
    1814:	a6 e2       	ldi	r26, 0x26	; 38
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e6 e2       	ldi	r30, 0x26	; 38
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	80 61       	ori	r24, 0x10	; 16
    1820:	8c 93       	st	X, r24

	return ADC;
    1822:	e4 e2       	ldi	r30, 0x24	; 36
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01

}
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <DIO_voidSetPortDirection>:
//    }
//  }
//}

void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <DIO_voidSetPortDirection+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_voidSetPortDirection+0x8>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3c 83       	std	Y+4, r19	; 0x04
    184a:	2b 83       	std	Y+3, r18	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	d1 f0       	breq	.+52     	; 0x188a <DIO_voidSetPortDirection+0x58>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <DIO_voidSetPortDirection+0x38>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <DIO_voidSetPortDirection+0x4e>
    1868:	1e c0       	rjmp	.+60     	; 0x18a6 <DIO_voidSetPortDirection+0x74>
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	3c 81       	ldd	r19, Y+4	; 0x04
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	81 f0       	breq	.+32     	; 0x1894 <DIO_voidSetPortDirection+0x62>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	81 f0       	breq	.+32     	; 0x189e <DIO_voidSetPortDirection+0x6c>
    187e:	13 c0       	rjmp	.+38     	; 0x18a6 <DIO_voidSetPortDirection+0x74>
	    {
	      case DIO_u8_PORTA:DDRA= Direction; break;
    1880:	ea e3       	ldi	r30, 0x3A	; 58
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
    1888:	0e c0       	rjmp	.+28     	; 0x18a6 <DIO_voidSetPortDirection+0x74>
	      case DIO_u8_PORTB:DDRB= Direction; break;
    188a:	e7 e3       	ldi	r30, 0x37	; 55
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <DIO_voidSetPortDirection+0x74>
	      case DIO_u8_PORTC:DDRC= Direction; break;
    1894:	e4 e3       	ldi	r30, 0x34	; 52
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	80 83       	st	Z, r24
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <DIO_voidSetPortDirection+0x74>
	      case DIO_u8_PORTD:DDRD= Direction; break;
    189e:	e1 e3       	ldi	r30, 0x31	; 49
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
	    }
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <DIO_voidSetPortValue+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_voidSetPortValue+0x8>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
    switch(u8PortId)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3c 83       	std	Y+4, r19	; 0x04
    18cc:	2b 83       	std	Y+3, r18	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	91 05       	cpc	r25, r1
    18d6:	d1 f0       	breq	.+52     	; 0x190c <DIO_voidSetPortValue+0x58>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	2c f4       	brge	.+10     	; 0x18ec <DIO_voidSetPortValue+0x38>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	61 f0       	breq	.+24     	; 0x1902 <DIO_voidSetPortValue+0x4e>
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <DIO_voidSetPortValue+0x74>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <DIO_voidSetPortValue+0x62>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	83 30       	cpi	r24, 0x03	; 3
    18fc:	91 05       	cpc	r25, r1
    18fe:	81 f0       	breq	.+32     	; 0x1920 <DIO_voidSetPortValue+0x6c>
    1900:	13 c0       	rjmp	.+38     	; 0x1928 <DIO_voidSetPortValue+0x74>
    {
      case DIO_u8_PORTA:PORTA=u8PortVal; break;
    1902:	eb e3       	ldi	r30, 0x3B	; 59
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 83       	st	Z, r24
    190a:	0e c0       	rjmp	.+28     	; 0x1928 <DIO_voidSetPortValue+0x74>
      case DIO_u8_PORTB:PORTB=u8PortVal; break;
    190c:	e8 e3       	ldi	r30, 0x38	; 56
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <DIO_voidSetPortValue+0x74>
      case DIO_u8_PORTC:PORTC=u8PortVal; break;
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 83       	st	Z, r24
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <DIO_voidSetPortValue+0x74>
      case DIO_u8_PORTD:PORTD=u8PortVal; break;
    1920:	e2 e3       	ldi	r30, 0x32	; 50
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	80 83       	st	Z, r24
    }
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	27 97       	sbiw	r28, 0x07	; 7
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
    194e:	4b 83       	std	Y+3, r20	; 0x03
  if(u8PinDirCopy == DIO_u8_OUTPUT )
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	09 f0       	breq	.+2      	; 0x1958 <DIO_voidSetPinDirection+0x22>
    1956:	6f c0       	rjmp	.+222    	; 0x1a36 <DIO_voidSetPinDirection+0x100>
  {
    switch(u8PortIdCopy)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3f 83       	std	Y+7, r19	; 0x07
    1960:	2e 83       	std	Y+6, r18	; 0x06
    1962:	8e 81       	ldd	r24, Y+6	; 0x06
    1964:	9f 81       	ldd	r25, Y+7	; 0x07
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	49 f1       	breq	.+82     	; 0x19be <DIO_voidSetPinDirection+0x88>
    196c:	2e 81       	ldd	r18, Y+6	; 0x06
    196e:	3f 81       	ldd	r19, Y+7	; 0x07
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_voidSetPinDirection+0x4a>
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_voidSetPinDirection+0x60>
    197e:	ce c0       	rjmp	.+412    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
    1980:	2e 81       	ldd	r18, Y+6	; 0x06
    1982:	3f 81       	ldd	r19, Y+7	; 0x07
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	71 f1       	breq	.+92     	; 0x19e6 <DIO_voidSetPinDirection+0xb0>
    198a:	8e 81       	ldd	r24, Y+6	; 0x06
    198c:	9f 81       	ldd	r25, Y+7	; 0x07
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	e9 f1       	breq	.+122    	; 0x1a0e <DIO_voidSetPinDirection+0xd8>
    1994:	c3 c0       	rjmp	.+390    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
        {
          case DIO_u8_PORTA:SET_BIT(DDRA,u8PinIdCopy); break;
    1996:	aa e3       	ldi	r26, 0x3A	; 58
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ea e3       	ldi	r30, 0x3A	; 58
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_voidSetPinDirection+0x7e>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_voidSetPinDirection+0x7a>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	af c0       	rjmp	.+350    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
          case DIO_u8_PORTB:SET_BIT(DDRB,u8PinIdCopy); break;
    19be:	a7 e3       	ldi	r26, 0x37	; 55
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e7 e3       	ldi	r30, 0x37	; 55
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_voidSetPinDirection+0xa6>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_voidSetPinDirection+0xa2>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	9b c0       	rjmp	.+310    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
          case DIO_u8_PORTC:SET_BIT(DDRC,u8PinIdCopy); break;
    19e6:	a4 e3       	ldi	r26, 0x34	; 52
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e4 e3       	ldi	r30, 0x34	; 52
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_voidSetPinDirection+0xce>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_voidSetPinDirection+0xca>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	87 c0       	rjmp	.+270    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
          case DIO_u8_PORTD:SET_BIT(DDRD,u8PinIdCopy); break;
    1a0e:	a1 e3       	ldi	r26, 0x31	; 49
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e1 e3       	ldi	r30, 0x31	; 49
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_voidSetPinDirection+0xf6>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_voidSetPinDirection+0xf2>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	73 c0       	rjmp	.+230    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
        }
  }
  else
    {
      switch(u8PortIdCopy)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 83       	std	Y+5, r19	; 0x05
    1a3e:	2c 83       	std	Y+4, r18	; 0x04
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	59 f1       	breq	.+86     	; 0x1aa0 <DIO_voidSetPinDirection+0x16a>
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <DIO_voidSetPinDirection+0x128>
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f0       	breq	.+26     	; 0x1a76 <DIO_voidSetPinDirection+0x140>
    1a5c:	5f c0       	rjmp	.+190    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
    1a5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a60:	3d 81       	ldd	r19, Y+5	; 0x05
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	89 f1       	breq	.+98     	; 0x1aca <DIO_voidSetPinDirection+0x194>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <DIO_voidSetPinDirection+0x13e>
    1a72:	40 c0       	rjmp	.+128    	; 0x1af4 <DIO_voidSetPinDirection+0x1be>
    1a74:	53 c0       	rjmp	.+166    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
      {
        case DIO_u8_PORTA:CLR_BIT(DDRA,u8PinIdCopy); break;
    1a76:	aa e3       	ldi	r26, 0x3A	; 58
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ea e3       	ldi	r30, 0x3A	; 58
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_voidSetPinDirection+0x15e>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_voidSetPinDirection+0x15a>
    1a98:	80 95       	com	r24
    1a9a:	84 23       	and	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	3e c0       	rjmp	.+124    	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
        case DIO_u8_PORTB:CLR_BIT(DDRB,u8PinIdCopy); break;
    1aa0:	a7 e3       	ldi	r26, 0x37	; 55
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e7 e3       	ldi	r30, 0x37	; 55
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_voidSetPinDirection+0x188>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <DIO_voidSetPinDirection+0x184>
    1ac2:	80 95       	com	r24
    1ac4:	84 23       	and	r24, r20
    1ac6:	8c 93       	st	X, r24
    1ac8:	29 c0       	rjmp	.+82     	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
        case DIO_u8_PORTC:CLR_BIT(DDRC,u8PinIdCopy); break;
    1aca:	a4 e3       	ldi	r26, 0x34	; 52
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e4 e3       	ldi	r30, 0x34	; 52
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_voidSetPinDirection+0x1b2>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_voidSetPinDirection+0x1ae>
    1aec:	80 95       	com	r24
    1aee:	84 23       	and	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <DIO_voidSetPinDirection+0x1e6>
        case DIO_u8_PORTD:CLR_BIT(DDRD,u8PinIdCopy); break;
    1af4:	a1 e3       	ldi	r26, 0x31	; 49
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_voidSetPinDirection+0x1dc>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_voidSetPinDirection+0x1d8>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
      }
    }

}
    1b1c:	27 96       	adiw	r28, 0x07	; 7
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	27 97       	sbiw	r28, 0x07	; 7
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	6a 83       	std	Y+2, r22	; 0x02
    1b46:	4b 83       	std	Y+3, r20	; 0x03
  if(u8PinValCopy == DIO_u8_HIGH)
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <DIO_voidSetPinValue+0x22>
    1b4e:	6f c0       	rjmp	.+222    	; 0x1c2e <DIO_voidSetPinValue+0x100>
    {
      switch(u8PortIdCopy)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3f 83       	std	Y+7, r19	; 0x07
    1b58:	2e 83       	std	Y+6, r18	; 0x06
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	49 f1       	breq	.+82     	; 0x1bb6 <DIO_voidSetPinValue+0x88>
    1b64:	2e 81       	ldd	r18, Y+6	; 0x06
    1b66:	3f 81       	ldd	r19, Y+7	; 0x07
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <DIO_voidSetPinValue+0x4a>
    1b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b70:	9f 81       	ldd	r25, Y+7	; 0x07
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <DIO_voidSetPinValue+0x60>
    1b76:	ce c0       	rjmp	.+412    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
    1b78:	2e 81       	ldd	r18, Y+6	; 0x06
    1b7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	71 f1       	breq	.+92     	; 0x1bde <DIO_voidSetPinValue+0xb0>
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	91 05       	cpc	r25, r1
    1b8a:	e9 f1       	breq	.+122    	; 0x1c06 <DIO_voidSetPinValue+0xd8>
    1b8c:	c3 c0       	rjmp	.+390    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
          {
            case DIO_u8_PORTA:SET_BIT(PORTA,u8PinIdCopy); break;
    1b8e:	ab e3       	ldi	r26, 0x3B	; 59
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	eb e3       	ldi	r30, 0x3B	; 59
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_voidSetPinValue+0x7e>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_voidSetPinValue+0x7a>
    1bb0:	84 2b       	or	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	af c0       	rjmp	.+350    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
            case DIO_u8_PORTB:SET_BIT(PORTB,u8PinIdCopy); break;
    1bb6:	a8 e3       	ldi	r26, 0x38	; 56
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e8 e3       	ldi	r30, 0x38	; 56
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_voidSetPinValue+0xa6>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_voidSetPinValue+0xa2>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	9b c0       	rjmp	.+310    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
            case DIO_u8_PORTC:SET_BIT(PORTC,u8PinIdCopy); break;
    1bde:	a5 e3       	ldi	r26, 0x35	; 53
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e3       	ldi	r30, 0x35	; 53
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_voidSetPinValue+0xce>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_voidSetPinValue+0xca>
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	87 c0       	rjmp	.+270    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
            case DIO_u8_PORTD:SET_BIT(PORTD,u8PinIdCopy); break;
    1c06:	a2 e3       	ldi	r26, 0x32	; 50
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e2 e3       	ldi	r30, 0x32	; 50
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_voidSetPinValue+0xf6>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_voidSetPinValue+0xf2>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	73 c0       	rjmp	.+230    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
          }
    }
    else
      {
        switch(u8PortIdCopy)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3d 83       	std	Y+5, r19	; 0x05
    1c36:	2c 83       	std	Y+4, r18	; 0x04
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	59 f1       	breq	.+86     	; 0x1c98 <DIO_voidSetPinValue+0x16a>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <DIO_voidSetPinValue+0x128>
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	69 f0       	breq	.+26     	; 0x1c6e <DIO_voidSetPinValue+0x140>
    1c54:	5f c0       	rjmp	.+190    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	89 f1       	breq	.+98     	; 0x1cc2 <DIO_voidSetPinValue+0x194>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <DIO_voidSetPinValue+0x13e>
    1c6a:	40 c0       	rjmp	.+128    	; 0x1cec <DIO_voidSetPinValue+0x1be>
    1c6c:	53 c0       	rjmp	.+166    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
        {
          case DIO_u8_PORTA:CLR_BIT(PORTA,u8PinIdCopy); break;
    1c6e:	ab e3       	ldi	r26, 0x3B	; 59
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_voidSetPinValue+0x15e>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_voidSetPinValue+0x15a>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	3e c0       	rjmp	.+124    	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
          case DIO_u8_PORTB:CLR_BIT(PORTB,u8PinIdCopy); break;
    1c98:	a8 e3       	ldi	r26, 0x38	; 56
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e8 e3       	ldi	r30, 0x38	; 56
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_voidSetPinValue+0x188>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_voidSetPinValue+0x184>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	29 c0       	rjmp	.+82     	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
          case DIO_u8_PORTC:CLR_BIT(PORTC,u8PinIdCopy); break;
    1cc2:	a5 e3       	ldi	r26, 0x35	; 53
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e3       	ldi	r30, 0x35	; 53
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_voidSetPinValue+0x1b2>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_voidSetPinValue+0x1ae>
    1ce4:	80 95       	com	r24
    1ce6:	84 23       	and	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <DIO_voidSetPinValue+0x1e6>
          case DIO_u8_PORTD:CLR_BIT(PORTD,u8PinIdCopy); break;
    1cec:	a2 e3       	ldi	r26, 0x32	; 50
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e2 e3       	ldi	r30, 0x32	; 50
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <DIO_voidSetPinValue+0x1dc>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <DIO_voidSetPinValue+0x1d8>
    1d0e:	80 95       	com	r24
    1d10:	84 23       	and	r24, r20
    1d12:	8c 93       	st	X, r24
        }
      }
}
    1d14:	27 96       	adiw	r28, 0x07	; 7
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <DIO_u8GetPinValue>:
u8   DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <DIO_u8GetPinValue+0x6>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <DIO_u8GetPinValue+0x8>
    1d2e:	0f 92       	push	r0
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Pin_Value =0;
    1d38:	19 82       	std	Y+1, r1	; 0x01
	switch (u8PortIdCopy)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3d 83       	std	Y+5, r19	; 0x05
    1d42:	2c 83       	std	Y+4, r18	; 0x04
    1d44:	4c 81       	ldd	r20, Y+4	; 0x04
    1d46:	5d 81       	ldd	r21, Y+5	; 0x05
    1d48:	41 30       	cpi	r20, 0x01	; 1
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	41 f1       	breq	.+80     	; 0x1d9e <DIO_u8GetPinValue+0x78>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	91 05       	cpc	r25, r1
    1d56:	34 f4       	brge	.+12     	; 0x1d64 <DIO_u8GetPinValue+0x3e>
    1d58:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5c:	21 15       	cp	r18, r1
    1d5e:	31 05       	cpc	r19, r1
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <DIO_u8GetPinValue+0x54>
    1d62:	52 c0       	rjmp	.+164    	; 0x1e08 <DIO_u8GetPinValue+0xe2>
    1d64:	4c 81       	ldd	r20, Y+4	; 0x04
    1d66:	5d 81       	ldd	r21, Y+5	; 0x05
    1d68:	42 30       	cpi	r20, 0x02	; 2
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	51 f1       	breq	.+84     	; 0x1dc2 <DIO_u8GetPinValue+0x9c>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	b9 f1       	breq	.+110    	; 0x1de6 <DIO_u8GetPinValue+0xc0>
    1d78:	47 c0       	rjmp	.+142    	; 0x1e08 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8_PORTA : Pin_Value = GET_BIT(PINA,u8PortIdCopy);
    1d7a:	e9 e3       	ldi	r30, 0x39	; 57
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8GetPinValue+0x6c>
    1d8e:	55 95       	asr	r21
    1d90:	47 95       	ror	r20
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8GetPinValue+0x68>
    1d96:	ca 01       	movw	r24, r20
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	35 c0       	rjmp	.+106    	; 0x1e08 <DIO_u8GetPinValue+0xe2>
	break;
	case DIO_u8_PORTB : Pin_Value = GET_BIT(PINB,u8PortIdCopy);
    1d9e:	e6 e3       	ldi	r30, 0x36	; 54
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a9 01       	movw	r20, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_u8GetPinValue+0x90>
    1db2:	55 95       	asr	r21
    1db4:	47 95       	ror	r20
    1db6:	8a 95       	dec	r24
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <DIO_u8GetPinValue+0x8c>
    1dba:	ca 01       	movw	r24, r20
    1dbc:	81 70       	andi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <DIO_u8GetPinValue+0xe2>
	break;
	case DIO_u8_PORTC : Pin_Value = GET_BIT(PINC,u8PortIdCopy);
    1dc2:	e3 e3       	ldi	r30, 0x33	; 51
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a9 01       	movw	r20, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <DIO_u8GetPinValue+0xb4>
    1dd6:	55 95       	asr	r21
    1dd8:	47 95       	ror	r20
    1dda:	8a 95       	dec	r24
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <DIO_u8GetPinValue+0xb0>
    1dde:	ca 01       	movw	r24, r20
    1de0:	81 70       	andi	r24, 0x01	; 1
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <DIO_u8GetPinValue+0xe2>
	break;
	case DIO_u8_PORTD : Pin_Value = GET_BIT(PIND,u8PortIdCopy);
    1de6:	e0 e3       	ldi	r30, 0x30	; 48
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a9 01       	movw	r20, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_u8GetPinValue+0xd8>
    1dfa:	55 95       	asr	r21
    1dfc:	47 95       	ror	r20
    1dfe:	8a 95       	dec	r24
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_u8GetPinValue+0xd4>
    1e02:	ca 01       	movw	r24, r20
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
	break;


	}

	return Pin_Value;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <__vector_9>:
#include <avr/interrupt.h>

static volatile u16 TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    TimerOverflow++;
    1e30:	80 91 9d 01 	lds	r24, 0x019D
    1e34:	90 91 9e 01 	lds	r25, 0x019E
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	90 93 9e 01 	sts	0x019E, r25
    1e3e:	80 93 9d 01 	sts	0x019D, r24
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <Ultrasonic_Init>:

void Ultrasonic_Init(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    /* Trigger pin output */
    DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_OUTPUT);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

    /* Echo pin input (ICP1 = PD6) */
    DIO_voidSetPinDirection(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, DIO_u8_INPUT);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

    /* Enable global interrupts */
    Global_Interrupt_Enable();
    1e70:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Global_Interrupt_Enable>

    /* Timer1 Normal mode + overflow interrupt */
    Timer1_voidInit_Normal();
    1e74:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Timer1_voidInit_Normal>
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <Ultrasonic_GetDistance>:

f32 Ultrasonic_GetDistance(void)
{
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	a0 97       	sbiw	r28, 0x20	; 32
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    u32 count;
    f32 distance;

    /* Send 10us pulse on Trigger */
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_HIGH);
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e2       	ldi	r26, 0x20	; 32
    1eaa:	b1 e4       	ldi	r27, 0x41	; 65
    1eac:	8d 8b       	std	Y+21, r24	; 0x15
    1eae:	9e 8b       	std	Y+22, r25	; 0x16
    1eb0:	af 8b       	std	Y+23, r26	; 0x17
    1eb2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	2b ea       	ldi	r18, 0xAB	; 171
    1ebe:	3a ea       	ldi	r19, 0xAA	; 170
    1ec0:	4a e2       	ldi	r20, 0x2A	; 42
    1ec2:	50 e4       	ldi	r21, 0x40	; 64
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	89 8b       	std	Y+17, r24	; 0x11
    1ece:	9a 8b       	std	Y+18, r25	; 0x12
    1ed0:	ab 8b       	std	Y+19, r26	; 0x13
    1ed2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ed4:	69 89       	ldd	r22, Y+17	; 0x11
    1ed6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eda:	9c 89       	ldd	r25, Y+20	; 0x14
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	1c f4       	brge	.+6      	; 0x1ef2 <Ultrasonic_GetDistance+0x74>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	88 8b       	std	Y+16, r24	; 0x10
    1ef0:	91 c0       	rjmp	.+290    	; 0x2014 <Ultrasonic_GetDistance+0x196>
	else if (__tmp > 255)
    1ef2:	69 89       	ldd	r22, Y+17	; 0x11
    1ef4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	53 e4       	ldi	r21, 0x43	; 67
    1f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <Ultrasonic_GetDistance+0x8e>
    1f0a:	7b c0       	rjmp	.+246    	; 0x2002 <Ultrasonic_GetDistance+0x184>
	{
		_delay_ms(__us / 1000.0);
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a e7       	ldi	r20, 0x7A	; 122
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8c 87       	std	Y+12, r24	; 0x0c
    1f26:	9d 87       	std	Y+13, r25	; 0x0d
    1f28:	ae 87       	std	Y+14, r26	; 0x0e
    1f2a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a ef       	ldi	r20, 0xFA	; 250
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	88 87       	std	Y+8, r24	; 0x08
    1f46:	99 87       	std	Y+9, r25	; 0x09
    1f48:	aa 87       	std	Y+10, r26	; 0x0a
    1f4a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f4c:	68 85       	ldd	r22, Y+8	; 0x08
    1f4e:	79 85       	ldd	r23, Y+9	; 0x09
    1f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <Ultrasonic_GetDistance+0xf0>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9f 83       	std	Y+7, r25	; 0x07
    1f6a:	8e 83       	std	Y+6, r24	; 0x06
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <Ultrasonic_GetDistance+0x16e>
	else if (__tmp > 65535)
    1f6e:	68 85       	ldd	r22, Y+8	; 0x08
    1f70:	79 85       	ldd	r23, Y+9	; 0x09
    1f72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <Ultrasonic_GetDistance+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f88:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9f 83       	std	Y+7, r25	; 0x07
    1fac:	8e 83       	std	Y+6, r24	; 0x06
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <Ultrasonic_GetDistance+0x150>
    1fb0:	88 ec       	ldi	r24, 0xC8	; 200
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9d 83       	std	Y+5, r25	; 0x05
    1fb6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <Ultrasonic_GetDistance+0x13e>
    1fc0:	9d 83       	std	Y+5, r25	; 0x05
    1fc2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9f 83       	std	Y+7, r25	; 0x07
    1fcc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <Ultrasonic_GetDistance+0x132>
    1fd6:	24 c0       	rjmp	.+72     	; 0x2020 <Ultrasonic_GetDistance+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	68 85       	ldd	r22, Y+8	; 0x08
    1fda:	79 85       	ldd	r23, Y+9	; 0x09
    1fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9f 83       	std	Y+7, r25	; 0x07
    1fea:	8e 83       	std	Y+6, r24	; 0x06
    1fec:	8e 81       	ldd	r24, Y+6	; 0x06
    1fee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff0:	9b 83       	std	Y+3, r25	; 0x03
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <Ultrasonic_GetDistance+0x17a>
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <Ultrasonic_GetDistance+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2002:	69 89       	ldd	r22, Y+17	; 0x11
    2004:	7a 89       	ldd	r23, Y+18	; 0x12
    2006:	8b 89       	ldd	r24, Y+19	; 0x13
    2008:	9c 89       	ldd	r25, Y+20	; 0x14
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	88 8b       	std	Y+16, r24	; 0x10
    2014:	88 89       	ldd	r24, Y+16	; 0x10
    2016:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	8a 95       	dec	r24
    201c:	f1 f7       	brne	.-4      	; 0x201a <Ultrasonic_GetDistance+0x19c>
    201e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_LOW);
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>

    /* Wait for rising edge on ICP1 */
    TCCR1B = (1 << ICES1) | (1 << CS10);  // rising edge, no prescaler
    202a:	ee e4       	ldi	r30, 0x4E	; 78
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	81 e4       	ldi	r24, 0x41	; 65
    2030:	80 83       	st	Z, r24
    TIFR = (1 << ICF1) | (1 << TOV1);     // clear flags
    2032:	e8 e5       	ldi	r30, 0x58	; 88
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	84 e2       	ldi	r24, 0x24	; 36
    2038:	80 83       	st	Z, r24
    while ((TIFR & (1 << ICF1)) == 0);
    203a:	e8 e5       	ldi	r30, 0x58	; 88
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	80 72       	andi	r24, 0x20	; 32
    2046:	90 70       	andi	r25, 0x00	; 0
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	b9 f3       	breq	.-18     	; 0x203a <Ultrasonic_GetDistance+0x1bc>

    Timer1_voidSetTCNT(0);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timer1_voidSetTCNT>
    TCCR1B = (0 << ICES1) | (1 << CS10);  // falling edge, no prescaler
    2054:	ee e4       	ldi	r30, 0x4E	; 78
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	80 83       	st	Z, r24
    TIFR = (1 << ICF1) | (1 << TOV1);
    205c:	e8 e5       	ldi	r30, 0x58	; 88
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	84 e2       	ldi	r24, 0x24	; 36
    2062:	80 83       	st	Z, r24
    TimerOverflow = 0;
    2064:	10 92 9e 01 	sts	0x019E, r1
    2068:	10 92 9d 01 	sts	0x019D, r1

    /* Wait for falling edge */
    while ((TIFR & (1 << ICF1)) == 0);
    206c:	e8 e5       	ldi	r30, 0x58	; 88
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	80 72       	andi	r24, 0x20	; 32
    2078:	90 70       	andi	r25, 0x00	; 0
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	b9 f3       	breq	.-18     	; 0x206c <Ultrasonic_GetDistance+0x1ee>

    count = ICR1 + (65535UL * TimerOverflow);
    207e:	e6 e4       	ldi	r30, 0x46	; 70
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	7c 01       	movw	r14, r24
    2088:	00 e0       	ldi	r16, 0x00	; 0
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	80 91 9d 01 	lds	r24, 0x019D
    2090:	90 91 9e 01 	lds	r25, 0x019E
    2094:	cc 01       	movw	r24, r24
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	2f ef       	ldi	r18, 0xFF	; 255
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsi3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8e 0d       	add	r24, r14
    20b0:	9f 1d       	adc	r25, r15
    20b2:	a0 1f       	adc	r26, r16
    20b4:	b1 1f       	adc	r27, r17
    20b6:	8d 8f       	std	Y+29, r24	; 0x1d
    20b8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ba:	af 8f       	std	Y+31, r26	; 0x1f
    20bc:	b8 a3       	std	Y+32, r27	; 0x20

    /* Convert count to distance (cm) */
    distance = (f32)count / 466.47f;
    20be:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20c0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c4:	98 a1       	ldd	r25, Y+32	; 0x20
    20c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	29 e2       	ldi	r18, 0x29	; 41
    20d4:	3c e3       	ldi	r19, 0x3C	; 60
    20d6:	49 ee       	ldi	r20, 0xE9	; 233
    20d8:	53 e4       	ldi	r21, 0x43	; 67
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	89 8f       	std	Y+25, r24	; 0x19
    20e4:	9a 8f       	std	Y+26, r25	; 0x1a
    20e6:	ab 8f       	std	Y+27, r26	; 0x1b
    20e8:	bc 8f       	std	Y+28, r27	; 0x1c

    return distance;
    20ea:	89 8d       	ldd	r24, Y+25	; 0x19
    20ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20ee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    20f0:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	a0 96       	adiw	r28, 0x20	; 32
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	08 95       	ret

00002110 <STEPPER_voidInit>:
#include "Stepper_interface.h"
#include "Stepper_config.h"


void STEPPER_voidInit(void)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection( STEPPER_u8_COIL_PORT,  STEPPER_u8_CIOL_Blue,    DIO_u8_OUTPUT);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( STEPPER_u8_COIL_PORT,  STEPPER_u8_CIOL_Pink,    DIO_u8_OUTPUT);
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( STEPPER_u8_COIL_PORT,  STEPPER_u8_CIOL_Yellow,	 DIO_u8_OUTPUT);
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( STEPPER_u8_COIL_PORT,  STEPPER_u8_CIOL_Orange,  DIO_u8_OUTPUT);
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	63 e0       	ldi	r22, 0x03	; 3
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <STEPPER_voidRotateACW>:



void STEPPER_voidRotateACW(void)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	e8 97       	sbiw	r28, 0x38	; 56
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,    DIO_u8_HIGH);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,    DIO_u8_LOW);
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,  DIO_u8_LOW);
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	62 e0       	ldi	r22, 0x02	; 2
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,  DIO_u8_LOW);
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	63 e0       	ldi	r22, 0x03	; 3
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 ea       	ldi	r26, 0xA0	; 160
    2188:	b0 e4       	ldi	r27, 0x40	; 64
    218a:	8d ab       	std	Y+53, r24	; 0x35
    218c:	9e ab       	std	Y+54, r25	; 0x36
    218e:	af ab       	std	Y+55, r26	; 0x37
    2190:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6d a9       	ldd	r22, Y+53	; 0x35
    2194:	7e a9       	ldd	r23, Y+54	; 0x36
    2196:	8f a9       	ldd	r24, Y+55	; 0x37
    2198:	98 ad       	ldd	r25, Y+56	; 0x38
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	89 ab       	std	Y+49, r24	; 0x31
    21ac:	9a ab       	std	Y+50, r25	; 0x32
    21ae:	ab ab       	std	Y+51, r26	; 0x33
    21b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <STEPPER_voidRotateACW+0x8e>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <STEPPER_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <STEPPER_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6d a9       	ldd	r22, Y+53	; 0x35
    21ee:	7e a9       	ldd	r23, Y+54	; 0x36
    21f0:	8f a9       	ldd	r24, Y+55	; 0x37
    21f2:	98 ad       	ldd	r25, Y+56	; 0x38
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	98 ab       	std	Y+48, r25	; 0x30
    2212:	8f a7       	std	Y+47, r24	; 0x2f
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <STEPPER_voidRotateACW+0xee>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e a7       	std	Y+46, r25	; 0x2e
    221c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    221e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2220:	9e a5       	ldd	r25, Y+46	; 0x2e
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <STEPPER_voidRotateACW+0xdc>
    2226:	9e a7       	std	Y+46, r25	; 0x2e
    2228:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8f a5       	ldd	r24, Y+47	; 0x2f
    222c:	98 a9       	ldd	r25, Y+48	; 0x30
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <STEPPER_voidRotateACW+0xd0>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <STEPPER_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	9c a7       	std	Y+44, r25	; 0x2c
    2258:	8b a7       	std	Y+43, r24	; 0x2b
    225a:	8b a5       	ldd	r24, Y+43	; 0x2b
    225c:	9c a5       	ldd	r25, Y+44	; 0x2c
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <STEPPER_voidRotateACW+0x118>
    2262:	9c a7       	std	Y+44, r25	; 0x2c
    2264:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,    DIO_u8_LOW);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,    DIO_u8_HIGH);
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,  DIO_u8_LOW);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,  DIO_u8_LOW);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	63 e0       	ldi	r22, 0x03	; 3
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 ea       	ldi	r26, 0xA0	; 160
    2294:	b0 e4       	ldi	r27, 0x40	; 64
    2296:	8f a3       	std	Y+39, r24	; 0x27
    2298:	98 a7       	std	Y+40, r25	; 0x28
    229a:	a9 a7       	std	Y+41, r26	; 0x29
    229c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6f a1       	ldd	r22, Y+39	; 0x27
    22a0:	78 a5       	ldd	r23, Y+40	; 0x28
    22a2:	89 a5       	ldd	r24, Y+41	; 0x29
    22a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a ef       	ldi	r20, 0xFA	; 250
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8b a3       	std	Y+35, r24	; 0x23
    22b8:	9c a3       	std	Y+36, r25	; 0x24
    22ba:	ad a3       	std	Y+37, r26	; 0x25
    22bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22be:	6b a1       	ldd	r22, Y+35	; 0x23
    22c0:	7c a1       	ldd	r23, Y+36	; 0x24
    22c2:	8d a1       	ldd	r24, Y+37	; 0x25
    22c4:	9e a1       	ldd	r25, Y+38	; 0x26
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <STEPPER_voidRotateACW+0x19a>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	3f c0       	rjmp	.+126    	; 0x235e <STEPPER_voidRotateACW+0x218>
	else if (__tmp > 65535)
    22e0:	6b a1       	ldd	r22, Y+35	; 0x23
    22e2:	7c a1       	ldd	r23, Y+36	; 0x24
    22e4:	8d a1       	ldd	r24, Y+37	; 0x25
    22e6:	9e a1       	ldd	r25, Y+38	; 0x26
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <STEPPER_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6f a1       	ldd	r22, Y+39	; 0x27
    22fa:	78 a5       	ldd	r23, Y+40	; 0x28
    22fc:	89 a5       	ldd	r24, Y+41	; 0x29
    22fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9a a3       	std	Y+34, r25	; 0x22
    231e:	89 a3       	std	Y+33, r24	; 0x21
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <STEPPER_voidRotateACW+0x1fa>
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	98 a3       	std	Y+32, r25	; 0x20
    2328:	8f 8f       	std	Y+31, r24	; 0x1f
    232a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232c:	98 a1       	ldd	r25, Y+32	; 0x20
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <STEPPER_voidRotateACW+0x1e8>
    2332:	98 a3       	std	Y+32, r25	; 0x20
    2334:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	89 a1       	ldd	r24, Y+33	; 0x21
    2338:	9a a1       	ldd	r25, Y+34	; 0x22
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <STEPPER_voidRotateACW+0x1dc>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <STEPPER_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6b a1       	ldd	r22, Y+35	; 0x23
    234c:	7c a1       	ldd	r23, Y+36	; 0x24
    234e:	8d a1       	ldd	r24, Y+37	; 0x25
    2350:	9e a1       	ldd	r25, Y+38	; 0x26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9a a3       	std	Y+34, r25	; 0x22
    235c:	89 a3       	std	Y+33, r24	; 0x21
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	9e 8f       	std	Y+30, r25	; 0x1e
    2364:	8d 8f       	std	Y+29, r24	; 0x1d
    2366:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2368:	9e 8d       	ldd	r25, Y+30	; 0x1e
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <STEPPER_voidRotateACW+0x224>
    236e:	9e 8f       	std	Y+30, r25	; 0x1e
    2370:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,    DIO_u8_LOW);
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,    DIO_u8_LOW);
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,  DIO_u8_HIGH);
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,  DIO_u8_LOW);
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	63 e0       	ldi	r22, 0x03	; 3
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 ea       	ldi	r26, 0xA0	; 160
    23a0:	b0 e4       	ldi	r27, 0x40	; 64
    23a2:	89 8f       	std	Y+25, r24	; 0x19
    23a4:	9a 8f       	std	Y+26, r25	; 0x1a
    23a6:	ab 8f       	std	Y+27, r26	; 0x1b
    23a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	69 8d       	ldd	r22, Y+25	; 0x19
    23ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a ef       	ldi	r20, 0xFA	; 250
    23b8:	54 e4       	ldi	r21, 0x44	; 68
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8d 8b       	std	Y+21, r24	; 0x15
    23c4:	9e 8b       	std	Y+22, r25	; 0x16
    23c6:	af 8b       	std	Y+23, r26	; 0x17
    23c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ca:	6d 89       	ldd	r22, Y+21	; 0x15
    23cc:	7e 89       	ldd	r23, Y+22	; 0x16
    23ce:	8f 89       	ldd	r24, Y+23	; 0x17
    23d0:	98 8d       	ldd	r25, Y+24	; 0x18
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <STEPPER_voidRotateACW+0x2a6>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <STEPPER_voidRotateACW+0x324>
	else if (__tmp > 65535)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <STEPPER_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	69 8d       	ldd	r22, Y+25	; 0x19
    2406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
    242c:	0f c0       	rjmp	.+30     	; 0x244c <STEPPER_voidRotateACW+0x306>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
    2436:	89 89       	ldd	r24, Y+17	; 0x11
    2438:	9a 89       	ldd	r25, Y+18	; 0x12
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <STEPPER_voidRotateACW+0x2f4>
    243e:	9a 8b       	std	Y+18, r25	; 0x12
    2440:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <STEPPER_voidRotateACW+0x2e8>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <STEPPER_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	98 89       	ldd	r25, Y+16	; 0x10
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <STEPPER_voidRotateACW+0x330>
    247a:	98 8b       	std	Y+16, r25	; 0x10
    247c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);


	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,    DIO_u8_LOW);
    247e:	83 e0       	ldi	r24, 0x03	; 3
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,    DIO_u8_LOW);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,  DIO_u8_LOW);
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	62 e0       	ldi	r22, 0x02	; 2
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,  DIO_u8_HIGH);
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	63 e0       	ldi	r22, 0x03	; 3
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 ea       	ldi	r26, 0xA0	; 160
    24ac:	b0 e4       	ldi	r27, 0x40	; 64
    24ae:	8b 87       	std	Y+11, r24	; 0x0b
    24b0:	9c 87       	std	Y+12, r25	; 0x0c
    24b2:	ad 87       	std	Y+13, r26	; 0x0d
    24b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8f 83       	std	Y+7, r24	; 0x07
    24d0:	98 87       	std	Y+8, r25	; 0x08
    24d2:	a9 87       	std	Y+9, r26	; 0x09
    24d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d6:	6f 81       	ldd	r22, Y+7	; 0x07
    24d8:	78 85       	ldd	r23, Y+8	; 0x08
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <STEPPER_voidRotateACW+0x3b2>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <STEPPER_voidRotateACW+0x430>
	else if (__tmp > 65535)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <STEPPER_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6b 85       	ldd	r22, Y+11	; 0x0b
    2512:	7c 85       	ldd	r23, Y+12	; 0x0c
    2514:	8d 85       	ldd	r24, Y+13	; 0x0d
    2516:	9e 85       	ldd	r25, Y+14	; 0x0e
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <STEPPER_voidRotateACW+0x412>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <STEPPER_voidRotateACW+0x400>
    254a:	9c 83       	std	Y+4, r25	; 0x04
    254c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <STEPPER_voidRotateACW+0x3f4>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <STEPPER_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <STEPPER_voidRotateACW+0x43c>
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    258a:	e8 96       	adiw	r28, 0x38	; 56
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <STEPPER_voidRotateCW>:



void STEPPER_voidRotateCW(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	e8 97       	sbiw	r28, 0x38	; 56
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,    DIO_u8_HIGH);
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	63 e0       	ldi	r22, 0x03	; 3
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,    DIO_u8_LOW);
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,      DIO_u8_LOW);
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,      DIO_u8_LOW);
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 ea       	ldi	r26, 0xA0	; 160
    25de:	b0 e4       	ldi	r27, 0x40	; 64
    25e0:	8d ab       	std	Y+53, r24	; 0x35
    25e2:	9e ab       	std	Y+54, r25	; 0x36
    25e4:	af ab       	std	Y+55, r26	; 0x37
    25e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6d a9       	ldd	r22, Y+53	; 0x35
    25ea:	7e a9       	ldd	r23, Y+54	; 0x36
    25ec:	8f a9       	ldd	r24, Y+55	; 0x37
    25ee:	98 ad       	ldd	r25, Y+56	; 0x38
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	89 ab       	std	Y+49, r24	; 0x31
    2602:	9a ab       	std	Y+50, r25	; 0x32
    2604:	ab ab       	std	Y+51, r26	; 0x33
    2606:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2608:	69 a9       	ldd	r22, Y+49	; 0x31
    260a:	7a a9       	ldd	r23, Y+50	; 0x32
    260c:	8b a9       	ldd	r24, Y+51	; 0x33
    260e:	9c a9       	ldd	r25, Y+52	; 0x34
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <STEPPER_voidRotateCW+0x8e>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	98 ab       	std	Y+48, r25	; 0x30
    2626:	8f a7       	std	Y+47, r24	; 0x2f
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <STEPPER_voidRotateCW+0x10c>
	else if (__tmp > 65535)
    262a:	69 a9       	ldd	r22, Y+49	; 0x31
    262c:	7a a9       	ldd	r23, Y+50	; 0x32
    262e:	8b a9       	ldd	r24, Y+51	; 0x33
    2630:	9c a9       	ldd	r25, Y+52	; 0x34
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <STEPPER_voidRotateCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6d a9       	ldd	r22, Y+53	; 0x35
    2644:	7e a9       	ldd	r23, Y+54	; 0x36
    2646:	8f a9       	ldd	r24, Y+55	; 0x37
    2648:	98 ad       	ldd	r25, Y+56	; 0x38
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	98 ab       	std	Y+48, r25	; 0x30
    2668:	8f a7       	std	Y+47, r24	; 0x2f
    266a:	0f c0       	rjmp	.+30     	; 0x268a <STEPPER_voidRotateCW+0xee>
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e a7       	std	Y+46, r25	; 0x2e
    2672:	8d a7       	std	Y+45, r24	; 0x2d
    2674:	8d a5       	ldd	r24, Y+45	; 0x2d
    2676:	9e a5       	ldd	r25, Y+46	; 0x2e
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <STEPPER_voidRotateCW+0xdc>
    267c:	9e a7       	std	Y+46, r25	; 0x2e
    267e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8f a5       	ldd	r24, Y+47	; 0x2f
    2682:	98 a9       	ldd	r25, Y+48	; 0x30
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	98 ab       	std	Y+48, r25	; 0x30
    2688:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8f a5       	ldd	r24, Y+47	; 0x2f
    268c:	98 a9       	ldd	r25, Y+48	; 0x30
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <STEPPER_voidRotateCW+0xd0>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <STEPPER_voidRotateCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	69 a9       	ldd	r22, Y+49	; 0x31
    2696:	7a a9       	ldd	r23, Y+50	; 0x32
    2698:	8b a9       	ldd	r24, Y+51	; 0x33
    269a:	9c a9       	ldd	r25, Y+52	; 0x34
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	98 ab       	std	Y+48, r25	; 0x30
    26a6:	8f a7       	std	Y+47, r24	; 0x2f
    26a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26aa:	98 a9       	ldd	r25, Y+48	; 0x30
    26ac:	9c a7       	std	Y+44, r25	; 0x2c
    26ae:	8b a7       	std	Y+43, r24	; 0x2b
    26b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <STEPPER_voidRotateCW+0x118>
    26b8:	9c a7       	std	Y+44, r25	; 0x2c
    26ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,    DIO_u8_LOW);
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,    DIO_u8_HIGH);
    26c6:	83 e0       	ldi	r24, 0x03	; 3
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,      DIO_u8_LOW);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,      DIO_u8_LOW);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 ea       	ldi	r26, 0xA0	; 160
    26ea:	b0 e4       	ldi	r27, 0x40	; 64
    26ec:	8f a3       	std	Y+39, r24	; 0x27
    26ee:	98 a7       	std	Y+40, r25	; 0x28
    26f0:	a9 a7       	std	Y+41, r26	; 0x29
    26f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6f a1       	ldd	r22, Y+39	; 0x27
    26f6:	78 a5       	ldd	r23, Y+40	; 0x28
    26f8:	89 a5       	ldd	r24, Y+41	; 0x29
    26fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8b a3       	std	Y+35, r24	; 0x23
    270e:	9c a3       	std	Y+36, r25	; 0x24
    2710:	ad a3       	std	Y+37, r26	; 0x25
    2712:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <STEPPER_voidRotateCW+0x19a>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <STEPPER_voidRotateCW+0x218>
	else if (__tmp > 65535)
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	8d a1       	ldd	r24, Y+37	; 0x25
    273c:	9e a1       	ldd	r25, Y+38	; 0x26
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <STEPPER_voidRotateCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6f a1       	ldd	r22, Y+39	; 0x27
    2750:	78 a5       	ldd	r23, Y+40	; 0x28
    2752:	89 a5       	ldd	r24, Y+41	; 0x29
    2754:	9a a5       	ldd	r25, Y+42	; 0x2a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <STEPPER_voidRotateCW+0x1fa>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	98 a3       	std	Y+32, r25	; 0x20
    277e:	8f 8f       	std	Y+31, r24	; 0x1f
    2780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2782:	98 a1       	ldd	r25, Y+32	; 0x20
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <STEPPER_voidRotateCW+0x1e8>
    2788:	98 a3       	std	Y+32, r25	; 0x20
    278a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	9a a1       	ldd	r25, Y+34	; 0x22
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <STEPPER_voidRotateCW+0x1dc>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <STEPPER_voidRotateCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6b a1       	ldd	r22, Y+35	; 0x23
    27a2:	7c a1       	ldd	r23, Y+36	; 0x24
    27a4:	8d a1       	ldd	r24, Y+37	; 0x25
    27a6:	9e a1       	ldd	r25, Y+38	; 0x26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ba:	8d 8f       	std	Y+29, r24	; 0x1d
    27bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <STEPPER_voidRotateCW+0x224>
    27c4:	9e 8f       	std	Y+30, r25	; 0x1e
    27c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,    DIO_u8_LOW);
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,    DIO_u8_LOW);
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	62 e0       	ldi	r22, 0x02	; 2
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,      DIO_u8_HIGH);
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,      DIO_u8_LOW);
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a0 ea       	ldi	r26, 0xA0	; 160
    27f6:	b0 e4       	ldi	r27, 0x40	; 64
    27f8:	89 8f       	std	Y+25, r24	; 0x19
    27fa:	9a 8f       	std	Y+26, r25	; 0x1a
    27fc:	ab 8f       	std	Y+27, r26	; 0x1b
    27fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2800:	69 8d       	ldd	r22, Y+25	; 0x19
    2802:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a ef       	ldi	r20, 0xFA	; 250
    280e:	54 e4       	ldi	r21, 0x44	; 68
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8d 8b       	std	Y+21, r24	; 0x15
    281a:	9e 8b       	std	Y+22, r25	; 0x16
    281c:	af 8b       	std	Y+23, r26	; 0x17
    281e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2820:	6d 89       	ldd	r22, Y+21	; 0x15
    2822:	7e 89       	ldd	r23, Y+22	; 0x16
    2824:	8f 89       	ldd	r24, Y+23	; 0x17
    2826:	98 8d       	ldd	r25, Y+24	; 0x18
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <STEPPER_voidRotateCW+0x2a6>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9c 8b       	std	Y+20, r25	; 0x14
    283e:	8b 8b       	std	Y+19, r24	; 0x13
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <STEPPER_voidRotateCW+0x324>
	else if (__tmp > 65535)
    2842:	6d 89       	ldd	r22, Y+21	; 0x15
    2844:	7e 89       	ldd	r23, Y+22	; 0x16
    2846:	8f 89       	ldd	r24, Y+23	; 0x17
    2848:	98 8d       	ldd	r25, Y+24	; 0x18
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	4c f5       	brge	.+82     	; 0x28ac <STEPPER_voidRotateCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	69 8d       	ldd	r22, Y+25	; 0x19
    285c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9c 8b       	std	Y+20, r25	; 0x14
    2880:	8b 8b       	std	Y+19, r24	; 0x13
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <STEPPER_voidRotateCW+0x306>
    2884:	88 ec       	ldi	r24, 0xC8	; 200
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9a 8b       	std	Y+18, r25	; 0x12
    288a:	89 8b       	std	Y+17, r24	; 0x11
    288c:	89 89       	ldd	r24, Y+17	; 0x11
    288e:	9a 89       	ldd	r25, Y+18	; 0x12
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <STEPPER_voidRotateCW+0x2f4>
    2894:	9a 8b       	std	Y+18, r25	; 0x12
    2896:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	9c 89       	ldd	r25, Y+20	; 0x14
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9c 8b       	std	Y+20, r25	; 0x14
    28a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	8b 89       	ldd	r24, Y+19	; 0x13
    28a4:	9c 89       	ldd	r25, Y+20	; 0x14
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	69 f7       	brne	.-38     	; 0x2884 <STEPPER_voidRotateCW+0x2e8>
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <STEPPER_voidRotateCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ac:	6d 89       	ldd	r22, Y+21	; 0x15
    28ae:	7e 89       	ldd	r23, Y+22	; 0x16
    28b0:	8f 89       	ldd	r24, Y+23	; 0x17
    28b2:	98 8d       	ldd	r25, Y+24	; 0x18
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9c 8b       	std	Y+20, r25	; 0x14
    28be:	8b 8b       	std	Y+19, r24	; 0x13
    28c0:	8b 89       	ldd	r24, Y+19	; 0x13
    28c2:	9c 89       	ldd	r25, Y+20	; 0x14
    28c4:	98 8b       	std	Y+16, r25	; 0x10
    28c6:	8f 87       	std	Y+15, r24	; 0x0f
    28c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ca:	98 89       	ldd	r25, Y+16	; 0x10
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <STEPPER_voidRotateCW+0x330>
    28d0:	98 8b       	std	Y+16, r25	; 0x10
    28d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Orange,    DIO_u8_LOW);
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Yellow,    DIO_u8_LOW);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	62 e0       	ldi	r22, 0x02	; 2
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Pink,      DIO_u8_LOW);
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
	DIO_voidSetPinValue( STEPPER_u8_COIL_PORT, STEPPER_u8_CIOL_Blue,      DIO_u8_HIGH);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 ea       	ldi	r26, 0xA0	; 160
    2902:	b0 e4       	ldi	r27, 0x40	; 64
    2904:	8b 87       	std	Y+11, r24	; 0x0b
    2906:	9c 87       	std	Y+12, r25	; 0x0c
    2908:	ad 87       	std	Y+13, r26	; 0x0d
    290a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8f 83       	std	Y+7, r24	; 0x07
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	a9 87       	std	Y+9, r26	; 0x09
    292a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <STEPPER_voidRotateCW+0x3b2>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <STEPPER_voidRotateCW+0x430>
	else if (__tmp > 65535)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <STEPPER_voidRotateCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <STEPPER_voidRotateCW+0x412>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <STEPPER_voidRotateCW+0x400>
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <STEPPER_voidRotateCW+0x3f4>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <STEPPER_voidRotateCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <STEPPER_voidRotateCW+0x43c>
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);



}
    29e0:	e8 96       	adiw	r28, 0x38	; 56
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <SERVO_voidInit>:
#include <avr/io.h>
#include "Servo_Config.h"
#include "Servo_Interface.h"

void SERVO_voidInit(void)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    // OC1A = PD5 كـ output
    SERVO_DDR |= (1 << SERVO_PIN);
    29fa:	a1 e3       	ldi	r26, 0x31	; 49
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e1 e3       	ldi	r30, 0x31	; 49
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	80 62       	ori	r24, 0x20	; 32
    2a06:	8c 93       	st	X, r24

    // Timer1 Fast PWM Mode 14 (ICR1 = TOP), Prescaler = 8
    TCCR1A = (1 << COM1A1) | (1 << WGM11);
    2a08:	ef e4       	ldi	r30, 0x4F	; 79
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	82 e8       	ldi	r24, 0x82	; 130
    2a0e:	80 83       	st	Z, r24
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    2a10:	ee e4       	ldi	r30, 0x4E	; 78
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	8a e1       	ldi	r24, 0x1A	; 26
    2a16:	80 83       	st	Z, r24

    // Set TOP value = 20ms
    ICR1 = SERVO_TOP;
    2a18:	e6 e4       	ldi	r30, 0x46	; 70
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 e2       	ldi	r24, 0x20	; 32
    2a1e:	9e e4       	ldi	r25, 0x4E	; 78
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
}
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <SERVO_voidSetAngle+0x6>
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <SERVO_voidSetAngle+0x8>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	9c 83       	std	Y+4, r25	; 0x04
    2a38:	8b 83       	std	Y+3, r24	; 0x03
    // تحويل الزاوية (0–180) ل pulse width (1000–2000 µs)
    u16 pulse = SERVO_MIN_PULSE + ((u32)Copy_u16Angle * (SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / 180;
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	cc 01       	movw	r24, r24
    2a40:	a0 e0       	ldi	r26, 0x00	; 0
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	20 ed       	ldi	r18, 0xD0	; 208
    2a46:	37 e0       	ldi	r19, 0x07	; 7
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulsi3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	24 eb       	ldi	r18, 0xB4	; 180
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__udivmodsi4>
    2a68:	da 01       	movw	r26, r20
    2a6a:	c9 01       	movw	r24, r18
    2a6c:	8c 50       	subi	r24, 0x0C	; 12
    2a6e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01

    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	21 e0       	ldi	r18, 0x01	; 1
    2a7a:	84 3f       	cpi	r24, 0xF4	; 244
    2a7c:	92 07       	cpc	r25, r18
    2a7e:	20 f4       	brcc	.+8      	; 0x2a88 <SERVO_voidSetAngle+0x5e>
    2a80:	84 ef       	ldi	r24, 0xF4	; 244
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	29 e0       	ldi	r18, 0x09	; 9
    2a8e:	85 3c       	cpi	r24, 0xC5	; 197
    2a90:	92 07       	cpc	r25, r18
    2a92:	20 f0       	brcs	.+8      	; 0x2a9c <SERVO_voidSetAngle+0x72>
    2a94:	84 ec       	ldi	r24, 0xC4	; 196
    2a96:	99 e0       	ldi	r25, 0x09	; 9
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01

    OCR1A = pulse;  // خرج على OC1A
    2a9c:	ea e4       	ldi	r30, 0x4A	; 74
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <L298_voidInit>:
#include "L298_Interface.h"
#include "L298_Config.h"


void L298_voidInit(void)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    // Outputs
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN1, DIO_u8_OUTPUT);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	64 e0       	ldi	r22, 0x04	; 4
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN2, DIO_u8_OUTPUT);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	65 e0       	ldi	r22, 0x05	; 5
    2acc:	41 e0       	ldi	r20, 0x01	; 1
    2ace:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN3, DIO_u8_OUTPUT);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	66 e0       	ldi	r22, 0x06	; 6
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN4, DIO_u8_OUTPUT);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	67 e0       	ldi	r22, 0x07	; 7
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(DIO_u8_PORTB, ENA, DIO_u8_OUTPUT);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	63 e0       	ldi	r22, 0x03	; 3
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, ENB, DIO_u8_OUTPUT);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	62 e0       	ldi	r22, 0x02	; 2
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DIO_voidSetPinDirection>
    Timer0_voidInit_FastPWM();                          // ENA → Motor A
    2afa:	0e 94 af 0a 	call	0x155e	; 0x155e <Timer0_voidInit_FastPWM>
	Timer1_voidInitPWM(19999, TIMER1_PRESCALER_8);      // ENB → Motor B
    2afe:	8f e1       	ldi	r24, 0x1F	; 31
    2b00:	9e e4       	ldi	r25, 0x4E	; 78
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer1_voidInitPWM>

}
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <L298_voidMove>:

void L298_voidMove(u8 Copy_u8Direction, u8 Copy_u8SpeedPercent)
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	28 97       	sbiw	r28, 0x08	; 8
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	6e 83       	std	Y+6, r22	; 0x06
	u16 duty_motorA = (Copy_u8SpeedPercent * 255) / 100;      // Timer0
    2b26:	8e 81       	ldd	r24, Y+6	; 0x06
    2b28:	48 2f       	mov	r20, r24
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	9c 01       	movw	r18, r24
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	c9 01       	movw	r24, r18
    2b36:	96 95       	lsr	r25
    2b38:	98 2f       	mov	r25, r24
    2b3a:	88 27       	eor	r24, r24
    2b3c:	97 95       	ror	r25
    2b3e:	87 95       	ror	r24
    2b40:	82 1b       	sub	r24, r18
    2b42:	93 0b       	sbc	r25, r19
    2b44:	84 0f       	add	r24, r20
    2b46:	95 1f       	adc	r25, r21
    2b48:	24 e6       	ldi	r18, 0x64	; 100
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	8b 83       	std	Y+3, r24	; 0x03
	u16 duty_motorB = (Copy_u8SpeedPercent * 19999) / 100;    // Timer1
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	8f e1       	ldi	r24, 0x1F	; 31
    2b60:	9e e4       	ldi	r25, 0x4E	; 78
    2b62:	ac 01       	movw	r20, r24
    2b64:	24 9f       	mul	r18, r20
    2b66:	c0 01       	movw	r24, r0
    2b68:	25 9f       	mul	r18, r21
    2b6a:	90 0d       	add	r25, r0
    2b6c:	34 9f       	mul	r19, r20
    2b6e:	90 0d       	add	r25, r0
    2b70:	11 24       	eor	r1, r1
    2b72:	24 e6       	ldi	r18, 0x64	; 100
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	b9 01       	movw	r22, r18
    2b78:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Direction)
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	28 2f       	mov	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	38 87       	std	Y+8, r19	; 0x08
    2b8a:	2f 83       	std	Y+7, r18	; 0x07
    2b8c:	4f 81       	ldd	r20, Y+7	; 0x07
    2b8e:	58 85       	ldd	r21, Y+8	; 0x08
    2b90:	42 30       	cpi	r20, 0x02	; 2
    2b92:	51 05       	cpc	r21, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <L298_voidMove+0x8a>
    2b96:	5b c0       	rjmp	.+182    	; 0x2c4e <L298_voidMove+0x140>
    2b98:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9a:	98 85       	ldd	r25, Y+8	; 0x08
    2b9c:	83 30       	cpi	r24, 0x03	; 3
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	5c f4       	brge	.+22     	; 0x2bb8 <L298_voidMove+0xaa>
    2ba2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ba4:	38 85       	ldd	r19, Y+8	; 0x08
    2ba6:	21 15       	cp	r18, r1
    2ba8:	31 05       	cpc	r19, r1
    2baa:	91 f0       	breq	.+36     	; 0x2bd0 <L298_voidMove+0xc2>
    2bac:	4f 81       	ldd	r20, Y+7	; 0x07
    2bae:	58 85       	ldd	r21, Y+8	; 0x08
    2bb0:	41 30       	cpi	r20, 0x01	; 1
    2bb2:	51 05       	cpc	r21, r1
    2bb4:	11 f1       	breq	.+68     	; 0x2bfa <L298_voidMove+0xec>
    2bb6:	74 c0       	rjmp	.+232    	; 0x2ca0 <L298_voidMove+0x192>
    2bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bba:	98 85       	ldd	r25, Y+8	; 0x08
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	89 f1       	breq	.+98     	; 0x2c24 <L298_voidMove+0x116>
    2bc2:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc4:	38 85       	ldd	r19, Y+8	; 0x08
    2bc6:	24 30       	cpi	r18, 0x04	; 4
    2bc8:	31 05       	cpc	r19, r1
    2bca:	09 f4       	brne	.+2      	; 0x2bce <L298_voidMove+0xc0>
    2bcc:	55 c0       	rjmp	.+170    	; 0x2c78 <L298_voidMove+0x16a>
    2bce:	68 c0       	rjmp	.+208    	; 0x2ca0 <L298_voidMove+0x192>
    {
        case MOVE_FORWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	64 e0       	ldi	r22, 0x04	; 4
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	65 e0       	ldi	r22, 0x05	; 5
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	66 e0       	ldi	r22, 0x06	; 6
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	67 e0       	ldi	r22, 0x07	; 7
    2bf2:	40 e0       	ldi	r20, 0x00	; 0
    2bf4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    2bf8:	53 c0       	rjmp	.+166    	; 0x2ca0 <L298_voidMove+0x192>

            break;

        case MOVE_BACKWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_HIGH);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	65 e0       	ldi	r22, 0x05	; 5
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	66 e0       	ldi	r22, 0x06	; 6
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_HIGH);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	67 e0       	ldi	r22, 0x07	; 7
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    2c22:	3e c0       	rjmp	.+124    	; 0x2ca0 <L298_voidMove+0x192>
             break;

        case MOVE_RIGHT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	65 e0       	ldi	r22, 0x05	; 5
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	66 e0       	ldi	r22, 0x06	; 6
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	67 e0       	ldi	r22, 0x07	; 7
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    2c4c:	29 c0       	rjmp	.+82     	; 0x2ca0 <L298_voidMove+0x192>
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	64 e0       	ldi	r22, 0x04	; 4
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	65 e0       	ldi	r22, 0x05	; 5
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	66 e0       	ldi	r22, 0x06	; 6
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	67 e0       	ldi	r22, 0x07	; 7
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <L298_voidMove+0x192>
              break;

        case MOVE_STOP:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	64 e0       	ldi	r22, 0x04	; 4
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	65 e0       	ldi	r22, 0x05	; 5
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	66 e0       	ldi	r22, 0x06	; 6
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	67 e0       	ldi	r22, 0x07	; 7
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinValue>
              break;
    }
    // Apply PWM speed
        Timer0_voidSetDuty(duty_motorA);    // Motor A
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer0_voidSetDuty>
        Timer1_voidSetDuty(TIMER1_CHANNEL_A, duty_motorB); // Motor B
    2ca6:	29 81       	ldd	r18, Y+1	; 0x01
    2ca8:	3a 81       	ldd	r19, Y+2	; 0x02
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	b9 01       	movw	r22, r18
    2cae:	0e 94 9b 09 	call	0x1336	; 0x1336 <Timer1_voidSetDuty>

}
    2cb2:	28 96       	adiw	r28, 0x08	; 8
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <__vector_2>:
#include <util/delay.h>

volatile u8 mode = 1; // 1 = Auto mode, 0 = Manual mode

ISR(INT1_vect)
{
    2cc4:	1f 92       	push	r1
    2cc6:	0f 92       	push	r0
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	0f 92       	push	r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    mode ^= 1;   // Toggle between Auto and Manual
    2cda:	80 91 68 01 	lds	r24, 0x0168
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	89 27       	eor	r24, r25
    2ce2:	80 93 68 01 	sts	0x0168, r24
}
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	0f 90       	pop	r0
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	0f 90       	pop	r0
    2cf4:	1f 90       	pop	r1
    2cf6:	18 95       	reti

00002cf8 <main>:
//}
//
//// ================== MAIN ==================
//
int main(void)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	27 97       	sbiw	r28, 0x07	; 7
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    UART_Init();
    2d0c:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>

    // Configure PA0 & PA1 as outputs
    DDRA |= (1 << PA0) | (1 << PA1);
    2d10:	aa e3       	ldi	r26, 0x3A	; 58
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ea e3       	ldi	r30, 0x3A	; 58
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	83 60       	ori	r24, 0x03	; 3
    2d1c:	8c 93       	st	X, r24

    u16 distance, leftDist, rightDist;

    // Initialization
    L298_voidInit();
    2d1e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <L298_voidInit>
    SERVO_voidInit();
    2d22:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <SERVO_voidInit>
    Ultrasonic_Init();
    2d26:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <Ultrasonic_Init>
    EXT1_IN_Enable();  // Enable interrupt on PD3
    2d2a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <EXT1_IN_Enable>


    while (1)
    {
        unsigned char read = UART_Receive_Byte();
    2d2e:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_Receive_Byte>
    2d32:	89 83       	std	Y+1, r24	; 0x01

        if (read == 'F')   // Forward
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	86 34       	cpi	r24, 0x46	; 70
    2d38:	61 f5       	brne	.+88     	; 0x2d92 <main+0x9a>
        {
            PORTA |=  (1 << PA1);   // PA1 HIGH
    2d3a:	ab e3       	ldi	r26, 0x3B	; 59
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	eb e3       	ldi	r30, 0x3B	; 59
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	82 60       	ori	r24, 0x02	; 2
    2d46:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA0);   // PA0 LOW
    2d48:	ab e3       	ldi	r26, 0x3B	; 59
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	eb e3       	ldi	r30, 0x3B	; 59
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8e 7f       	andi	r24, 0xFE	; 254
    2d54:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA2);   // PA2 LOW
    2d56:	ab e3       	ldi	r26, 0x3B	; 59
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	eb e3       	ldi	r30, 0x3B	; 59
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	8b 7f       	andi	r24, 0xFB	; 251
    2d62:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA3);   // PA3 LOW
    2d64:	ab e3       	ldi	r26, 0x3B	; 59
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	eb e3       	ldi	r30, 0x3B	; 59
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	87 7f       	andi	r24, 0xF7	; 247
    2d70:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA4);   // PA4 LOW
    2d72:	ab e3       	ldi	r26, 0x3B	; 59
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	eb e3       	ldi	r30, 0x3B	; 59
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	8f 7e       	andi	r24, 0xEF	; 239
    2d7e:	8c 93       	st	X, r24
            L298_voidMove(MOVE_FORWARD, 70);
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	66 e4       	ldi	r22, 0x46	; 70
    2d84:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <L298_voidMove>
            UART_Send_Byte('F');    // Send ACK
    2d88:	86 e4       	ldi	r24, 0x46	; 70
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 57 07 	call	0xeae	; 0xeae <UART_Send_Byte>
    2d90:	ce cf       	rjmp	.-100    	; 0x2d2e <main+0x36>

        }
        else if (read == 'B')  // Backward
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	82 34       	cpi	r24, 0x42	; 66
    2d96:	61 f5       	brne	.+88     	; 0x2df0 <main+0xf8>
        {
            PORTA |=  (1 << PA2);   // PA2 HIGH
    2d98:	ab e3       	ldi	r26, 0x3B	; 59
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	eb e3       	ldi	r30, 0x3B	; 59
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	84 60       	ori	r24, 0x04	; 4
    2da4:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA0);   // PA0 LOW
    2da6:	ab e3       	ldi	r26, 0x3B	; 59
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	eb e3       	ldi	r30, 0x3B	; 59
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8e 7f       	andi	r24, 0xFE	; 254
    2db2:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA1);   // PA1 LOW
    2db4:	ab e3       	ldi	r26, 0x3B	; 59
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	eb e3       	ldi	r30, 0x3B	; 59
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8d 7f       	andi	r24, 0xFD	; 253
    2dc0:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA3);   // PA3 LOW
    2dc2:	ab e3       	ldi	r26, 0x3B	; 59
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	eb e3       	ldi	r30, 0x3B	; 59
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	87 7f       	andi	r24, 0xF7	; 247
    2dce:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA4);   // PA4 LOW
    2dd0:	ab e3       	ldi	r26, 0x3B	; 59
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	eb e3       	ldi	r30, 0x3B	; 59
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 7e       	andi	r24, 0xEF	; 239
    2ddc:	8c 93       	st	X, r24
            L298_voidMove(MOVE_BACKWARD, 70);
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	66 e4       	ldi	r22, 0x46	; 70
    2de2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <L298_voidMove>
            UART_Send_Byte('B');    // Send ACK
    2de6:	82 e4       	ldi	r24, 0x42	; 66
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 57 07 	call	0xeae	; 0xeae <UART_Send_Byte>
    2dee:	9f cf       	rjmp	.-194    	; 0x2d2e <main+0x36>

        }
        else if (read == 'R')  // Right
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	82 35       	cpi	r24, 0x52	; 82
    2df4:	61 f5       	brne	.+88     	; 0x2e4e <main+0x156>
                {
            PORTA |=  (1 << PA3);   // PA3 HIGH
    2df6:	ab e3       	ldi	r26, 0x3B	; 59
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	eb e3       	ldi	r30, 0x3B	; 59
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 60       	ori	r24, 0x08	; 8
    2e02:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA0);   // PA0 LOW
    2e04:	ab e3       	ldi	r26, 0x3B	; 59
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	eb e3       	ldi	r30, 0x3B	; 59
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	8e 7f       	andi	r24, 0xFE	; 254
    2e10:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA1);   // PA1 LOW
    2e12:	ab e3       	ldi	r26, 0x3B	; 59
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	eb e3       	ldi	r30, 0x3B	; 59
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8d 7f       	andi	r24, 0xFD	; 253
    2e1e:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA2);   // PA2 LOW
    2e20:	ab e3       	ldi	r26, 0x3B	; 59
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	eb e3       	ldi	r30, 0x3B	; 59
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	8b 7f       	andi	r24, 0xFB	; 251
    2e2c:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA4);   // PA4 LOW
    2e2e:	ab e3       	ldi	r26, 0x3B	; 59
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	eb e3       	ldi	r30, 0x3B	; 59
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 7e       	andi	r24, 0xEF	; 239
    2e3a:	8c 93       	st	X, r24
            L298_voidMove(MOVE_RIGHT, 70);
    2e3c:	83 e0       	ldi	r24, 0x03	; 3
    2e3e:	66 e4       	ldi	r22, 0x46	; 70
    2e40:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <L298_voidMove>
			UART_Send_Byte('R');    // Send ACK
    2e44:	82 e5       	ldi	r24, 0x52	; 82
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 57 07 	call	0xeae	; 0xeae <UART_Send_Byte>
    2e4c:	70 cf       	rjmp	.-288    	; 0x2d2e <main+0x36>

        }
        else if (read == 'L')  // Left
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	8c 34       	cpi	r24, 0x4C	; 76
    2e52:	61 f5       	brne	.+88     	; 0x2eac <main+0x1b4>
                {
            PORTA |=  (1 << PA4);   // PA4 HIGH
    2e54:	ab e3       	ldi	r26, 0x3B	; 59
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	eb e3       	ldi	r30, 0x3B	; 59
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 61       	ori	r24, 0x10	; 16
    2e60:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA0);   // PA0 LOW
    2e62:	ab e3       	ldi	r26, 0x3B	; 59
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	eb e3       	ldi	r30, 0x3B	; 59
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	8e 7f       	andi	r24, 0xFE	; 254
    2e6e:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA1);   // PA1 LOW
    2e70:	ab e3       	ldi	r26, 0x3B	; 59
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	eb e3       	ldi	r30, 0x3B	; 59
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	8d 7f       	andi	r24, 0xFD	; 253
    2e7c:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA2);   // PA2 LOW
    2e7e:	ab e3       	ldi	r26, 0x3B	; 59
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	eb e3       	ldi	r30, 0x3B	; 59
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	8b 7f       	andi	r24, 0xFB	; 251
    2e8a:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA3);   // PA3 LOW
    2e8c:	ab e3       	ldi	r26, 0x3B	; 59
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	eb e3       	ldi	r30, 0x3B	; 59
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	87 7f       	andi	r24, 0xF7	; 247
    2e98:	8c 93       	st	X, r24
            L298_voidMove(MOVE_LEFT, 70);
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	66 e4       	ldi	r22, 0x46	; 70
    2e9e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <L298_voidMove>
			UART_Send_Byte('L');    // Send ACK
    2ea2:	8c e4       	ldi	r24, 0x4C	; 76
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	0e 94 57 07 	call	0xeae	; 0xeae <UART_Send_Byte>
    2eaa:	41 cf       	rjmp	.-382    	; 0x2d2e <main+0x36>

          }
        else   // Stop
        {
            PORTA |=  (1 << PA0);   // PA0 HIGH
    2eac:	ab e3       	ldi	r26, 0x3B	; 59
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	eb e3       	ldi	r30, 0x3B	; 59
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 60       	ori	r24, 0x01	; 1
    2eb8:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA1);   // PA1 LOW
    2eba:	ab e3       	ldi	r26, 0x3B	; 59
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	eb e3       	ldi	r30, 0x3B	; 59
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8d 7f       	andi	r24, 0xFD	; 253
    2ec6:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA2);   // PA2 LOW
    2ec8:	ab e3       	ldi	r26, 0x3B	; 59
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	eb e3       	ldi	r30, 0x3B	; 59
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	8b 7f       	andi	r24, 0xFB	; 251
    2ed4:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA3);   // PA3 LOW
    2ed6:	ab e3       	ldi	r26, 0x3B	; 59
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	eb e3       	ldi	r30, 0x3B	; 59
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	87 7f       	andi	r24, 0xF7	; 247
    2ee2:	8c 93       	st	X, r24
            PORTA &= ~(1 << PA4);   // PA4 LOW
    2ee4:	ab e3       	ldi	r26, 0x3B	; 59
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	eb e3       	ldi	r30, 0x3B	; 59
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 7e       	andi	r24, 0xEF	; 239
    2ef0:	8c 93       	st	X, r24
            L298_voidMove(MOVE_STOP, 0);
    2ef2:	84 e0       	ldi	r24, 0x04	; 4
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <L298_voidMove>
            UART_Send_Byte('S');    // Send Stop ACK
    2efa:	83 e5       	ldi	r24, 0x53	; 83
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 57 07 	call	0xeae	; 0xeae <UART_Send_Byte>
    2f02:	15 cf       	rjmp	.-470    	; 0x2d2e <main+0x36>

00002f04 <__mulsi3>:
    2f04:	62 9f       	mul	r22, r18
    2f06:	d0 01       	movw	r26, r0
    2f08:	73 9f       	mul	r23, r19
    2f0a:	f0 01       	movw	r30, r0
    2f0c:	82 9f       	mul	r24, r18
    2f0e:	e0 0d       	add	r30, r0
    2f10:	f1 1d       	adc	r31, r1
    2f12:	64 9f       	mul	r22, r20
    2f14:	e0 0d       	add	r30, r0
    2f16:	f1 1d       	adc	r31, r1
    2f18:	92 9f       	mul	r25, r18
    2f1a:	f0 0d       	add	r31, r0
    2f1c:	83 9f       	mul	r24, r19
    2f1e:	f0 0d       	add	r31, r0
    2f20:	74 9f       	mul	r23, r20
    2f22:	f0 0d       	add	r31, r0
    2f24:	65 9f       	mul	r22, r21
    2f26:	f0 0d       	add	r31, r0
    2f28:	99 27       	eor	r25, r25
    2f2a:	72 9f       	mul	r23, r18
    2f2c:	b0 0d       	add	r27, r0
    2f2e:	e1 1d       	adc	r30, r1
    2f30:	f9 1f       	adc	r31, r25
    2f32:	63 9f       	mul	r22, r19
    2f34:	b0 0d       	add	r27, r0
    2f36:	e1 1d       	adc	r30, r1
    2f38:	f9 1f       	adc	r31, r25
    2f3a:	bd 01       	movw	r22, r26
    2f3c:	cf 01       	movw	r24, r30
    2f3e:	11 24       	eor	r1, r1
    2f40:	08 95       	ret

00002f42 <__divmodhi4>:
    2f42:	97 fb       	bst	r25, 7
    2f44:	09 2e       	mov	r0, r25
    2f46:	07 26       	eor	r0, r23
    2f48:	0a d0       	rcall	.+20     	; 0x2f5e <__divmodhi4_neg1>
    2f4a:	77 fd       	sbrc	r23, 7
    2f4c:	04 d0       	rcall	.+8      	; 0x2f56 <__divmodhi4_neg2>
    2f4e:	2e d0       	rcall	.+92     	; 0x2fac <__udivmodhi4>
    2f50:	06 d0       	rcall	.+12     	; 0x2f5e <__divmodhi4_neg1>
    2f52:	00 20       	and	r0, r0
    2f54:	1a f4       	brpl	.+6      	; 0x2f5c <__divmodhi4_exit>

00002f56 <__divmodhi4_neg2>:
    2f56:	70 95       	com	r23
    2f58:	61 95       	neg	r22
    2f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f5c <__divmodhi4_exit>:
    2f5c:	08 95       	ret

00002f5e <__divmodhi4_neg1>:
    2f5e:	f6 f7       	brtc	.-4      	; 0x2f5c <__divmodhi4_exit>
    2f60:	90 95       	com	r25
    2f62:	81 95       	neg	r24
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	08 95       	ret

00002f68 <__udivmodsi4>:
    2f68:	a1 e2       	ldi	r26, 0x21	; 33
    2f6a:	1a 2e       	mov	r1, r26
    2f6c:	aa 1b       	sub	r26, r26
    2f6e:	bb 1b       	sub	r27, r27
    2f70:	fd 01       	movw	r30, r26
    2f72:	0d c0       	rjmp	.+26     	; 0x2f8e <__udivmodsi4_ep>

00002f74 <__udivmodsi4_loop>:
    2f74:	aa 1f       	adc	r26, r26
    2f76:	bb 1f       	adc	r27, r27
    2f78:	ee 1f       	adc	r30, r30
    2f7a:	ff 1f       	adc	r31, r31
    2f7c:	a2 17       	cp	r26, r18
    2f7e:	b3 07       	cpc	r27, r19
    2f80:	e4 07       	cpc	r30, r20
    2f82:	f5 07       	cpc	r31, r21
    2f84:	20 f0       	brcs	.+8      	; 0x2f8e <__udivmodsi4_ep>
    2f86:	a2 1b       	sub	r26, r18
    2f88:	b3 0b       	sbc	r27, r19
    2f8a:	e4 0b       	sbc	r30, r20
    2f8c:	f5 0b       	sbc	r31, r21

00002f8e <__udivmodsi4_ep>:
    2f8e:	66 1f       	adc	r22, r22
    2f90:	77 1f       	adc	r23, r23
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	1a 94       	dec	r1
    2f98:	69 f7       	brne	.-38     	; 0x2f74 <__udivmodsi4_loop>
    2f9a:	60 95       	com	r22
    2f9c:	70 95       	com	r23
    2f9e:	80 95       	com	r24
    2fa0:	90 95       	com	r25
    2fa2:	9b 01       	movw	r18, r22
    2fa4:	ac 01       	movw	r20, r24
    2fa6:	bd 01       	movw	r22, r26
    2fa8:	cf 01       	movw	r24, r30
    2faa:	08 95       	ret

00002fac <__udivmodhi4>:
    2fac:	aa 1b       	sub	r26, r26
    2fae:	bb 1b       	sub	r27, r27
    2fb0:	51 e1       	ldi	r21, 0x11	; 17
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <__udivmodhi4_ep>

00002fb4 <__udivmodhi4_loop>:
    2fb4:	aa 1f       	adc	r26, r26
    2fb6:	bb 1f       	adc	r27, r27
    2fb8:	a6 17       	cp	r26, r22
    2fba:	b7 07       	cpc	r27, r23
    2fbc:	10 f0       	brcs	.+4      	; 0x2fc2 <__udivmodhi4_ep>
    2fbe:	a6 1b       	sub	r26, r22
    2fc0:	b7 0b       	sbc	r27, r23

00002fc2 <__udivmodhi4_ep>:
    2fc2:	88 1f       	adc	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	5a 95       	dec	r21
    2fc8:	a9 f7       	brne	.-22     	; 0x2fb4 <__udivmodhi4_loop>
    2fca:	80 95       	com	r24
    2fcc:	90 95       	com	r25
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	08 95       	ret

00002fd4 <__prologue_saves__>:
    2fd4:	2f 92       	push	r2
    2fd6:	3f 92       	push	r3
    2fd8:	4f 92       	push	r4
    2fda:	5f 92       	push	r5
    2fdc:	6f 92       	push	r6
    2fde:	7f 92       	push	r7
    2fe0:	8f 92       	push	r8
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	ca 1b       	sub	r28, r26
    2ffe:	db 0b       	sbc	r29, r27
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	09 94       	ijmp

0000300c <__epilogue_restores__>:
    300c:	2a 88       	ldd	r2, Y+18	; 0x12
    300e:	39 88       	ldd	r3, Y+17	; 0x11
    3010:	48 88       	ldd	r4, Y+16	; 0x10
    3012:	5f 84       	ldd	r5, Y+15	; 0x0f
    3014:	6e 84       	ldd	r6, Y+14	; 0x0e
    3016:	7d 84       	ldd	r7, Y+13	; 0x0d
    3018:	8c 84       	ldd	r8, Y+12	; 0x0c
    301a:	9b 84       	ldd	r9, Y+11	; 0x0b
    301c:	aa 84       	ldd	r10, Y+10	; 0x0a
    301e:	b9 84       	ldd	r11, Y+9	; 0x09
    3020:	c8 84       	ldd	r12, Y+8	; 0x08
    3022:	df 80       	ldd	r13, Y+7	; 0x07
    3024:	ee 80       	ldd	r14, Y+6	; 0x06
    3026:	fd 80       	ldd	r15, Y+5	; 0x05
    3028:	0c 81       	ldd	r16, Y+4	; 0x04
    302a:	1b 81       	ldd	r17, Y+3	; 0x03
    302c:	aa 81       	ldd	r26, Y+2	; 0x02
    302e:	b9 81       	ldd	r27, Y+1	; 0x01
    3030:	ce 0f       	add	r28, r30
    3032:	d1 1d       	adc	r29, r1
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	ed 01       	movw	r28, r26
    3040:	08 95       	ret

00003042 <_exit>:
    3042:	f8 94       	cli

00003044 <__stop_program>:
    3044:	ff cf       	rjmp	.-2      	; 0x3044 <__stop_program>
