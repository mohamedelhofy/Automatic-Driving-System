
motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00001efe  00001f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800184  00800184  000020b6  2**0
                  ALLOC
  3 .stab         00003f00  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015bb  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007573  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000076b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  0000784a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  000092d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000a189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  0000b39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <main>
      8a:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0x147>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__stack+0x141>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__stack+0xf>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__stack+0x14b>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__stack+0x45>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0xc5>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0xdd>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__stack+0x141>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__stack+0x113>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x11b>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__stack+0x133>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <UART_Receive_Byte>:
    UBRRH =0;
}

unsigned char UART_Receive_Byte(void)
{
	while (!(UCSRA & (1<<RXC)));
     b7a:	5f 9b       	sbis	0x0b, 7	; 11
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <UART_Receive_Byte>

	return UDR;
     b7e:	8c b1       	in	r24, 0x0c	; 12
}
     b80:	08 95       	ret

00000b82 <UART_Send_Byte>:
}


void UART_Send_Byte(u8 data)
{
	while (GET_BIT(UCSRA,UDRE)==0);
     b82:	5d 9b       	sbis	0x0b, 5	; 11
     b84:	fe cf       	rjmp	.-4      	; 0xb82 <UART_Send_Byte>
	UCSRA |= (1<<UDRE);
     b86:	5d 9a       	sbi	0x0b, 5	; 11

	UDR=data;
     b88:	8c b9       	out	0x0c, r24	; 12
	while (GET_BIT(UCSRA,TXC)==0)
     b8a:	8b b1       	in	r24, 0x0b	; 11
     b8c:	82 95       	swap	r24
     b8e:	86 95       	lsr	r24
     b90:	86 95       	lsr	r24
     b92:	83 70       	andi	r24, 0x03	; 3
     b94:	80 fd       	sbrc	r24, 0
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <UART_Send_Byte+0x1c>
	{
		UCSRA |= (1<<TXC);
     b98:	5e 9a       	sbi	0x0b, 6	; 11
{
	while (GET_BIT(UCSRA,UDRE)==0);
	UCSRA |= (1<<UDRE);

	UDR=data;
	while (GET_BIT(UCSRA,TXC)==0)
     b9a:	5e 9b       	sbis	0x0b, 6	; 11
     b9c:	fd cf       	rjmp	.-6      	; 0xb98 <UART_Send_Byte+0x16>
     b9e:	08 95       	ret

00000ba0 <UART_Init>:
//
//}

void UART_Init(void)
{
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE); // Enable RX, TX, RX interrupt
     bb4:	88 e9       	ldi	r24, 0x98	; 152
     bb6:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // 8-bit data
     bb8:	86 e8       	ldi	r24, 0x86	; 134
     bba:	80 bd       	out	0x20, r24	; 32
    UBRRL = 51; // Baudrate 9600 @ 8MHz
     bbc:	83 e3       	ldi	r24, 0x33	; 51
     bbe:	89 b9       	out	0x09, r24	; 9
    UBRRH =0;
     bc0:	10 bc       	out	0x20, r1	; 32
}
     bc2:	08 95       	ret

00000bc4 <UART_Init_Interrupt>:
	return UDR;
}

void UART_Init_Interrupt(void)
{
	UART_Init();
     bc4:	0e 94 d0 05 	call	0xba0	; 0xba0 <UART_Init>

	UCSRB |= (1<<RXCIE)|(1<<TXCIE);
     bc8:	8a b1       	in	r24, 0x0a	; 10
     bca:	80 6c       	ori	r24, 0xC0	; 192
     bcc:	8a b9       	out	0x0a, r24	; 10

	__asm__ __volatile__ ("sei" ::);
     bce:	78 94       	sei
}
     bd0:	08 95       	ret

00000bd2 <ADC_voidInit>:
#include "../Library/BIT_MATH.h"
#include "ADC_Interface.h"
#include "ADC_Register.h"
void ADC_voidInit(void){
	// select voltage refernce
	CLR_BIT(ADMUX,ADMUX_REFS1);
     bd2:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX,ADMUX_REFS0);
     bd4:	3e 9a       	sbi	0x07, 6	; 7
	// select the right adjustment
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     bd6:	3d 98       	cbi	0x07, 5	; 7
	// Prescaler Select
	SET_BIT(ADCSRA,ADSCRA_ADPS0);
     bd8:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,ADSCRA_ADPS1);
     bda:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADSCRA_ADPS2);
     bdc:	32 9a       	sbi	0x06, 2	; 6
	//  enables the ADC
	SET_BIT(ADCSRA,ADSCRA_ADEN);
     bde:	37 9a       	sbi	0x06, 7	; 6
}
     be0:	08 95       	ret

00000be2 <ADC_u16GetDigitalValue>:
u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNb){
	ADMUX &= ADMUX_CHANNEL_NUM_MASK ;
     be2:	97 b1       	in	r25, 0x07	; 7
     be4:	90 77       	andi	r25, 0x70	; 112
     be6:	97 b9       	out	0x07, r25	; 7
	// select channel number
	ADMUX |= Copy_u8ChannelNb ;
     be8:	97 b1       	in	r25, 0x07	; 7
     bea:	98 2b       	or	r25, r24
     bec:	97 b9       	out	0x07, r25	; 7
	// Start Conversion
	SET_BIT(ADCSRA,ADSCRA_ADSC);
     bee:	36 9a       	sbi	0x06, 6	; 6
	// polling on flag
	while(GET_BIT(ADCSRA,ADSCRA_ADIF) == 0);
     bf0:	34 9b       	sbis	0x06, 4	; 6
     bf2:	fe cf       	rjmp	.-4      	; 0xbf0 <ADC_u16GetDigitalValue+0xe>
	SET_BIT(ADCSRA,ADSCRA_ADIF);
     bf4:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
     bf6:	24 b1       	in	r18, 0x04	; 4
     bf8:	35 b1       	in	r19, 0x05	; 5

}
     bfa:	c9 01       	movw	r24, r18
     bfc:	08 95       	ret

00000bfe <DIO_voidSetPortDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{

	switch(u8PortId){
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	59 f0       	breq	.+22     	; 0xc18 <DIO_voidSetPortDirection+0x1a>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	28 f0       	brcs	.+10     	; 0xc10 <DIO_voidSetPortDirection+0x12>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	49 f0       	breq	.+18     	; 0xc1c <DIO_voidSetPortDirection+0x1e>
     c0a:	83 30       	cpi	r24, 0x03	; 3
     c0c:	19 f0       	breq	.+6      	; 0xc14 <DIO_voidSetPortDirection+0x16>
     c0e:	08 95       	ret
		case DIO_u8_PORTA : DDRA= Direction; break;
     c10:	6a bb       	out	0x1a, r22	; 26
     c12:	08 95       	ret
		case DIO_u8_PORTB : DDRB= Direction; break;
		case DIO_u8_PORTC : DDRC= Direction; break;
		case DIO_u8_PORTD : DDRD= Direction; break;
     c14:	61 bb       	out	0x11, r22	; 17
     c16:	08 95       	ret
void DIO_voidSetPortDirection(u8 u8PortId, u8 Direction)
{

	switch(u8PortId){
		case DIO_u8_PORTA : DDRA= Direction; break;
		case DIO_u8_PORTB : DDRB= Direction; break;
     c18:	67 bb       	out	0x17, r22	; 23
     c1a:	08 95       	ret
		case DIO_u8_PORTC : DDRC= Direction; break;
     c1c:	64 bb       	out	0x14, r22	; 20
     c1e:	08 95       	ret

00000c20 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal){
		
	switch(u8PortId){
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	59 f0       	breq	.+22     	; 0xc3a <DIO_voidSetPortValue+0x1a>
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	28 f0       	brcs	.+10     	; 0xc32 <DIO_voidSetPortValue+0x12>
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	49 f0       	breq	.+18     	; 0xc3e <DIO_voidSetPortValue+0x1e>
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	19 f0       	breq	.+6      	; 0xc36 <DIO_voidSetPortValue+0x16>
     c30:	08 95       	ret
		case DIO_u8_PORTA :PORTA=u8PortVal;  break;
     c32:	6b bb       	out	0x1b, r22	; 27
     c34:	08 95       	ret
		case DIO_u8_PORTB :PORTB=u8PortVal; break;
		case DIO_u8_PORTC :PORTC=u8PortVal; break;
		case DIO_u8_PORTD :PORTD=u8PortVal;  break;
     c36:	62 bb       	out	0x12, r22	; 18
     c38:	08 95       	ret
}
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal){
		
	switch(u8PortId){
		case DIO_u8_PORTA :PORTA=u8PortVal;  break;
		case DIO_u8_PORTB :PORTB=u8PortVal; break;
     c3a:	68 bb       	out	0x18, r22	; 24
     c3c:	08 95       	ret
		case DIO_u8_PORTC :PORTC=u8PortVal; break;
     c3e:	65 bb       	out	0x15, r22	; 21
     c40:	08 95       	ret

00000c42 <DIO_u8GetPinValue>:
		case DIO_u8_PORTD :PORTD=u8PortVal;  break;
	}
}
u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
	u8 value = 0;
	switch(u8PortIdCopy){
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	d1 f0       	breq	.+52     	; 0xc7a <DIO_u8GetPinValue+0x38>
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	30 f0       	brcs	.+12     	; 0xc56 <DIO_u8GetPinValue+0x14>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	f9 f0       	breq	.+62     	; 0xc8c <DIO_u8GetPinValue+0x4a>
     c4e:	83 30       	cpi	r24, 0x03	; 3
     c50:	59 f0       	breq	.+22     	; 0xc68 <DIO_u8GetPinValue+0x26>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	08 95       	ret
		case DIO_u8_PORTA : value = GET_BIT(PINA , u8PinIdCopy); break;
     c56:	89 b3       	in	r24, 0x19	; 25
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <DIO_u8GetPinValue+0x1e>
     c5c:	95 95       	asr	r25
     c5e:	87 95       	ror	r24
     c60:	6a 95       	dec	r22
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <DIO_u8GetPinValue+0x1a>
     c64:	81 70       	andi	r24, 0x01	; 1
     c66:	08 95       	ret
		case DIO_u8_PORTB : value = GET_BIT(PINB , u8PinIdCopy); break;
		case DIO_u8_PORTC : value = GET_BIT(PINC , u8PinIdCopy); break;
		case DIO_u8_PORTD : value = GET_BIT(PIND , u8PinIdCopy); break;
     c68:	80 b3       	in	r24, 0x10	; 16
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <DIO_u8GetPinValue+0x30>
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	6a 95       	dec	r22
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <DIO_u8GetPinValue+0x2c>
     c76:	81 70       	andi	r24, 0x01	; 1
	}
	return value;
}
     c78:	08 95       	ret
}
u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
	u8 value = 0;
	switch(u8PortIdCopy){
		case DIO_u8_PORTA : value = GET_BIT(PINA , u8PinIdCopy); break;
		case DIO_u8_PORTB : value = GET_BIT(PINB , u8PinIdCopy); break;
     c7a:	86 b3       	in	r24, 0x16	; 22
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_u8GetPinValue+0x42>
     c80:	95 95       	asr	r25
     c82:	87 95       	ror	r24
     c84:	6a 95       	dec	r22
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_u8GetPinValue+0x3e>
     c88:	81 70       	andi	r24, 0x01	; 1
     c8a:	08 95       	ret
		case DIO_u8_PORTC : value = GET_BIT(PINC , u8PinIdCopy); break;
     c8c:	83 b3       	in	r24, 0x13	; 19
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_u8GetPinValue+0x54>
     c92:	95 95       	asr	r25
     c94:	87 95       	ror	r24
     c96:	6a 95       	dec	r22
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_u8GetPinValue+0x50>
     c9a:	81 70       	andi	r24, 0x01	; 1
     c9c:	08 95       	ret

00000c9e <DIO_voidSetPinValue>:
	}
	return value;
}

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
     c9e:	41 30       	cpi	r20, 0x01	; 1
     ca0:	81 f0       	breq	.+32     	; 0xcc2 <DIO_voidSetPinValue+0x24>
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	49 f1       	breq	.+82     	; 0xcf8 <DIO_voidSetPinValue+0x5a>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	b8 f4       	brcc	.+46     	; 0xcd8 <DIO_voidSetPinValue+0x3a>
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
     caa:	2b b3       	in	r18, 0x1b	; 27
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_voidSetPinValue+0x18>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	6a 95       	dec	r22
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_voidSetPinValue+0x14>
     cba:	80 95       	com	r24
     cbc:	82 23       	and	r24, r18
     cbe:	8b bb       	out	0x1b, r24	; 27
     cc0:	08 95       	ret
}

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_voidSetPinValue+0x2a>
     cc6:	46 c0       	rjmp	.+140    	; 0xd54 <DIO_voidSetPinValue+0xb6>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	10 f1       	brcs	.+68     	; 0xd10 <DIO_voidSetPinValue+0x72>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	09 f4       	brne	.+2      	; 0xcd2 <DIO_voidSetPinValue+0x34>
     cd0:	4c c0       	rjmp	.+152    	; 0xd6a <DIO_voidSetPinValue+0xcc>
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	a1 f1       	breq	.+104    	; 0xd3e <DIO_voidSetPinValue+0xa0>
     cd6:	08 95       	ret
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	29 f1       	breq	.+74     	; 0xd26 <DIO_voidSetPinValue+0x88>
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	d9 f7       	brne	.-10     	; 0xcd6 <DIO_voidSetPinValue+0x38>
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : CLR_BIT(PORTD , u8PinIdCopy); break;
     ce0:	22 b3       	in	r18, 0x12	; 18
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_voidSetPinValue+0x4e>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	6a 95       	dec	r22
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_voidSetPinValue+0x4a>
     cf0:	80 95       	com	r24
     cf2:	82 23       	and	r24, r18
     cf4:	82 bb       	out	0x12, r24	; 18
     cf6:	08 95       	ret
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
     cf8:	28 b3       	in	r18, 0x18	; 24
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_voidSetPinValue+0x66>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	6a 95       	dec	r22
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_voidSetPinValue+0x62>
     d08:	80 95       	com	r24
     d0a:	82 23       	and	r24, r18
     d0c:	88 bb       	out	0x18, r24	; 24
     d0e:	08 95       	ret

void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
     d10:	2b b3       	in	r18, 0x1b	; 27
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_voidSetPinValue+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	6a 95       	dec	r22
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_voidSetPinValue+0x7a>
     d20:	28 2b       	or	r18, r24
     d22:	2b bb       	out	0x1b, r18	; 27
     d24:	08 95       	ret
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
     d26:	25 b3       	in	r18, 0x15	; 21
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_voidSetPinValue+0x94>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_voidSetPinValue+0x90>
     d36:	80 95       	com	r24
     d38:	82 23       	and	r24, r18
     d3a:	85 bb       	out	0x15, r24	; 21
     d3c:	08 95       	ret
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
     d3e:	22 b3       	in	r18, 0x12	; 18
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidSetPinValue+0xac>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	6a 95       	dec	r22
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidSetPinValue+0xa8>
     d4e:	28 2b       	or	r18, r24
     d50:	22 bb       	out	0x12, r18	; 18
     d52:	08 95       	ret
void DIO_voidSetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
	if(u8PinValCopy == DIO_u8_HIGH)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
     d54:	28 b3       	in	r18, 0x18	; 24
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_voidSetPinValue+0xc2>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_voidSetPinValue+0xbe>
     d64:	28 2b       	or	r18, r24
     d66:	28 bb       	out	0x18, r18	; 24
     d68:	08 95       	ret
			case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
     d6a:	25 b3       	in	r18, 0x15	; 21
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_voidSetPinValue+0xd8>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	6a 95       	dec	r22
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_voidSetPinValue+0xd4>
     d7a:	28 2b       	or	r18, r24
     d7c:	25 bb       	out	0x15, r18	; 21
     d7e:	08 95       	ret

00000d80 <DIO_voidSetPinDirection>:

	}

}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
     d80:	41 30       	cpi	r20, 0x01	; 1
     d82:	81 f0       	breq	.+32     	; 0xda4 <DIO_voidSetPinDirection+0x24>
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	49 f1       	breq	.+82     	; 0xdda <DIO_voidSetPinDirection+0x5a>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	b8 f4       	brcc	.+46     	; 0xdba <DIO_voidSetPinDirection+0x3a>
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
     d8c:	2a b3       	in	r18, 0x1a	; 26
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_voidSetPinDirection+0x18>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_voidSetPinDirection+0x14>
     d9c:	80 95       	com	r24
     d9e:	82 23       	and	r24, r18
     da0:	8a bb       	out	0x1a, r24	; 26
     da2:	08 95       	ret

}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_voidSetPinDirection+0x2a>
     da8:	46 c0       	rjmp	.+140    	; 0xe36 <DIO_voidSetPinDirection+0xb6>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	10 f1       	brcs	.+68     	; 0xdf2 <DIO_voidSetPinDirection+0x72>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	09 f4       	brne	.+2      	; 0xdb4 <DIO_voidSetPinDirection+0x34>
     db2:	4c c0       	rjmp	.+152    	; 0xe4c <DIO_voidSetPinDirection+0xcc>
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	a1 f1       	breq	.+104    	; 0xe20 <DIO_voidSetPinDirection+0xa0>
     db8:	08 95       	ret
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	29 f1       	breq	.+74     	; 0xe08 <DIO_voidSetPinDirection+0x88>
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <DIO_voidSetPinDirection+0x38>
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : CLR_BIT(DDRD , u8PinIdCopy); break;
     dc2:	21 b3       	in	r18, 0x11	; 17
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_voidSetPinDirection+0x4e>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	6a 95       	dec	r22
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_voidSetPinDirection+0x4a>
     dd2:	80 95       	com	r24
     dd4:	82 23       	and	r24, r18
     dd6:	81 bb       	out	0x11, r24	; 17
     dd8:	08 95       	ret
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
     dda:	27 b3       	in	r18, 0x17	; 23
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_voidSetPinDirection+0x66>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	6a 95       	dec	r22
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_voidSetPinDirection+0x62>
     dea:	80 95       	com	r24
     dec:	82 23       	and	r24, r18
     dee:	87 bb       	out	0x17, r24	; 23
     df0:	08 95       	ret
}
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
     df2:	2a b3       	in	r18, 0x1a	; 26
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_voidSetPinDirection+0x7e>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	6a 95       	dec	r22
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_voidSetPinDirection+0x7a>
     e02:	28 2b       	or	r18, r24
     e04:	2a bb       	out	0x1a, r18	; 26
     e06:	08 95       	ret
		}
	}else{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : CLR_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : CLR_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : CLR_BIT(DDRC , u8PinIdCopy); break;
     e08:	24 b3       	in	r18, 0x14	; 20
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_voidSetPinDirection+0x94>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	6a 95       	dec	r22
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_voidSetPinDirection+0x90>
     e18:	80 95       	com	r24
     e1a:	82 23       	and	r24, r18
     e1c:	84 bb       	out	0x14, r24	; 20
     e1e:	08 95       	ret
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
			case DIO_u8_PORTD : SET_BIT(DDRD , u8PinIdCopy); break;
     e20:	21 b3       	in	r18, 0x11	; 17
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinDirection+0xac>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	6a 95       	dec	r22
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinDirection+0xa8>
     e30:	28 2b       	or	r18, r24
     e32:	21 bb       	out	0x11, r18	; 17
     e34:	08 95       	ret
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
	if(u8PinDirCopy == DIO_u8_OUTPUT)
	{
		switch(u8PortIdCopy){
			case DIO_u8_PORTA : SET_BIT(DDRA , u8PinIdCopy); break;
			case DIO_u8_PORTB : SET_BIT(DDRB , u8PinIdCopy); break;
     e36:	27 b3       	in	r18, 0x17	; 23
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_voidSetPinDirection+0xc2>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	6a 95       	dec	r22
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_voidSetPinDirection+0xbe>
     e46:	28 2b       	or	r18, r24
     e48:	27 bb       	out	0x17, r18	; 23
     e4a:	08 95       	ret
			case DIO_u8_PORTC : SET_BIT(DDRC , u8PinIdCopy); break;
     e4c:	24 b3       	in	r18, 0x14	; 20
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_voidSetPinDirection+0xd8>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	6a 95       	dec	r22
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_voidSetPinDirection+0xd4>
     e5c:	28 2b       	or	r18, r24
     e5e:	24 bb       	out	0x14, r18	; 20
     e60:	08 95       	ret

00000e62 <EXT2_IN_Enable>:
    GICR |=1<<6;
    GICR |=1<<7;
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
}
void EXT2_IN_Enable(void){}
     e62:	08 95       	ret

00000e64 <EXT1_IN_Enable>:
#include "GIE_interface.h"
#include "EXT_IN_Interface.h"
#include "EXT_IN_Register.h"
void EXT1_IN_Enable(void){
    // Enable global interrupts
	Global_Interrupt_Enable();
     e64:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>

    /*** INT0 Falling Edge ***/
    MCUCR |= (1 << 1);
     e68:	85 b7       	in	r24, 0x35	; 53
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1 << 0);
     e6e:	85 b7       	in	r24, 0x35	; 53
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	85 bf       	out	0x35, r24	; 53
    SET_BIT(MCUCR, 3);   // ISC01 = 1
     e74:	85 b7       	in	r24, 0x35	; 53
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	85 bf       	out	0x35, r24	; 53
    CLR_BIT(MCUCR, 2);   // ISC00 = 0
     e7a:	85 b7       	in	r24, 0x35	; 53
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	85 bf       	out	0x35, r24	; 53
    GICR |=1<<6;
     e80:	8b b7       	in	r24, 0x3b	; 59
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	8b bf       	out	0x3b, r24	; 59
    GICR |=1<<7;
     e86:	8b b7       	in	r24, 0x3b	; 59
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	8b bf       	out	0x3b, r24	; 59
    DIO_voidSetPinDirection(DIO_u8_PORTD,3,0);
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	63 e0       	ldi	r22, 0x03	; 3
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_u8_PORTD,3,1);
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	63 e0       	ldi	r22, 0x03	; 3
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
}
     ea0:	08 95       	ret

00000ea2 <Global_Interrupt_Disable>:
#include "../Library/BIT_MATH.h"
#include "../Library/STD_TYPES.h"
#include "GIE_Register.h"
#include "GIE_Interface.h"
void Global_Interrupt_Disable(void){
	CLR_BIT(SREG,7);
     ea2:	8f b7       	in	r24, 0x3f	; 63
     ea4:	8f 77       	andi	r24, 0x7F	; 127
     ea6:	8f bf       	out	0x3f, r24	; 63
}
     ea8:	08 95       	ret

00000eaa <Global_Interrupt_Enable>:
void Global_Interrupt_Enable(void){
	SET_BIT(SREG,7);
     eaa:	8f b7       	in	r24, 0x3f	; 63
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	8f bf       	out	0x3f, r24	; 63
}
     eb0:	08 95       	ret

00000eb2 <Timer0_voidSet_CompareMatch_Value>:
	OCR0=255;
	// Timer 0 counter
	SET_BIT(TIMSK,1);
}
void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
	OCR0 = u8_local_OCR_Value;
     eb2:	8c bf       	out	0x3c, r24	; 60
}
     eb4:	08 95       	ret

00000eb6 <Timer0_voidSetDuty>:
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
}

void Timer0_voidSetDuty(u8 duty)
{
    OCR0 = duty;   // 0 → 0% speed, 255 → 100% speed
     eb6:	8c bf       	out	0x3c, r24	; 60
}
     eb8:	08 95       	ret

00000eba <Timer0_voidInit_FastPWM>:
}

void Timer0_voidInit_FastPWM(void)
{
    // Fast PWM Mode
    SET_BIT(TCCR0, 6);
     eba:	83 b7       	in	r24, 0x33	; 51
     ebc:	80 64       	ori	r24, 0x40	; 64
     ebe:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 3);
     ec0:	83 b7       	in	r24, 0x33	; 51
     ec2:	88 60       	ori	r24, 0x08	; 8
     ec4:	83 bf       	out	0x33, r24	; 51

    // Non-Inverting Mode (Clear on compare match, set on TOP)
    CLR_BIT(TCCR0, 4);
     ec6:	83 b7       	in	r24, 0x33	; 51
     ec8:	8f 7e       	andi	r24, 0xEF	; 239
     eca:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 5);
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	83 bf       	out	0x33, r24	; 51

    // Prescaler = 8
    CLR_BIT(TCCR0, 0);
     ed2:	83 b7       	in	r24, 0x33	; 51
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, 1);
     ed8:	83 b7       	in	r24, 0x33	; 51
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	83 bf       	out	0x33, r24	; 51
    CLR_BIT(TCCR0, 2);
     ede:	83 b7       	in	r24, 0x33	; 51
     ee0:	8b 7f       	andi	r24, 0xFB	; 251
     ee2:	83 bf       	out	0x33, r24	; 51

    // Set OC0 (PB3) as output
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
     eee:	08 95       	ret

00000ef0 <Timer0_Init_Phase_PWM>:
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
}
void Timer0_Init_Phase_PWM(void){
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
     ef0:	83 b7       	in	r24, 0x33	; 51
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
     ef6:	83 b7       	in	r24, 0x33	; 51
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
     efc:	83 b7       	in	r24, 0x33	; 51
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
     f02:	83 b7       	in	r24, 0x33	; 51
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	8b 7f       	andi	r24, 0xFB	; 251
     f0c:	83 bf       	out	0x33, r24	; 51
	// set and clear at top
	CLR_BIT(TCCR0,4);
     f0e:	83 b7       	in	r24, 0x33	; 51
     f10:	8f 7e       	andi	r24, 0xEF	; 239
     f12:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,5);
     f14:	83 b7       	in	r24, 0x33	; 51
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	83 bf       	out	0x33, r24	; 51
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	63 e0       	ldi	r22, 0x03	; 3
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
     f24:	08 95       	ret

00000f26 <Timer0_Init_PWM>:
void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
	OCR0 = u8_local_OCR_Value;
}
void Timer0_Init_PWM(void){
	//Waveform Generation Mode fast pwm without ctc
	SET_BIT(TCCR0,6);
     f26:	83 b7       	in	r24, 0x33	; 51
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
     f2c:	83 b7       	in	r24, 0x33	; 51
     f2e:	88 60       	ori	r24, 0x08	; 8
     f30:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
     f32:	83 b7       	in	r24, 0x33	; 51
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
     f38:	83 b7       	in	r24, 0x33	; 51
     f3a:	82 60       	ori	r24, 0x02	; 2
     f3c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
     f3e:	83 b7       	in	r24, 0x33	; 51
     f40:	8b 7f       	andi	r24, 0xFB	; 251
     f42:	83 bf       	out	0x33, r24	; 51
	// set and clear at top
	SET_BIT(TCCR0,4);
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	80 61       	ori	r24, 0x10	; 16
     f48:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,5);
     f4a:	83 b7       	in	r24, 0x33	; 51
     f4c:	80 62       	ori	r24, 0x20	; 32
     f4e:	83 bf       	out	0x33, r24	; 51
	// set B3 out =1
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_OUTPUT);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	63 e0       	ldi	r22, 0x03	; 3
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
     f5a:	08 95       	ret

00000f5c <Timer0_void_CTC>:
	CLR_BIT(TCCR0,2);
	// Timer 0 counter
	SET_BIT(TIMSK,0);
}
void Timer0_void_CTC(){
	Global_Interrupt_Enable();
     f5c:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>
	//Waveform Generation Mode ctc
	CLR_BIT(TCCR0,6);
     f60:	83 b7       	in	r24, 0x33	; 51
     f62:	8f 7b       	andi	r24, 0xBF	; 191
     f64:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
     f66:	83 b7       	in	r24, 0x33	; 51
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
     f6c:	83 b7       	in	r24, 0x33	; 51
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
     f72:	83 b7       	in	r24, 0x33	; 51
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
     f78:	83 b7       	in	r24, 0x33	; 51
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	83 bf       	out	0x33, r24	; 51
	OCR0=255;
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	8c bf       	out	0x3c, r24	; 60
	// Timer 0 counter
	SET_BIT(TIMSK,1);
     f82:	89 b7       	in	r24, 0x39	; 57
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	89 bf       	out	0x39, r24	; 57
}
     f88:	08 95       	ret

00000f8a <Timer0_void_init>:
#include "DIO_Interface.h"
#include "GIE_Interface.h"
#include "Timer0_Interface.h"
#include "Timer0_Register.h"
void Timer0_void_init(void){
	Global_Interrupt_Enable();
     f8a:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>
	//Waveform Generation Mode Mode normal
	CLR_BIT(TCCR0,6);
     f8e:	83 b7       	in	r24, 0x33	; 51
     f90:	8f 7b       	andi	r24, 0xBF	; 191
     f92:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,3);
     f94:	83 b7       	in	r24, 0x33	; 51
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	83 bf       	out	0x33, r24	; 51
	//  Clock Select  8
	CLR_BIT(TCCR0,0);
     f9a:	83 b7       	in	r24, 0x33	; 51
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
     fa0:	83 b7       	in	r24, 0x33	; 51
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
     fa6:	83 b7       	in	r24, 0x33	; 51
     fa8:	8b 7f       	andi	r24, 0xFB	; 251
     faa:	83 bf       	out	0x33, r24	; 51
	// Timer 0 counter
	SET_BIT(TIMSK,0);
     fac:	89 b7       	in	r24, 0x39	; 57
     fae:	81 60       	ori	r24, 0x01	; 1
     fb0:	89 bf       	out	0x39, r24	; 57
}
     fb2:	08 95       	ret

00000fb4 <Timer1_voidSetCompareMatchA>:
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_OUTPUT); // OC1B
}

void Timer1_voidSetCompareMatchA(u16 value)
{
    OCR1A = value;
     fb4:	9b bd       	out	0x2b, r25	; 43
     fb6:	8a bd       	out	0x2a, r24	; 42
}
     fb8:	08 95       	ret

00000fba <Timer1_voidSetCompareMatchB>:

void Timer1_voidSetCompareMatchB(u16 value)
{
    OCR1B = value;
     fba:	99 bd       	out	0x29, r25	; 41
     fbc:	88 bd       	out	0x28, r24	; 40
}
     fbe:	08 95       	ret

00000fc0 <Timer1_voidSetICR>:

void Timer1_voidSetICR(u16 value)
{
    ICR1 = value;
     fc0:	97 bd       	out	0x27, r25	; 39
     fc2:	86 bd       	out	0x26, r24	; 38
}
     fc4:	08 95       	ret

00000fc6 <Timer1_voidSetTCNT>:

void Timer1_voidSetTCNT(u16 value)
{
    TCNT1 = value;
     fc6:	9d bd       	out	0x2d, r25	; 45
     fc8:	8c bd       	out	0x2c, r24	; 44
}
     fca:	08 95       	ret

00000fcc <Timer1_voidSetDuty>:
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
}

void Timer1_voidSetDuty(u8 channel, u16 duty)
{
    if(channel == 0) // Channel A
     fcc:	88 23       	and	r24, r24
     fce:	19 f0       	breq	.+6      	; 0xfd6 <Timer1_voidSetDuty+0xa>
    {
        OCR1A = duty;
    }
    else if(channel == 1) // Channel B
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	21 f0       	breq	.+8      	; 0xfdc <Timer1_voidSetDuty+0x10>
     fd4:	08 95       	ret

void Timer1_voidSetDuty(u8 channel, u16 duty)
{
    if(channel == 0) // Channel A
    {
        OCR1A = duty;
     fd6:	7b bd       	out	0x2b, r23	; 43
     fd8:	6a bd       	out	0x2a, r22	; 42
     fda:	08 95       	ret
    }
    else if(channel == 1) // Channel B
    {
        OCR1B = duty;
     fdc:	79 bd       	out	0x29, r23	; 41
     fde:	68 bd       	out	0x28, r22	; 40
     fe0:	08 95       	ret

00000fe2 <Timer1_voidInitPWM>:
    TCNT1 = value;
}
void Timer1_voidInitPWM(u16 top, u8 prescaler)
{
    // Fast PWM mode, TOP = ICR1
    SET_BIT(TCCR1A, 1);
     fe2:	2f b5       	in	r18, 0x2f	; 47
     fe4:	22 60       	ori	r18, 0x02	; 2
     fe6:	2f bd       	out	0x2f, r18	; 47
    CLR_BIT(TCCR1A, 0);
     fe8:	2f b5       	in	r18, 0x2f	; 47
     fea:	2e 7f       	andi	r18, 0xFE	; 254
     fec:	2f bd       	out	0x2f, r18	; 47
    SET_BIT(TCCR1B, 3);
     fee:	2e b5       	in	r18, 0x2e	; 46
     ff0:	28 60       	ori	r18, 0x08	; 8
     ff2:	2e bd       	out	0x2e, r18	; 46
    SET_BIT(TCCR1B, 4);
     ff4:	2e b5       	in	r18, 0x2e	; 46
     ff6:	20 61       	ori	r18, 0x10	; 16
     ff8:	2e bd       	out	0x2e, r18	; 46

    // Non-inverting on Channel A (OC1A → PD5)
    CLR_BIT(TCCR1A, 6);
     ffa:	2f b5       	in	r18, 0x2f	; 47
     ffc:	2f 7b       	andi	r18, 0xBF	; 191
     ffe:	2f bd       	out	0x2f, r18	; 47
    SET_BIT(TCCR1A, 7);
    1000:	2f b5       	in	r18, 0x2f	; 47
    1002:	20 68       	ori	r18, 0x80	; 128
    1004:	2f bd       	out	0x2f, r18	; 47

    // Set TOP value
    ICR1 = top;
    1006:	97 bd       	out	0x27, r25	; 39
    1008:	86 bd       	out	0x26, r24	; 38

    // Prescaler
    switch(prescaler)
    100a:	68 30       	cpi	r22, 0x08	; 8
    100c:	41 f1       	breq	.+80     	; 0x105e <Timer1_voidInitPWM+0x7c>
    100e:	60 34       	cpi	r22, 0x40	; 64
    1010:	b9 f0       	breq	.+46     	; 0x1040 <Timer1_voidInitPWM+0x5e>
    1012:	61 30       	cpi	r22, 0x01	; 1
    1014:	31 f0       	breq	.+12     	; 0x1022 <Timer1_voidInitPWM+0x40>
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	65 e0       	ldi	r22, 0x05	; 5
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    1020:	08 95       	ret
    ICR1 = top;

    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    1022:	8e b5       	in	r24, 0x2e	; 46
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	8e bd       	out	0x2e, r24	; 46
    1028:	8e b5       	in	r24, 0x2e	; 46
    102a:	8d 7f       	andi	r24, 0xFD	; 253
    102c:	8e bd       	out	0x2e, r24	; 46
    102e:	8e b5       	in	r24, 0x2e	; 46
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	8e bd       	out	0x2e, r24	; 46
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	65 e0       	ldi	r22, 0x05	; 5
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    103e:	08 95       	ret
    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 8:   CLR_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 64:  SET_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    1040:	8e b5       	in	r24, 0x2e	; 46
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	8e bd       	out	0x2e, r24	; 46
    1046:	8e b5       	in	r24, 0x2e	; 46
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	8e bd       	out	0x2e, r24	; 46
    104c:	8e b5       	in	r24, 0x2e	; 46
    104e:	8b 7f       	andi	r24, 0xFB	; 251
    1050:	8e bd       	out	0x2e, r24	; 46
        case 256: CLR_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
        case 1024:SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); SET_BIT(TCCR1B, 2); break;
    }

    // Set OC1A (PD5) as output
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	65 e0       	ldi	r22, 0x05	; 5
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    105c:	08 95       	ret

    // Prescaler
    switch(prescaler)
    {
        case 1:   SET_BIT(TCCR1B, 0); CLR_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
        case 8:   CLR_BIT(TCCR1B, 0); SET_BIT(TCCR1B, 1); CLR_BIT(TCCR1B, 2); break;
    105e:	8e b5       	in	r24, 0x2e	; 46
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	f0 cf       	rjmp	.-32     	; 0x1044 <Timer1_voidInitPWM+0x62>

00001064 <Timer1_voidInit_FastPWM_B>:
}

void Timer1_voidInit_FastPWM_B(void)
{
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    1064:	8f b5       	in	r24, 0x2f	; 47
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,0);
    106a:	8f b5       	in	r24, 0x2f	; 47
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1B,3);
    1070:	8e b5       	in	r24, 0x2e	; 46
    1072:	88 60       	ori	r24, 0x08	; 8
    1074:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TCCR1B,4);
    1076:	8e b5       	in	r24, 0x2e	; 46
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	8e bd       	out	0x2e, r24	; 46

    /* Clear OC1B on compare match, set at TOP */
    SET_BIT(TCCR1A,5);
    107c:	8f b5       	in	r24, 0x2f	; 47
    107e:	80 62       	ori	r24, 0x20	; 32
    1080:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,4);
    1082:	8f b5       	in	r24, 0x2f	; 47
    1084:	8f 7e       	andi	r24, 0xEF	; 239
    1086:	8f bd       	out	0x2f, r24	; 47

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    1088:	8e b5       	in	r24, 0x2e	; 46
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8e bd       	out	0x2e, r24	; 46

    /* OC1B pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_OUTPUT); // OC1B
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	64 e0       	ldi	r22, 0x04	; 4
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    1098:	08 95       	ret

0000109a <Timer1_voidInit_FastPWM_A>:
}

void Timer1_voidInit_FastPWM_A(void)
{
    /* Fast PWM with ICR1 as TOP */
    SET_BIT(TCCR1A,1);
    109a:	8f b5       	in	r24, 0x2f	; 47
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,0);
    10a0:	8f b5       	in	r24, 0x2f	; 47
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1B,3);
    10a6:	8e b5       	in	r24, 0x2e	; 46
    10a8:	88 60       	ori	r24, 0x08	; 8
    10aa:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TCCR1B,4);
    10ac:	8e b5       	in	r24, 0x2e	; 46
    10ae:	80 61       	ori	r24, 0x10	; 16
    10b0:	8e bd       	out	0x2e, r24	; 46

    /* Clear OC1A on compare match, set at TOP */
    SET_BIT(TCCR1A,7);
    10b2:	8f b5       	in	r24, 0x2f	; 47
    10b4:	80 68       	ori	r24, 0x80	; 128
    10b6:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,6);
    10b8:	8f b5       	in	r24, 0x2f	; 47
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	8f bd       	out	0x2f, r24	; 47

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    10be:	8e b5       	in	r24, 0x2e	; 46
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	8e bd       	out	0x2e, r24	; 46

    /* OC1A pin as output */
    DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_OUTPUT); // OC1A
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	65 e0       	ldi	r22, 0x05	; 5
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    10ce:	08 95       	ret

000010d0 <Timer1_voidInit_CTC_B>:
    /* Enable OCR1A interrupt */
    SET_BIT(TIMSK,4);
}

void Timer1_voidInit_CTC_B(u16 compareValue)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	8c 01       	movw	r16, r24
    Global_Interrupt_Enable();
    10d6:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>

    /* CTC mode with OCR1B */
    CLR_BIT(TCCR1A,0);
    10da:	8f b5       	in	r24, 0x2f	; 47
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1A,1);
    10e0:	8f b5       	in	r24, 0x2f	; 47
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    10e6:	8e b5       	in	r24, 0x2e	; 46
    10e8:	87 7f       	andi	r24, 0xF7	; 247
    10ea:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    10ec:	8e b5       	in	r24, 0x2e	; 46
    10ee:	8f 7e       	andi	r24, 0xEF	; 239
    10f0:	8e bd       	out	0x2e, r24	; 46

    OCR1B = compareValue;
    10f2:	19 bd       	out	0x29, r17	; 41
    10f4:	08 bd       	out	0x28, r16	; 40

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    10f6:	8e b5       	in	r24, 0x2e	; 46
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	8e bd       	out	0x2e, r24	; 46

    /* Enable OCR1B interrupt */
    SET_BIT(TIMSK,3);
    10fc:	89 b7       	in	r24, 0x39	; 57
    10fe:	88 60       	ori	r24, 0x08	; 8
    1100:	89 bf       	out	0x39, r24	; 57
}
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <Timer1_voidInit_CTC_A>:
    /* Enable overflow interrupt */
    SET_BIT(TIMSK,2);
}

void Timer1_voidInit_CTC_A(u16 compareValue)
{
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	8c 01       	movw	r16, r24
    Global_Interrupt_Enable();
    110e:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>

    /* CTC mode with OCR1A */
    CLR_BIT(TCCR1A,0);
    1112:	8f b5       	in	r24, 0x2f	; 47
    1114:	8e 7f       	andi	r24, 0xFE	; 254
    1116:	8f bd       	out	0x2f, r24	; 47
    SET_BIT(TCCR1A,1);
    1118:	8f b5       	in	r24, 0x2f	; 47
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    111e:	8e b5       	in	r24, 0x2e	; 46
    1120:	87 7f       	andi	r24, 0xF7	; 247
    1122:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    1124:	8e b5       	in	r24, 0x2e	; 46
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	8e bd       	out	0x2e, r24	; 46

    OCR1A = compareValue;
    112a:	1b bd       	out	0x2b, r17	; 43
    112c:	0a bd       	out	0x2a, r16	; 42

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    112e:	8e b5       	in	r24, 0x2e	; 46
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	8e bd       	out	0x2e, r24	; 46

    /* Enable OCR1A interrupt */
    SET_BIT(TIMSK,4);
    1134:	89 b7       	in	r24, 0x39	; 57
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	89 bf       	out	0x39, r24	; 57
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <Timer1_voidInit_Normal>:
#include "DIO_Interface.h"
#include "GIE_Interface.h"

void Timer1_voidInit_Normal(void)
{
    Global_Interrupt_Enable();
    1140:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>

    /* Normal mode */
    CLR_BIT(TCCR1A,0);
    1144:	8f b5       	in	r24, 0x2f	; 47
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1A,1);
    114a:	8f b5       	in	r24, 0x2f	; 47
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TCCR1B,3);
    1150:	8e b5       	in	r24, 0x2e	; 46
    1152:	87 7f       	andi	r24, 0xF7	; 247
    1154:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TCCR1B,4);
    1156:	8e b5       	in	r24, 0x2e	; 46
    1158:	8f 7e       	andi	r24, 0xEF	; 239
    115a:	8e bd       	out	0x2e, r24	; 46

    /* Prescaler */
    TCCR1B |= TIMER1_PRESCALER;
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	82 60       	ori	r24, 0x02	; 2
    1160:	8e bd       	out	0x2e, r24	; 46

    /* Enable overflow interrupt */
    SET_BIT(TIMSK,2);
    1162:	89 b7       	in	r24, 0x39	; 57
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	89 bf       	out	0x39, r24	; 57
}
    1168:	08 95       	ret

0000116a <GET_Key_Number>:
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}

u8 GET_Key_Number(void){
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cc e7       	ldi	r28, 0x7C	; 124
    1174:	d1 e0       	ldi	r29, 0x01	; 1
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	68 81       	ld	r22, Y
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	60 91 78 01 	lds	r22, 0x0178
    118a:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    118e:	88 23       	and	r24, r24
    1190:	31 f1       	breq	.+76     	; 0x11de <GET_Key_Number+0x74>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	60 91 79 01 	lds	r22, 0x0179
    1198:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    119c:	88 23       	and	r24, r24
    119e:	99 f1       	breq	.+102    	; 0x1206 <GET_Key_Number+0x9c>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	60 91 7a 01 	lds	r22, 0x017A
    11a6:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    11aa:	88 23       	and	r24, r24
    11ac:	81 f1       	breq	.+96     	; 0x120e <GET_Key_Number+0xa4>

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	60 91 7b 01 	lds	r22, 0x017B
    11b4:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
			if(DIO_u8_LOW == state){
    11b8:	88 23       	and	r24, r24
    11ba:	69 f1       	breq	.+90     	; 0x1216 <GET_Key_Number+0xac>
				pressed_key = KPD_au8SwitchVal[j][i];
				return j;
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	69 91       	ld	r22, Y+
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    11c6:	0f 5f       	subi	r16, 0xFF	; 255
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}

u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
    11ca:	04 30       	cpi	r16, 0x04	; 4
    11cc:	11 05       	cpc	r17, r1
    11ce:	a9 f6       	brne	.-86     	; 0x117a <GET_Key_Number+0x10>
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
	return NOT_Pressed;
}
    11d2:	89 2f       	mov	r24, r25
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret
u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
			if(DIO_u8_LOW == state){
    11de:	e0 e0       	ldi	r30, 0x00	; 0
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
				pressed_key = KPD_au8SwitchVal[j][i];
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	e0 0f       	add	r30, r16
    11ee:	f1 1f       	adc	r31, r17
    11f0:	e8 59       	subi	r30, 0x98	; 152
    11f2:	fe 4f       	sbci	r31, 0xFE	; 254
    11f4:	80 81       	ld	r24, Z
    11f6:	80 93 80 01 	sts	0x0180, r24
			}
		}
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
	return NOT_Pressed;
}
    11fa:	89 2f       	mov	r24, r25
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret
u8 GET_Key_Number(void){
	for(u8 i = 0;i <4 ; i++){
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_LOW);
		for(u8 j = 0 ; j < 4 ; j++){
			u8 state = DIO_u8GetPinValue(Keypad_PORT,ROWS[j]);
			if(DIO_u8_LOW == state){
    1206:	e1 e0       	ldi	r30, 0x01	; 1
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	eb cf       	rjmp	.-42     	; 0x11e4 <GET_Key_Number+0x7a>
    120e:	e2 e0       	ldi	r30, 0x02	; 2
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	e7 cf       	rjmp	.-50     	; 0x11e4 <GET_Key_Number+0x7a>
    1216:	e3 e0       	ldi	r30, 0x03	; 3
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	e3 cf       	rjmp	.-58     	; 0x11e4 <GET_Key_Number+0x7a>

0000121e <KPD_setup>:
u8 KPD_au8SwitchVal[4][4] = KPD_Array;
u8 ROWS[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
	pressed_key = NOT_Pressed;
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	80 93 80 01 	sts	0x0180, r24
    122c:	c8 e7       	ldi	r28, 0x78	; 120
    122e:	d1 e0       	ldi	r29, 0x01	; 1
    1230:	0c e7       	ldi	r16, 0x7C	; 124
    1232:	11 e0       	ldi	r17, 0x01	; 1
	for(u8 i = 0; i < 4 ; i++){
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	68 81       	ld	r22, Y
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	69 91       	ld	r22, Y+
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	f8 01       	movw	r30, r16
    124c:	60 81       	ld	r22, Z
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	f8 01       	movw	r30, r16
    1258:	61 91       	ld	r22, Z+
    125a:	8f 01       	movw	r16, r30
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
u8 COLS[4]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
u8 pressed_key = NOT_Pressed;
static u8 last_pressed_key = NOT_Pressed;
void KPD_setup(void){
	pressed_key = NOT_Pressed;
	for(u8 i = 0; i < 4 ; i++){
    1262:	f1 e0       	ldi	r31, 0x01	; 1
    1264:	cc 37       	cpi	r28, 0x7C	; 124
    1266:	df 07       	cpc	r29, r31
    1268:	29 f7       	brne	.-54     	; 0x1234 <KPD_setup+0x16>
		DIO_voidSetPinDirection(Keypad_PORT,ROWS[i],DIO_u8_INPUT);
		DIO_voidSetPinValue(Keypad_PORT,ROWS[i],DIO_u8_HIGH);
		DIO_voidSetPinDirection(Keypad_PORT,COLS[i],DIO_u8_OUTPUT);
		DIO_voidSetPinValue(Keypad_PORT,COLS[i],DIO_u8_HIGH);
	}
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <GET_Pressed_Time>:
			return NOT_Pressed;
		}
	}

}
u32 GET_Pressed_Time(void){
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
	KPD_setup();
    1284:	0e 94 0f 09 	call	0x121e	; 0x121e <KPD_setup>
	u8 col = GET_Key_Number();
    1288:	0e 94 b5 08 	call	0x116a	; 0x116a <GET_Key_Number>
    128c:	c8 2e       	mov	r12, r24
    128e:	dd 24       	eor	r13, r13
    1290:	ee 24       	eor	r14, r14
    1292:	ff 24       	eor	r15, r15
    1294:	87 01       	movw	r16, r14
    1296:	88 e7       	ldi	r24, 0x78	; 120
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	c8 0e       	add	r12, r24
    129c:	d9 1e       	adc	r13, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    129e:	c8 ec       	ldi	r28, 0xC8	; 200
    12a0:	d0 e0       	ldi	r29, 0x00	; 0
	u32 press_time = 0;
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	d6 01       	movw	r26, r12
    12a6:	6c 91       	ld	r22, X
    12a8:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
    12ac:	88 23       	and	r24, r24
    12ae:	b9 f4       	brne	.+46     	; 0x12de <GET_Pressed_Time+0x6a>
    12b0:	20 e1       	ldi	r18, 0x10	; 16
    12b2:	37 e2       	ldi	r19, 0x27	; 39
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <GET_Pressed_Time+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	21 50       	subi	r18, 0x01	; 1
    12bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	d1 f7       	brne	.-12     	; 0x12b4 <GET_Pressed_Time+0x40>
		_delay_ms(1000);
		press_time+=1000;
    12c0:	88 ee       	ldi	r24, 0xE8	; 232
    12c2:	93 e0       	ldi	r25, 0x03	; 3
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 0e       	add	r14, r24
    12ca:	f9 1e       	adc	r15, r25
    12cc:	0a 1f       	adc	r16, r26
    12ce:	1b 1f       	adc	r17, r27
}
u32 GET_Pressed_Time(void){
	KPD_setup();
	u8 col = GET_Key_Number();
	u32 press_time = 0;
	while(DIO_u8_LOW == DIO_u8GetPinValue(Keypad_PORT,ROWS[col])) {
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	d6 01       	movw	r26, r12
    12d4:	6c 91       	ld	r22, X
    12d6:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
    12da:	88 23       	and	r24, r24
    12dc:	49 f3       	breq	.-46     	; 0x12b0 <GET_Pressed_Time+0x3c>
		_delay_ms(1000);
		press_time+=1000;
	}
    return press_time;
}
    12de:	b7 01       	movw	r22, r14
    12e0:	c8 01       	movw	r24, r16
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	08 95       	ret

000012f4 <GET_Pressed_Key>:
	}
	return NOT_Pressed;
}
//---------------------------------------------------------------
u8 GET_Pressed_Key(void){
	KPD_setup();
    12f4:	0e 94 0f 09 	call	0x121e	; 0x121e <KPD_setup>
    GET_Key_Number();
    12f8:	0e 94 b5 08 	call	0x116a	; 0x116a <GET_Key_Number>
	if(last_pressed_key == pressed_key){
    12fc:	90 91 81 01 	lds	r25, 0x0181
    1300:	80 91 80 01 	lds	r24, 0x0180
    1304:	98 17       	cp	r25, r24
    1306:	31 f0       	breq	.+12     	; 0x1314 <GET_Pressed_Key+0x20>
		return NOT_Pressed;
	}else{
		if(last_pressed_key == NOT_Pressed){
    1308:	9f 3f       	cpi	r25, 0xFF	; 255
    130a:	31 f0       	breq	.+12     	; 0x1318 <GET_Pressed_Key+0x24>
			last_pressed_key = pressed_key;
			return pressed_key;
		}else {
			last_pressed_key = pressed_key;
    130c:	80 93 81 01 	sts	0x0181, r24
    1310:	8f ef       	ldi	r24, 0xFF	; 255
			return NOT_Pressed;
		}
	}

}
    1312:	08 95       	ret
}
//---------------------------------------------------------------
u8 GET_Pressed_Key(void){
	KPD_setup();
    GET_Key_Number();
	if(last_pressed_key == pressed_key){
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	08 95       	ret
		return NOT_Pressed;
	}else{
		if(last_pressed_key == NOT_Pressed){
			last_pressed_key = pressed_key;
    1318:	80 93 81 01 	sts	0x0181, r24
    131c:	08 95       	ret

0000131e <L298_voidMove>:

void L298_voidMove(u8 Copy_u8Direction)
{
//	u16 duty_motorA = (Copy_u8SpeedPercent * 255) / 100;      // Timer0
//	u16 duty_motorB = (Copy_u8SpeedPercent * 19999) / 100;    // Timer1
    switch(Copy_u8Direction)
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	09 f4       	brne	.+2      	; 0x1324 <L298_voidMove+0x6>
    1322:	4b c0       	rjmp	.+150    	; 0x13ba <L298_voidMove+0x9c>
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	30 f0       	brcs	.+12     	; 0x1334 <L298_voidMove+0x16>
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	09 f4       	brne	.+2      	; 0x132e <L298_voidMove+0x10>
    132c:	4a c0       	rjmp	.+148    	; 0x13c2 <L298_voidMove+0xa4>
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	79 f1       	breq	.+94     	; 0x1390 <L298_voidMove+0x72>
    1332:	08 95       	ret
    1334:	88 23       	and	r24, r24
    1336:	a9 f4       	brne	.+42     	; 0x1362 <L298_voidMove+0x44>
    {
        case MOVE_FORWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	64 e0       	ldi	r22, 0x04	; 4
    133c:	41 e0       	ldi	r20, 0x01	; 1
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    133e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	65 e0       	ldi	r22, 0x05	; 5
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	66 e0       	ldi	r22, 0x06	; 6
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	67 e0       	ldi	r22, 0x07	; 7
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1360:	08 95       	ret

void L298_voidMove(u8 Copy_u8Direction)
{
//	u16 duty_motorA = (Copy_u8SpeedPercent * 255) / 100;      // Timer0
//	u16 duty_motorB = (Copy_u8SpeedPercent * 19999) / 100;    // Timer1
    switch(Copy_u8Direction)
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	31 f7       	brne	.-52     	; 0x1332 <L298_voidMove+0x14>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);

            break;

        case MOVE_BACKWARD:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	64 e0       	ldi	r22, 0x04	; 4
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_HIGH);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	65 e0       	ldi	r22, 0x05	; 5
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	66 e0       	ldi	r22, 0x06	; 6
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_HIGH);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	67 e0       	ldi	r22, 0x07	; 7
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    138e:	08 95       	ret
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
              break;

        case MOVE_STOP:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	65 e0       	ldi	r22, 0x05	; 5
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	66 e0       	ldi	r22, 0x06	; 6
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	67 e0       	ldi	r22, 0x07	; 7
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    13b8:	08 95       	ret
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	64 e0       	ldi	r22, 0x04	; 4
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	be cf       	rjmp	.-132    	; 0x133e <L298_voidMove+0x20>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_HIGH);
             break;

        case MOVE_RIGHT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_HIGH);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	65 e0       	ldi	r22, 0x05	; 5
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_LOW);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	66 e0       	ldi	r22, 0x06	; 6
    13da:	40 e0       	ldi	r20, 0x00	; 0
               break;

        case MOVE_LEFT:
            DIO_voidSetPinValue(DIO_u8_PORTB, IN1, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN2, DIO_u8_LOW);
            DIO_voidSetPinValue(DIO_u8_PORTB, IN3, DIO_u8_HIGH);
    13dc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
            DIO_voidSetPinValue(DIO_u8_PORTB, IN4, DIO_u8_LOW);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	67 e0       	ldi	r22, 0x07	; 7
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    13ea:	08 95       	ret

000013ec <L298_voidInit>:


void L298_voidInit(void)
{
    // Outputs
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN1, DIO_u8_OUTPUT);
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN2, DIO_u8_OUTPUT);
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	65 e0       	ldi	r22, 0x05	; 5
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN3, DIO_u8_OUTPUT);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	66 e0       	ldi	r22, 0x06	; 6
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTB, IN4, DIO_u8_OUTPUT);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
//    DIO_voidSetPinDirection(DIO_u8_PORTB, ENA, DIO_u8_OUTPUT);
//    DIO_voidSetPinDirection(DIO_u8_PORTB, ENB, DIO_u8_OUTPUT);
//    Timer0_voidInit_FastPWM();                          // ENA → Motor A
//	Timer1_voidInitPWM(19999, TIMER1_PRESCALER_8);      // ENB → Motor B

}
    1414:	08 95       	ret

00001416 <LCD_Command>:
}

void LCD_Command( unsigned char cmnd )
{

	PORTC &= ~ (1<<RS);		/* RS=0, command reg. */
    1416:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~ (1<<1);     /*RW -> 0 Writing */
    1418:	a9 98       	cbi	0x15, 1	; 21
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    141a:	98 b3       	in	r25, 0x18	; 24
    141c:	28 2f       	mov	r18, r24
    141e:	20 7f       	andi	r18, 0xF0	; 240
    1420:	9f 70       	andi	r25, 0x0F	; 15
    1422:	29 2b       	or	r18, r25
    1424:	28 bb       	out	0x18, r18	; 24

	PORTC |= (1<<EN);		/* Enable pulse */
    1426:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1428:	22 e0       	ldi	r18, 0x02	; 2
    142a:	92 2f       	mov	r25, r18
    142c:	9a 95       	dec	r25
    142e:	f1 f7       	brne	.-4      	; 0x142c <LCD_Command+0x16>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    1430:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1432:	e0 e9       	ldi	r30, 0x90	; 144
    1434:	f1 e0       	ldi	r31, 0x01	; 1
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_Command+0x20>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    143a:	98 b3       	in	r25, 0x18	; 24
    143c:	82 95       	swap	r24
    143e:	80 7f       	andi	r24, 0xF0	; 240
    1440:	9f 70       	andi	r25, 0x0F	; 15
    1442:	98 2b       	or	r25, r24
    1444:	98 bb       	out	0x18, r25	; 24
	PORTC |= (1<<EN);
    1446:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1448:	2a 95       	dec	r18
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCD_Command+0x32>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    144c:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    144e:	80 ea       	ldi	r24, 0xA0	; 160
    1450:	9f e0       	ldi	r25, 0x0F	; 15
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_Command+0x3c>
	_delay_ms(2);
}
    1456:	08 95       	ret

00001458 <LCD_Char>:

void LCD_Char( unsigned char data )
{

	PORTC |= (1<<RS);		/* RS=1, data reg. */
    1458:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &=~ (1<<1);
    145a:	a9 98       	cbi	0x15, 1	; 21
	///0X1111
	///make to store only first 4 bits
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    145c:	98 b3       	in	r25, 0x18	; 24
    145e:	28 2f       	mov	r18, r24
    1460:	20 7f       	andi	r18, 0xF0	; 240
    1462:	9f 70       	andi	r25, 0x0F	; 15
    1464:	29 2b       	or	r18, r25
    1466:	28 bb       	out	0x18, r18	; 24

	PORTC|= (1<<EN);
    1468:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    146a:	22 e0       	ldi	r18, 0x02	; 2
    146c:	92 2f       	mov	r25, r18
    146e:	9a 95       	dec	r25
    1470:	f1 f7       	brne	.-4      	; 0x146e <LCD_Char+0x16>

	_delay_us(1
	);
	PORTC &= ~ (1<<EN);
    1472:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1474:	e0 e9       	ldi	r30, 0x90	; 144
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_Char+0x20>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    147c:	98 b3       	in	r25, 0x18	; 24
    147e:	82 95       	swap	r24
    1480:	80 7f       	andi	r24, 0xF0	; 240
    1482:	9f 70       	andi	r25, 0x0F	; 15
    1484:	98 2b       	or	r25, r24
    1486:	98 bb       	out	0x18, r25	; 24
	PORTC |= (1<<EN);
    1488:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    148a:	2a 95       	dec	r18
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_Char+0x32>
	_delay_us(1);
	PORTC &= ~ (1<<EN);
    148e:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1490:	80 ea       	ldi	r24, 0xA0	; 160
    1492:	9f e0       	ldi	r25, 0x0F	; 15
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_Char+0x3c>
	_delay_ms(2);
}
    1498:	08 95       	ret

0000149a <LCD_vidWriteNumber_4bits>:
        LCD_vidWriteCharctr(buffer[i]);
    }
}

void LCD_vidWriteNumber_4bits(u16 Copy_u16Number)
{
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	1f 93       	push	r17
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	2a 97       	sbiw	r28, 0x0a	; 10
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	9c 01       	movw	r18, r24
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	81 f1       	breq	.+96     	; 0x151a <LCD_vidWriteNumber_4bits+0x80>
    {
        LCD_Char('0');
        return;
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	7e 01       	movw	r14, r28
    14be:	08 94       	sec
    14c0:	e1 1c       	adc	r14, r1
    14c2:	f1 1c       	adc	r15, r1
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    14c4:	f7 01       	movw	r30, r14
    14c6:	e1 0f       	add	r30, r17
    14c8:	f1 1d       	adc	r31, r1
    14ca:	c9 01       	movw	r24, r18
    14cc:	6a e0       	ldi	r22, 0x0A	; 10
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodhi4>
    14d4:	80 5d       	subi	r24, 0xD0	; 208
    14d6:	80 83       	st	Z, r24
        Copy_u16Number /= 10;
    14d8:	c9 01       	movw	r24, r18
    14da:	6a e0       	ldi	r22, 0x0A	; 10
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodhi4>
    14e2:	9b 01       	movw	r18, r22
        i++;
    14e4:	1f 5f       	subi	r17, 0xFF	; 255
    {
        LCD_Char('0');
        return;
    }

    while (Copy_u16Number > 0)
    14e6:	61 15       	cp	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	61 f7       	brne	.-40     	; 0x14c4 <LCD_vidWriteNumber_4bits+0x2a>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    14ec:	11 23       	and	r17, r17
    14ee:	49 f0       	breq	.+18     	; 0x1502 <LCD_vidWriteNumber_4bits+0x68>
    {
        i--;
    14f0:	11 50       	subi	r17, 0x01	; 1
        LCD_Char(buffer[i]);
    14f2:	f7 01       	movw	r30, r14
    14f4:	e1 0f       	add	r30, r17
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_Char>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    14fe:	11 23       	and	r17, r17
    1500:	b9 f7       	brne	.-18     	; 0x14f0 <LCD_vidWriteNumber_4bits+0x56>
    {
        i--;
        LCD_Char(buffer[i]);
    }
}
    1502:	2a 96       	adiw	r28, 0x0a	; 10
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	1f 91       	pop	r17
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	08 95       	ret
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    {
        LCD_Char('0');
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_Char>
    1520:	f0 cf       	rjmp	.-32     	; 0x1502 <LCD_vidWriteNumber_4bits+0x68>

00001522 <LCD_String>:
	_delay_ms(2);

}

void LCD_String (char *str)		/* Send string to LCD function */
{
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	fc 01       	movw	r30, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1528:	80 81       	ld	r24, Z
    152a:	88 23       	and	r24, r24
    152c:	39 f0       	breq	.+14     	; 0x153c <LCD_String+0x1a>
    152e:	ef 01       	movw	r28, r30
	{
		LCD_Char (str[i]);
    1530:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	21 96       	adiw	r28, 0x01	; 1
    1538:	88 23       	and	r24, r24
    153a:	d1 f7       	brne	.-12     	; 0x1530 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
    1548:	88 23       	and	r24, r24
    154a:	41 f4       	brne	.+16     	; 0x155c <LCD_String_xy+0x1a>
    154c:	60 31       	cpi	r22, 0x10	; 16
    154e:	a8 f0       	brcs	.+42     	; 0x157a <LCD_String_xy+0x38>
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
    1550:	ce 01       	movw	r24, r28
    1552:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_String>
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	c1 f7       	brne	.-16     	; 0x1550 <LCD_String_xy+0xe>
    1560:	60 31       	cpi	r22, 0x10	; 16
    1562:	b0 f7       	brcc	.-20     	; 0x1550 <LCD_String_xy+0xe>
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1564:	6f 70       	andi	r22, 0x0F	; 15
    1566:	86 2f       	mov	r24, r22
    1568:	80 6c       	ori	r24, 0xC0	; 192
    156a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    156e:	ce 01       	movw	r24, r28
    1570:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_String>
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    157a:	6f 70       	andi	r22, 0x0F	; 15
    157c:	86 2f       	mov	r24, r22
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	else if (row == 1 && pos<16)
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
    1584:	ce 01       	movw	r24, r28
    1586:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_String>
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
    1596:	80 ea       	ldi	r24, 0xA0	; 160
    1598:	9f e0       	ldi	r25, 0x0F	; 15
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_Clear+0xa>
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    159e:	80 e8       	ldi	r24, 0x80	; 128
    15a0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
}
    15a4:	08 95       	ret

000015a6 <LCD_Init>:
}

void LCD_Init (void)			/* LCD Initialize function */
{

	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT); // RS
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT); // RW
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT); // E
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_u8_PORTB, 4, DIO_u8_OUTPUT); // D4
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 5, DIO_u8_OUTPUT); // D5
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	65 e0       	ldi	r22, 0x05	; 5
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 6, DIO_u8_OUTPUT); // D6
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	66 e0       	ldi	r22, 0x06	; 6
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTB, 7, DIO_u8_OUTPUT); // D7
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	67 e0       	ldi	r22, 0x07	; 7
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    15ec:	24 ef       	ldi	r18, 0xF4	; 244
    15ee:	31 e0       	ldi	r19, 0x01	; 1
    15f0:	48 ec       	ldi	r20, 0xC8	; 200
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	ca 01       	movw	r24, r20
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <LCD_Init+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	d1 f7       	brne	.-12     	; 0x15f4 <LCD_Init+0x4e>

	_delay_ms(50);

	LCD_Command(0x33);
    1600:	83 e3       	ldi	r24, 0x33	; 51
    1602:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x32);
    1606:	82 e3       	ldi	r24, 0x32	; 50
    1608:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x28);
    160c:	88 e2       	ldi	r24, 0x28	; 40
    160e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x0C);
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x06);
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x01);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
    1624:	80 ea       	ldi	r24, 0xA0	; 160
    1626:	9f e0       	ldi	r25, 0x0F	; 15
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_Init+0x82>
	_delay_ms(2);

}
    162c:	08 95       	ret

0000162e <LCD_vidInit_4bits>:



void LCD_vidInit_4bits(void)
{
	DIO_voidSetPortDirection(DIO_u8_PORTD,0XFF);
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	6f ef       	ldi	r22, 0xFF	; 255
    1632:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,0,DIO_u8_OUTPUT);
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,1,DIO_u8_OUTPUT);
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC,2,DIO_u8_OUTPUT);
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	62 e0       	ldi	r22, 0x02	; 2
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    1654:	20 e9       	ldi	r18, 0x90	; 144
    1656:	31 e0       	ldi	r19, 0x01	; 1
    1658:	48 ec       	ldi	r20, 0xC8	; 200
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	ca 01       	movw	r24, r20
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_vidInit_4bits+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	d1 f7       	brne	.-12     	; 0x165c <LCD_vidInit_4bits+0x2e>
	_delay_ms(40);
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    166e:	88 e2       	ldi	r24, 0x28	; 40
    1670:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    1674:	8c e0       	ldi	r24, 0x0C	; 12
    1676:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_Command>
    1686:	80 ea       	ldi	r24, 0xA0	; 160
    1688:	9f e0       	ldi	r25, 0x0F	; 15
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_vidInit_4bits+0x5c>
	_delay_ms(2);


}
    168e:	08 95       	ret

00001690 <LCD_vidSendCommand_4_Bits>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);

}
void LCD_vidSendCommand_4_Bits(uint8_t u8CmdCpy) {
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	f8 2e       	mov	r15, r24


	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8_LOW);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_u8_LOW);
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>

	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy & 0xF0); /* sending upper nibble */
    16ae:	88 b3       	in	r24, 0x18	; 24
    16b0:	9f 2d       	mov	r25, r15
    16b2:	90 7f       	andi	r25, 0xF0	; 240
    16b4:	8f 70       	andi	r24, 0x0F	; 15
    16b6:	98 2b       	or	r25, r24
    16b8:	98 bb       	out	0x18, r25	; 24

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16c4:	22 e0       	ldi	r18, 0x02	; 2
    16c6:	e2 2e       	mov	r14, r18
    16c8:	8e 2d       	mov	r24, r14
    16ca:	8a 95       	dec	r24
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_vidSendCommand_4_Bits+0x3a>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d8:	08 ec       	ldi	r16, 0xC8	; 200
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	c8 01       	movw	r24, r16
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_vidSendCommand_4_Bits+0x4e>
	_delay_us(100);



	LCD_Port = (LCD_Port & 0x0F) | (u8CmdCpy << 4);
    16e2:	88 b3       	in	r24, 0x18	; 24
    16e4:	f2 94       	swap	r15
    16e6:	90 ef       	ldi	r25, 0xF0	; 240
    16e8:	f9 22       	and	r15, r25
    16ea:	8f 70       	andi	r24, 0x0F	; 15
    16ec:	8f 29       	or	r24, r15
    16ee:	88 bb       	out	0x18, r24	; 24
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16fa:	ea 94       	dec	r14
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_vidSendCommand_4_Bits+0x6a>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1708:	c8 01       	movw	r24, r16
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_vidSendCommand_4_Bits+0x7a>
	_delay_us(100);

}
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	08 95       	ret

00001718 <LCD_vidWriteCharctr_4bits>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
	_delay_us(50);
}


void LCD_vidWriteCharctr_4bits(uint8_t u8DataCpy) {
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	08 2f       	mov	r16, r24


	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy >> 4) & 0x0F) << 4);
    1734:	60 2f       	mov	r22, r16
    1736:	60 7f       	andi	r22, 0xF0	; 240
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	0e 94 10 06 	call	0xc20	; 0xc20 <DIO_voidSetPortValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    173e:	42 e0       	ldi	r20, 0x02	; 2
    1740:	f4 2e       	mov	r15, r20
    1742:	8f 2d       	mov	r24, r15
    1744:	8a 95       	dec	r24
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_vidWriteCharctr_4bits+0x2c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1752:	8f 2d       	mov	r24, r15
    1754:	8a 95       	dec	r24
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_vidWriteCharctr_4bits+0x3c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1762:	88 ec       	ldi	r24, 0xC8	; 200
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_vidWriteCharctr_4bits+0x4e>
	_delay_us(100);

	DIO_voidSetPortValue(LCD_DATA_PORT, ((u8DataCpy & 0x0F) << 4));
    176a:	10 e0       	ldi	r17, 0x00	; 0
    176c:	02 95       	swap	r16
    176e:	12 95       	swap	r17
    1770:	10 7f       	andi	r17, 0xF0	; 240
    1772:	10 27       	eor	r17, r16
    1774:	00 7f       	andi	r16, 0xF0	; 240
    1776:	10 27       	eor	r17, r16
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	60 2f       	mov	r22, r16
    177c:	0e 94 10 06 	call	0xc20	; 0xc20 <DIO_voidSetPortValue>
	//	_delay_us(1);

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_HIGH);
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    178a:	fa 94       	dec	r15
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_vidWriteCharctr_4bits+0x72>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	62 e0       	ldi	r22, 0x02	; 2
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1798:	80 ea       	ldi	r24, 0xA0	; 160
    179a:	9f e0       	ldi	r25, 0x0F	; 15
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_vidWriteCharctr_4bits+0x84>
	_delay_ms(2);
}
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	08 95       	ret

000017a8 <LCD_vidWriteCharctr>:
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_u8_LOW);
	_delay_us(100);

}
void LCD_vidWriteCharctr(u8 u8DataCpy){
    17a8:	1f 93       	push	r17
    17aa:	18 2f       	mov	r17, r24
	///8 Bits (D0->D7)////

	///RS -> 1 for Data////
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_HIGH);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	//RW PIN writing active LOW
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortValue(LCD_DATA_PORT,u8DataCpy);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	61 2f       	mov	r22, r17
    17c4:	0e 94 10 06 	call	0xc20	; 0xc20 <DIO_voidSetPortValue>
	//EnaLCD_vidWriteCharctrble
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	8a 95       	dec	r24
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_vidWriteCharctr+0x2c>
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	62 e0       	ldi	r22, 0x02	; 2
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    17e2:	85 e8       	ldi	r24, 0x85	; 133
    17e4:	8a 95       	dec	r24
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_vidWriteCharctr+0x3c>
	_delay_us(50);
}
    17e8:	1f 91       	pop	r17
    17ea:	08 95       	ret

000017ec <LCD_vidWriteNumber_8bits>:
	_delay_ms(2);


}
void LCD_vidWriteNumber_8bits(u16 Copy_u16Number)
{
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	1f 93       	push	r17
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	2a 97       	sbiw	r28, 0x0a	; 10
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	9c 01       	movw	r18, r24
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	81 f1       	breq	.+96     	; 0x186c <LCD_vidWriteNumber_8bits+0x80>
    {
    	LCD_vidWriteCharctr('0');
        return;
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	7e 01       	movw	r14, r28
    1810:	08 94       	sec
    1812:	e1 1c       	adc	r14, r1
    1814:	f1 1c       	adc	r15, r1
    }

    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    1816:	f7 01       	movw	r30, r14
    1818:	e1 0f       	add	r30, r17
    181a:	f1 1d       	adc	r31, r1
    181c:	c9 01       	movw	r24, r18
    181e:	6a e0       	ldi	r22, 0x0A	; 10
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodhi4>
    1826:	80 5d       	subi	r24, 0xD0	; 208
    1828:	80 83       	st	Z, r24
        Copy_u16Number /= 10;
    182a:	c9 01       	movw	r24, r18
    182c:	6a e0       	ldi	r22, 0x0A	; 10
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodhi4>
    1834:	9b 01       	movw	r18, r22
        i++;
    1836:	1f 5f       	subi	r17, 0xFF	; 255
    {
    	LCD_vidWriteCharctr('0');
        return;
    }

    while (Copy_u16Number > 0)
    1838:	61 15       	cp	r22, r1
    183a:	71 05       	cpc	r23, r1
    183c:	61 f7       	brne	.-40     	; 0x1816 <LCD_vidWriteNumber_8bits+0x2a>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    183e:	11 23       	and	r17, r17
    1840:	49 f0       	breq	.+18     	; 0x1854 <LCD_vidWriteNumber_8bits+0x68>
    {
        i--;
    1842:	11 50       	subi	r17, 0x01	; 1
        LCD_vidWriteCharctr(buffer[i]);
    1844:	f7 01       	movw	r30, r14
    1846:	e1 0f       	add	r30, r17
    1848:	f1 1d       	adc	r31, r1
    184a:	80 81       	ld	r24, Z
    184c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <LCD_vidWriteCharctr>
        buffer[i] = (Copy_u16Number % 10) + '0';
        Copy_u16Number /= 10;
        i++;
    }

    while (i > 0)
    1850:	11 23       	and	r17, r17
    1852:	b9 f7       	brne	.-18     	; 0x1842 <LCD_vidWriteNumber_8bits+0x56>
    {
        i--;
        LCD_vidWriteCharctr(buffer[i]);
    }
}
    1854:	2a 96       	adiw	r28, 0x0a	; 10
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	1f 91       	pop	r17
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	08 95       	ret
    char buffer[10];
    u8 i = 0;

    if (Copy_u16Number == 0)
    {
    	LCD_vidWriteCharctr('0');
    186c:	80 e3       	ldi	r24, 0x30	; 48
    186e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <LCD_vidWriteCharctr>
    1872:	f0 cf       	rjmp	.-32     	; 0x1854 <LCD_vidWriteNumber_8bits+0x68>

00001874 <LCD_vidSendCommand>:
}




void LCD_vidSendCommand(u8 u8CmdCpy){
    1874:	1f 93       	push	r17
    1876:	18 2f       	mov	r17, r24
	///8 Bits (D0->D7)////
	///RS -> 0 for command////
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_OUTPUT);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN, DIO_u8_LOW);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	//pass command //D0->D7//
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xff);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	6f ef       	ldi	r22, 0xFF	; 255
    189a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(LCD_DATA_PORT,u8CmdCpy);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	61 2f       	mov	r22, r17
    18a2:	0e 94 10 06 	call	0xc20	; 0xc20 <DIO_voidSetPortValue>

	//Enable
	DIO_voidSetPortDirection(LCD_CONTROL_PORT,0xff);
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	6f ef       	ldi	r22, 0xFF	; 255
    18aa:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_voidSetPortDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b8:	80 ea       	ldi	r24, 0xA0	; 160
    18ba:	9f e0       	ldi	r25, 0x0F	; 15
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_vidSendCommand+0x48>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	62 e0       	ldi	r22, 0x02	; 2
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>

}
    18ca:	1f 91       	pop	r17
    18cc:	08 95       	ret

000018ce <LCD_vidGotoxy>:
}

void LCD_vidGotoxy(u8 X, u8 Y)
{
	// Validate coordinates
	if (X < 16 && Y < 2)
    18ce:	80 31       	cpi	r24, 0x10	; 16
    18d0:	10 f4       	brcc	.+4      	; 0x18d6 <LCD_vidGotoxy+0x8>
    18d2:	62 30       	cpi	r22, 0x02	; 2
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <LCD_vidGotoxy+0xa>
    18d6:	08 95       	ret
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 0x80 + X : 0xC0 + X;
    18d8:	66 23       	and	r22, r22
    18da:	21 f4       	brne	.+8      	; 0x18e4 <LCD_vidGotoxy+0x16>
    18dc:	80 58       	subi	r24, 0x80	; 128
		LCD_vidSendCommand(address);
    18de:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    18e2:	08 95       	ret
{
	// Validate coordinates
	if (X < 16 && Y < 2)
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 0x80 + X : 0xC0 + X;
    18e4:	80 54       	subi	r24, 0x40	; 64
    18e6:	fb cf       	rjmp	.-10     	; 0x18de <LCD_vidGotoxy+0x10>

000018e8 <LCD_vidSendCommand_>:
	_delay_us(50);
	LCD_vidSendCommand(0x0C); // Display on
	_delay_us(50); }


void LCD_vidSendCommand_(u8 u8Cmd) {
    18e8:	1f 93       	push	r17
    18ea:	18 2f       	mov	r17, r24
	LCD_vidSendCommand(u8Cmd >> 4);
    18ec:	82 95       	swap	r24
    18ee:	8f 70       	andi	r24, 0x0F	; 15
    18f0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
	LCD_vidSendCommand(u8Cmd & 0x0F);
    18f4:	81 2f       	mov	r24, r17
    18f6:	8f 70       	andi	r24, 0x0F	; 15
    18f8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>


}
    18fc:	1f 91       	pop	r17
    18fe:	08 95       	ret

00001900 <LCD_vidInit_8bits>:

#include "LCD_Config.h"
#include "LCD_Interfac.h"


void LCD_vidInit_8bits(void) {
    1900:	1f 93       	push	r17
	DIO_voidSetPortDirection(DIO_u8_PORTB, 0xFF);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	6f ef       	ldi	r22, 0xFF	; 255
    1906:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT);
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	// RS
	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	// RW
	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    1928:	20 e9       	ldi	r18, 0x90	; 144
    192a:	31 e0       	ldi	r19, 0x01	; 1
    192c:	48 ec       	ldi	r20, 0xC8	; 200
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	ca 01       	movw	r24, r20
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_vidInit_8bits+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	21 50       	subi	r18, 0x01	; 1
    1938:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193a:	d1 f7       	brne	.-12     	; 0x1930 <LCD_vidInit_8bits+0x30>
	// EN
	// 2. Power-on delay (critical!)
	_delay_ms(40); // Extended delay for safet
	// 3. Triple initialization sequence
	LCD_vidSendCommand(0x30);
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	9e e4       	ldi	r25, 0x4E	; 78
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_vidInit_8bits+0x46>
	_delay_ms(10);
	// Extended delay
	LCD_vidSendCommand(0x30);
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    1950:	80 ed       	ldi	r24, 0xD0	; 208
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_vidInit_8bits+0x54>
	_delay_ms(1);
	LCD_vidSendCommand(0x30);
    1958:	80 e3       	ldi	r24, 0x30	; 48
    195a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    195e:	8c e2       	ldi	r24, 0x2C	; 44
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_vidInit_8bits+0x62>
	_delay_us(150);
	// 4. Final configuration
	LCD_vidSendCommand(0x38);
    1966:	88 e3       	ldi	r24, 0x38	; 56
    1968:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    196c:	15 e8       	ldi	r17, 0x85	; 133
    196e:	81 2f       	mov	r24, r17
    1970:	8a 95       	dec	r24
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_vidInit_8bits+0x70>
	// 8-bit, 2-line, 5x8 font
	_delay_us(50);
	LCD_vidSendCommand(0x08);
    1974:	88 e0       	ldi	r24, 0x08	; 8
    1976:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    197a:	81 2f       	mov	r24, r17
    197c:	8a 95       	dec	r24
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_vidInit_8bits+0x7c>
	// Display off
	_delay_us(50);
	LCD_vidSendCommand(0x01);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1986:	80 e7       	ldi	r24, 0x70	; 112
    1988:	97 e1       	ldi	r25, 0x17	; 23
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_vidInit_8bits+0x8a>
	// Clear display
	_delay_ms(3); // Longer clear delay
	LCD_vidSendCommand(0x06); // Entry mode set
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1994:	81 2f       	mov	r24, r17
    1996:	8a 95       	dec	r24
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_vidInit_8bits+0x96>
	_delay_us(50);
	LCD_vidSendCommand(0x0C); // Display on
    199a:	8c e0       	ldi	r24, 0x0C	; 12
    199c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_vidSendCommand>
    19a0:	1a 95       	dec	r17
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_vidInit_8bits+0xa0>
	_delay_us(50); }
    19a4:	1f 91       	pop	r17
    19a6:	08 95       	ret

000019a8 <SERVO_voidInit>:
#include "Servo_Interface.h"

void SERVO_voidInit(void)
{
    // OC1A = PD5 كـ output
    SERVO_DDR |= (1 << SERVO_PIN);
    19a8:	8d 9a       	sbi	0x11, 5	; 17

    // Timer1 Fast PWM Mode 14 (ICR1 = TOP), Prescaler = 8
    TCCR1A = (1 << COM1A1) | (1 << WGM11);
    19aa:	82 e8       	ldi	r24, 0x82	; 130
    19ac:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    19ae:	8a e1       	ldi	r24, 0x1A	; 26
    19b0:	8e bd       	out	0x2e, r24	; 46

    // Set TOP value = 20ms
    ICR1 = SERVO_TOP;
    19b2:	80 e2       	ldi	r24, 0x20	; 32
    19b4:	9e e4       	ldi	r25, 0x4E	; 78
    19b6:	97 bd       	out	0x27, r25	; 39
    19b8:	86 bd       	out	0x26, r24	; 38
}
    19ba:	08 95       	ret

000019bc <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    // تحويل الزاوية (0–180) ل pulse width (1000–2000 µs)
    u16 pulse = SERVO_MIN_PULSE + ((u32)Copy_u16Angle * (SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / 180;
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	20 ed       	ldi	r18, 0xD0	; 208
    19c6:	37 e0       	ldi	r19, 0x07	; 7
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsi3>
    19d0:	24 eb       	ldi	r18, 0xB4	; 180
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__udivmodsi4>
    19dc:	2c 50       	subi	r18, 0x0C	; 12
    19de:	3e 4f       	sbci	r19, 0xFE	; 254

    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	24 3f       	cpi	r18, 0xF4	; 244
    19e4:	38 07       	cpc	r19, r24
    19e6:	28 f4       	brcc	.+10     	; 0x19f2 <SERVO_voidSetAngle+0x36>
    19e8:	24 ef       	ldi	r18, 0xF4	; 244
    19ea:	31 e0       	ldi	r19, 0x01	; 1
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;

    OCR1A = pulse;  // خرج على OC1A
    19ec:	3b bd       	out	0x2b, r19	; 43
    19ee:	2a bd       	out	0x2a, r18	; 42
}
    19f0:	08 95       	ret
{
    // تحويل الزاوية (0–180) ل pulse width (1000–2000 µs)
    u16 pulse = SERVO_MIN_PULSE + ((u32)Copy_u16Angle * (SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / 180;

    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;
    19f2:	89 e0       	ldi	r24, 0x09	; 9
    19f4:	25 3c       	cpi	r18, 0xC5	; 197
    19f6:	38 07       	cpc	r19, r24
    19f8:	c8 f3       	brcs	.-14     	; 0x19ec <SERVO_voidSetAngle+0x30>
    19fa:	24 ec       	ldi	r18, 0xC4	; 196
    19fc:	39 e0       	ldi	r19, 0x09	; 9

    OCR1A = pulse;  // خرج على OC1A
    19fe:	3b bd       	out	0x2b, r19	; 43
    1a00:	2a bd       	out	0x2a, r18	; 42
}
    1a02:	08 95       	ret

00001a04 <SWCH_GetVal>:
    }
}

u8 SWCH_GetVal()
{
    return (DIO_u8GetPinValue(SWCH_PORT, SWCH_PIN));
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	0e 94 21 06 	call	0xc42	; 0xc42 <DIO_u8GetPinValue>
}
    1a0c:	08 95       	ret

00001a0e <SWCH_init>:
#include "../MCAL/DIO_Register.h"
#include "SWCH_Config.h"
#include "SWCH_Interface.h"
void SWCH_init(u8 ARG_u8InputState)
{
    switch(ARG_u8InputState)
    1a0e:	88 23       	and	r24, r24
    1a10:	59 f4       	brne	.+22     	; 0x1a28 <SWCH_init+0x1a>
    {
        case SWCH_INPUT_PULLUP:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
            DIO_voidSetPinValue(SWCH_PORT, SWCH_PIN, 1);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1a26:	08 95       	ret
#include "../MCAL/DIO_Register.h"
#include "SWCH_Config.h"
#include "SWCH_Interface.h"
void SWCH_init(u8 ARG_u8InputState)
{
    switch(ARG_u8InputState)
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <SWCH_init+0x20>
    1a2c:	08 95       	ret
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
            DIO_voidSetPinValue(SWCH_PORT, SWCH_PIN, 1);
            break;

        case SWCH_INPUT_FLOATING:
            DIO_voidSetPinDirection(SWCH_PORT, SWCH_PIN, DIO_u8_INPUT);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
    1a38:	08 95       	ret

00001a3a <STEPPER_voidRotateACW>:
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
	_delay_ms(5);
}
void STEPPER_voidRotateACW(void){
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a66:	00 e1       	ldi	r16, 0x10	; 16
    1a68:	17 e2       	ldi	r17, 0x27	; 39
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <STEPPER_voidRotateACW+0x32>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	63 e0       	ldi	r22, 0x03	; 3
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1a98:	c8 01       	movw	r24, r16
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <STEPPER_voidRotateACW+0x60>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	63 e0       	ldi	r22, 0x03	; 3
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <STEPPER_voidRotateACW+0x8e>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	63 e0       	ldi	r22, 0x03	; 3
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1af4:	c8 01       	movw	r24, r16
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <STEPPER_voidRotateACW+0xbc>
	_delay_ms(5);
}
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <STEPPER_voidRotateCW>:
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_OUTPUT);
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_OUTPUT);
}
void STEPPER_voidRotateCW(void){
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_HIGH);
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	63 e0       	ldi	r22, 0x03	; 3
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1b2c:	00 e1       	ldi	r16, 0x10	; 16
    1b2e:	17 e2       	ldi	r17, 0x27	; 39
    1b30:	c8 01       	movw	r24, r16
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <STEPPER_voidRotateCW+0x32>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_HIGH);
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	63 e0       	ldi	r22, 0x03	; 3
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1b5e:	c8 01       	movw	r24, r16
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <STEPPER_voidRotateCW+0x60>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_HIGH);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_LOW);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <STEPPER_voidRotateCW+0x8e>
	_delay_ms(5);
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_LOW);
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_LOW);
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_LOW);
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_HIGH);
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	63 e0       	ldi	r22, 0x03	; 3
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    1bba:	c8 01       	movw	r24, r16
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <STEPPER_voidRotateCW+0xbc>
	_delay_ms(5);
}
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <STEPPER_voidInit>:
#include "Stepper_interface.h"
#include "Stepper_config.h"
#include "util/delay.h"

void STEPPER_voidInit(void){
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT, STEPPER_u8_COIL_BLUE,DIO_u8_OUTPUT);
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Pink,DIO_u8_OUTPUT);
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Yellow,DIO_u8_OUTPUT);
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_u8_COIL_PORT,STEPPER_u8_COIL_Orange,DIO_u8_OUTPUT);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	63 e0       	ldi	r22, 0x03	; 3
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>
}
    1bee:	08 95       	ret

00001bf0 <__vector_9>:
#include <avr/interrupt.h>

static volatile u16 TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
    1bf0:	1f 92       	push	r1
    1bf2:	0f 92       	push	r0
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	0f 92       	push	r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    TimerOverflow++;
    1bfe:	80 91 b7 01 	lds	r24, 0x01B7
    1c02:	90 91 b8 01 	lds	r25, 0x01B8
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	90 93 b8 01 	sts	0x01B8, r25
    1c0c:	80 93 b7 01 	sts	0x01B7, r24
}
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <Ultrasonic_GetDistance>:
    /* Timer1 Normal mode + overflow interrupt */
    Timer1_voidInit_Normal();
}

f32 Ultrasonic_GetDistance(void)
{
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    u32 count;
    f32 distance;

    // Send 10us pulse
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_HIGH);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c30:	8a e1       	ldi	r24, 0x1A	; 26
    1c32:	8a 95       	dec	r24
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <Ultrasonic_GetDistance+0x14>
    _delay_us(10);
    DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_LOW);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinValue>

    // Rising edge, prescaler=8
    TCCR1B = (1 << ICES1) | (1 << CS11);
    1c40:	82 e4       	ldi	r24, 0x42	; 66
    1c42:	8e bd       	out	0x2e, r24	; 46
    TIFR = (1 << ICF1) | (1 << TOV1);
    1c44:	84 e2       	ldi	r24, 0x24	; 36
    1c46:	88 bf       	out	0x38, r24	; 56
    while ((TIFR & (1 << ICF1)) == 0);
    1c48:	08 b6       	in	r0, 0x38	; 56
    1c4a:	05 fe       	sbrs	r0, 5
    1c4c:	fd cf       	rjmp	.-6      	; 0x1c48 <Ultrasonic_GetDistance+0x2a>

    Timer1_voidSetTCNT(0);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer1_voidSetTCNT>
    TCCR1B = (0 << ICES1) | (1 << CS11); // falling edge, prescaler=8
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	8e bd       	out	0x2e, r24	; 46
    TIFR = (1 << ICF1) | (1 << TOV1);
    1c5a:	84 e2       	ldi	r24, 0x24	; 36
    1c5c:	88 bf       	out	0x38, r24	; 56
    TimerOverflow = 0;
    1c5e:	10 92 b8 01 	sts	0x01B8, r1
    1c62:	10 92 b7 01 	sts	0x01B7, r1

    while ((TIFR & (1 << ICF1)) == 0);
    1c66:	08 b6       	in	r0, 0x38	; 56
    1c68:	05 fe       	sbrs	r0, 5
    1c6a:	fd cf       	rjmp	.-6      	; 0x1c66 <Ultrasonic_GetDistance+0x48>

    count = ICR1 + (65535UL * TimerOverflow);
    1c6c:	e6 b4       	in	r14, 0x26	; 38
    1c6e:	f7 b4       	in	r15, 0x27	; 39
    1c70:	60 91 b7 01 	lds	r22, 0x01B7
    1c74:	70 91 b8 01 	lds	r23, 0x01B8
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	2f ef       	ldi	r18, 0xFF	; 255
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsi3>
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	e6 0e       	add	r14, r22
    1c8e:	f7 1e       	adc	r15, r23
    1c90:	08 1f       	adc	r16, r24
    1c92:	19 1f       	adc	r17, r25
    1c94:	c8 01       	movw	r24, r16
    1c96:	b7 01       	movw	r22, r14
    1c98:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	48 ee       	ldi	r20, 0xE8	; 232
    1ca2:	52 e4       	ldi	r21, 0x42	; 66
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     * => distance = (count * 0.5) / 58 = count / 116
     */
    distance = (f32)count / 116.0f;

    return distance;
}
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	08 95       	ret

00001cb2 <Ultrasonic_Init>:
}

void Ultrasonic_Init(void)
{
    /* Trigger pin output */
    DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, DIO_u8_OUTPUT);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>

    /* Echo pin input (ICP1 = PD6) */
    DIO_voidSetPinDirection(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, DIO_u8_INPUT);
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	66 e0       	ldi	r22, 0x06	; 6
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinDirection>

    /* Enable global interrupts */
    Global_Interrupt_Enable();
    1cc6:	0e 94 55 07 	call	0xeaa	; 0xeaa <Global_Interrupt_Enable>

    /* Timer1 Normal mode + overflow interrupt */
    Timer1_voidInit_Normal();
    1cca:	0e 94 a0 08 	call	0x1140	; 0x1140 <Timer1_voidInit_Normal>
}
    1cce:	08 95       	ret

00001cd0 <Auto_Mode>:
// --------- GLOBAL VARIABLES ---------
volatile u8 mode = 1; // 1 = Auto (default), 0 = Manual

// --------- FUNCTIONS ---------
void Auto_Mode(void)
{
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    u16 distance, leftDist, rightDist;

    distance = Ultrasonic_GetDistance();
    1cd8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Ultrasonic_GetDistance>

    if (distance > 20 && distance < 200)
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	65 51       	subi	r22, 0x15	; 21
    1ce2:	70 40       	sbci	r23, 0x00	; 0
    1ce4:	63 3b       	cpi	r22, 0xB3	; 179
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	08 f4       	brcc	.+2      	; 0x1cec <Auto_Mode+0x1c>
    1cea:	58 c0       	rjmp	.+176    	; 0x1d9c <Auto_Mode+0xcc>
    {
        L298_voidMove(MOVE_FORWARD);
    }
    else
    {
        L298_voidMove(MOVE_STOP);
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>

        // يمين
        SERVO_voidSetAngle(0);
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SERVO_voidSetAngle>
    1cfa:	20 e4       	ldi	r18, 0x40	; 64
    1cfc:	3f e1       	ldi	r19, 0x1F	; 31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfe:	48 ec       	ldi	r20, 0xC8	; 200
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	ca 01       	movw	r24, r20
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <Auto_Mode+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	21 50       	subi	r18, 0x01	; 1
    1d0a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	d1 f7       	brne	.-12     	; 0x1d02 <Auto_Mode+0x32>
        _delay_ms(800);
        rightDist = Ultrasonic_GetDistance();
    1d0e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Ultrasonic_GetDistance>
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	8b 01       	movw	r16, r22

        // شمال
        SERVO_voidSetAngle(180);
    1d18:	84 eb       	ldi	r24, 0xB4	; 180
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SERVO_voidSetAngle>
    1d20:	20 e4       	ldi	r18, 0x40	; 64
    1d22:	3f e1       	ldi	r19, 0x1F	; 31
    1d24:	48 ec       	ldi	r20, 0xC8	; 200
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	ca 01       	movw	r24, r20
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <Auto_Mode+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	21 50       	subi	r18, 0x01	; 1
    1d30:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	d1 f7       	brne	.-12     	; 0x1d28 <Auto_Mode+0x58>
        _delay_ms(800);
        leftDist = Ultrasonic_GetDistance();
    1d34:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Ultrasonic_GetDistance>
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	eb 01       	movw	r28, r22

        // رجع للمنتصف
        SERVO_voidSetAngle(90);
    1d3e:	8a e5       	ldi	r24, 0x5A	; 90
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SERVO_voidSetAngle>

        if (rightDist > leftDist && rightDist > 30)
    1d46:	c0 17       	cp	r28, r16
    1d48:	d1 07       	cpc	r29, r17
    1d4a:	b8 f0       	brcs	.+46     	; 0x1d7a <Auto_Mode+0xaa>
        {
            L298_voidMove(MOVE_RIGHT);
            _delay_ms(400);
        }
        else if (leftDist >= rightDist && leftDist > 30)
    1d4c:	6f 97       	sbiw	r28, 0x1f	; 31
    1d4e:	70 f5       	brcc	.+92     	; 0x1dac <Auto_Mode+0xdc>
            L298_voidMove(MOVE_LEFT);
            _delay_ms(400);
        }
        else
        {
            L298_voidMove(MOVE_BACKWARD);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>
    1d56:	28 e8       	ldi	r18, 0x88	; 136
    1d58:	33 e1       	ldi	r19, 0x13	; 19
    1d5a:	48 ec       	ldi	r20, 0xC8	; 200
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	ca 01       	movw	r24, r20
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <Auto_Mode+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	21 50       	subi	r18, 0x01	; 1
    1d66:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	d1 f7       	brne	.-12     	; 0x1d5e <Auto_Mode+0x8e>
            _delay_ms(500);
        }

        L298_voidMove(MOVE_STOP);
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>
    }
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret
        leftDist = Ultrasonic_GetDistance();

        // رجع للمنتصف
        SERVO_voidSetAngle(90);

        if (rightDist > leftDist && rightDist > 30)
    1d7a:	0f 31       	cpi	r16, 0x1F	; 31
    1d7c:	11 05       	cpc	r17, r1
    1d7e:	40 f3       	brcs	.-48     	; 0x1d50 <Auto_Mode+0x80>
        {
            L298_voidMove(MOVE_RIGHT);
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>
    1d86:	20 ea       	ldi	r18, 0xA0	; 160
    1d88:	3f e0       	ldi	r19, 0x0F	; 15
    1d8a:	48 ec       	ldi	r20, 0xC8	; 200
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	ca 01       	movw	r24, r20
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <Auto_Mode+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	21 50       	subi	r18, 0x01	; 1
    1d96:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	d1 f7       	brne	.-12     	; 0x1d8e <Auto_Mode+0xbe>
    1d9a:	e7 cf       	rjmp	.-50     	; 0x1d6a <Auto_Mode+0x9a>

    distance = Ultrasonic_GetDistance();

    if (distance > 20 && distance < 200)
    {
        L298_voidMove(MOVE_FORWARD);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>
            _delay_ms(500);
        }

        L298_voidMove(MOVE_STOP);
    }
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	08 95       	ret
            L298_voidMove(MOVE_RIGHT);
            _delay_ms(400);
        }
        else if (leftDist >= rightDist && leftDist > 30)
        {
            L298_voidMove(MOVE_LEFT);
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	0e 94 8f 09 	call	0x131e	; 0x131e <L298_voidMove>
    1db2:	20 ea       	ldi	r18, 0xA0	; 160
    1db4:	3f e0       	ldi	r19, 0x0F	; 15
    1db6:	48 ec       	ldi	r20, 0xC8	; 200
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	ca 01       	movw	r24, r20
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <Auto_Mode+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	21 50       	subi	r18, 0x01	; 1
    1dc2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	d1 f7       	brne	.-12     	; 0x1dba <Auto_Mode+0xea>
    1dc6:	d1 cf       	rjmp	.-94     	; 0x1d6a <Auto_Mode+0x9a>

00001dc8 <main>:

// --------- MAIN ---------
int main(void)
{
    // Init
    L298_voidInit();
    1dc8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <L298_voidInit>
    SERVO_voidInit();
    1dcc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <SERVO_voidInit>
    Ultrasonic_Init();
    1dd0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <Ultrasonic_Init>
    // Enable global interrupt
  //  sei();

    while (1)
    {
        if (mode == 1) // Auto Mode
    1dd4:	80 91 82 01 	lds	r24, 0x0182
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <main+0xc>
        {
            Auto_Mode();
    1ddc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <Auto_Mode>
    1de0:	f9 cf       	rjmp	.-14     	; 0x1dd4 <main+0xc>

00001de2 <__mulsi3>:
    1de2:	62 9f       	mul	r22, r18
    1de4:	d0 01       	movw	r26, r0
    1de6:	73 9f       	mul	r23, r19
    1de8:	f0 01       	movw	r30, r0
    1dea:	82 9f       	mul	r24, r18
    1dec:	e0 0d       	add	r30, r0
    1dee:	f1 1d       	adc	r31, r1
    1df0:	64 9f       	mul	r22, r20
    1df2:	e0 0d       	add	r30, r0
    1df4:	f1 1d       	adc	r31, r1
    1df6:	92 9f       	mul	r25, r18
    1df8:	f0 0d       	add	r31, r0
    1dfa:	83 9f       	mul	r24, r19
    1dfc:	f0 0d       	add	r31, r0
    1dfe:	74 9f       	mul	r23, r20
    1e00:	f0 0d       	add	r31, r0
    1e02:	65 9f       	mul	r22, r21
    1e04:	f0 0d       	add	r31, r0
    1e06:	99 27       	eor	r25, r25
    1e08:	72 9f       	mul	r23, r18
    1e0a:	b0 0d       	add	r27, r0
    1e0c:	e1 1d       	adc	r30, r1
    1e0e:	f9 1f       	adc	r31, r25
    1e10:	63 9f       	mul	r22, r19
    1e12:	b0 0d       	add	r27, r0
    1e14:	e1 1d       	adc	r30, r1
    1e16:	f9 1f       	adc	r31, r25
    1e18:	bd 01       	movw	r22, r26
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	11 24       	eor	r1, r1
    1e1e:	08 95       	ret

00001e20 <__udivmodhi4>:
    1e20:	aa 1b       	sub	r26, r26
    1e22:	bb 1b       	sub	r27, r27
    1e24:	51 e1       	ldi	r21, 0x11	; 17
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <__udivmodhi4_ep>

00001e28 <__udivmodhi4_loop>:
    1e28:	aa 1f       	adc	r26, r26
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	a6 17       	cp	r26, r22
    1e2e:	b7 07       	cpc	r27, r23
    1e30:	10 f0       	brcs	.+4      	; 0x1e36 <__udivmodhi4_ep>
    1e32:	a6 1b       	sub	r26, r22
    1e34:	b7 0b       	sbc	r27, r23

00001e36 <__udivmodhi4_ep>:
    1e36:	88 1f       	adc	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	5a 95       	dec	r21
    1e3c:	a9 f7       	brne	.-22     	; 0x1e28 <__udivmodhi4_loop>
    1e3e:	80 95       	com	r24
    1e40:	90 95       	com	r25
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	08 95       	ret

00001e48 <__udivmodsi4>:
    1e48:	a1 e2       	ldi	r26, 0x21	; 33
    1e4a:	1a 2e       	mov	r1, r26
    1e4c:	aa 1b       	sub	r26, r26
    1e4e:	bb 1b       	sub	r27, r27
    1e50:	fd 01       	movw	r30, r26
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <__udivmodsi4_ep>

00001e54 <__udivmodsi4_loop>:
    1e54:	aa 1f       	adc	r26, r26
    1e56:	bb 1f       	adc	r27, r27
    1e58:	ee 1f       	adc	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	a2 17       	cp	r26, r18
    1e5e:	b3 07       	cpc	r27, r19
    1e60:	e4 07       	cpc	r30, r20
    1e62:	f5 07       	cpc	r31, r21
    1e64:	20 f0       	brcs	.+8      	; 0x1e6e <__udivmodsi4_ep>
    1e66:	a2 1b       	sub	r26, r18
    1e68:	b3 0b       	sbc	r27, r19
    1e6a:	e4 0b       	sbc	r30, r20
    1e6c:	f5 0b       	sbc	r31, r21

00001e6e <__udivmodsi4_ep>:
    1e6e:	66 1f       	adc	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	88 1f       	adc	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	1a 94       	dec	r1
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <__udivmodsi4_loop>
    1e7a:	60 95       	com	r22
    1e7c:	70 95       	com	r23
    1e7e:	80 95       	com	r24
    1e80:	90 95       	com	r25
    1e82:	9b 01       	movw	r18, r22
    1e84:	ac 01       	movw	r20, r24
    1e86:	bd 01       	movw	r22, r26
    1e88:	cf 01       	movw	r24, r30
    1e8a:	08 95       	ret

00001e8c <__prologue_saves__>:
    1e8c:	2f 92       	push	r2
    1e8e:	3f 92       	push	r3
    1e90:	4f 92       	push	r4
    1e92:	5f 92       	push	r5
    1e94:	6f 92       	push	r6
    1e96:	7f 92       	push	r7
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	ca 1b       	sub	r28, r26
    1eb6:	db 0b       	sbc	r29, r27
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	09 94       	ijmp

00001ec4 <__epilogue_restores__>:
    1ec4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec6:	39 88       	ldd	r3, Y+17	; 0x11
    1ec8:	48 88       	ldd	r4, Y+16	; 0x10
    1eca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ecc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ece:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eda:	df 80       	ldd	r13, Y+7	; 0x07
    1edc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ede:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee8:	ce 0f       	add	r28, r30
    1eea:	d1 1d       	adc	r29, r1
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	ed 01       	movw	r28, r26
    1ef8:	08 95       	ret

00001efa <_exit>:
    1efa:	f8 94       	cli

00001efc <__stop_program>:
    1efc:	ff cf       	rjmp	.-2      	; 0x1efc <__stop_program>
